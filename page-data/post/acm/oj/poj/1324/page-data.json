{"componentChunkName":"component---src-layout-post-post-tsx","path":"/post/acm/oj/poj/1324/","result":{"data":{"content":{"title":"POJ-1324 Holedox Moving 解题报告","description":"POJ-1324 Holedox Moving 解题报告","createdAt":"April 13, 2016","updatedAt":null,"timeToRead":"4min 25s","frontmatter2":{"aplayer":null,"wechatThumbnail":null},"toc":{"children":[{"depth":2,"identifier":"heading-题意简述","contents":[{"type":"text","value":"题意简述"}],"children":[]},{"depth":2,"identifier":"heading-题目简析","contents":[{"type":"text","value":"题目简析"}],"children":[]},{"depth":2,"identifier":"heading-复杂度分析","contents":[{"type":"text","value":"复杂度分析"}],"children":[]},{"depth":2,"identifier":"heading-related","contents":[{"type":"text","value":"Related"}],"children":[]}]},"categories":[],"tags":["acm","bfs","图论","状态压缩","解题报告"],"ast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"题意简述"}],"identifier":"heading-题意简述"},{"type":"paragraph","children":[{"type":"text","value":"在一个 "},{"type":"inlineMath","value":"N\\times M"},{"type":"text","value":" 的矩形方格地图中，有一条长度为 "},{"type":"inlineMath","value":"L"},{"type":"text","value":" 的贪吃蛇。地图的 "},{"type":"inlineMath","value":"(1,1)"},{"type":"text","value":" 位置是一个出口，如果贪吃蛇能移动到出口，输出最短步数（头到达出口的步数）；否则输出 "},{"type":"inlineMath","value":"-1"},{"type":"text","value":"。"}]},{"type":"paragraph","children":[{"type":"text","value":"贪吃蛇的移动规则如下："}]},{"type":"list","ordered":false,"marker":45,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"只能朝边相邻的格子移动"}]},{"type":"listItem","children":[{"type":"text","value":"不能朝障碍物移动（身体及四周墙壁都视作障碍物）"}]}]},{"type":"paragraph","children":[{"type":"text","value":"数据范围： "},{"type":"inlineMath","value":"1\\leqslant N, M\\leqslant 8"},{"type":"text","value":"，"},{"type":"inlineMath","value":"2\\leqslant L\\leqslant 8"},{"type":"text","value":"。"}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"题目简析"}],"identifier":"heading-题目简析"},{"type":"paragraph","children":[{"type":"text","value":"为方便叙述，对贪吃蛇的身体进行编号：蛇头为 "},{"type":"inlineMath","value":"-1"},{"type":"text","value":" 号，蛇尾为 "},{"type":"inlineMath","value":"L-2"},{"type":"text","value":" 号，以此类推。因为贪吃蛇的身体是紧邻的。所以，当我们确定了蛇头的位置，对于身体的其它任一部分\n"},{"type":"inlineMath","value":"i"},{"type":"text","value":"，我们仅需知道 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 相对与 "},{"type":"inlineMath","value":"i-1"},{"type":"text","value":" 的方向即可。于是可用链表的思想来存储贪吃蛇："}]},{"type":"list","ordered":false,"marker":45,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"蛇头用一个二元组 "},{"type":"inlineMath","value":"(x,y)"},{"type":"text","value":" 表示其位置"}]},{"type":"listItem","children":[{"type":"text","value":"身体其它部分 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 用一个整数 "},{"type":"inlineMath","value":"dir(i)\\in\\lbrace 0, 1, 2, 3 \\rbrace"},{"type":"text","value":" 来表示它相对\n"},{"type":"inlineMath","value":"i-1"},{"type":"text","value":" 的方向。"}]}]},{"type":"paragraph","children":[{"type":"text","value":"注意到方向只有 "},{"type":"inlineMath","value":"4"},{"type":"text","value":" 个数，且蛇的长度 "},{"type":"inlineMath","value":"L\\leqslant 8"},{"type":"text","value":"。不难想到状态压缩，则用一个\n"},{"type":"inlineMath","value":"28"},{"type":"text","value":" 位 bit 的整数表示蛇身就够了："}]},{"type":"list","ordered":false,"marker":45,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"约定第 "},{"type":"inlineMath","value":"2i,2i+1"},{"type":"text","value":" 两位 bit 表示蛇身第 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 号部分相对于 "},{"type":"inlineMath","value":"i-1"},{"type":"text","value":" 号部分的方向。"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"当蛇头朝某一合法位置移动后，"},{"type":"inlineMath","value":"\\displaystyle dir'(i)=\\frac{dir(i-1)}{4} \\times 4 = c"},{"type":"text","value":"\n其中，"},{"type":"inlineMath","value":"dir'"},{"type":"text","value":" 表示移动后的蛇身位置关系，"},{"type":"inlineMath","value":"c"},{"type":"text","value":" 为此次蛇头移动的方向\n"},{"type":"footnoteReference","label":"1","identifier":"footnote-1"},{"type":"text","value":"。"}]}]}]},{"type":"paragraph","children":[{"type":"text","value":"所以，当贪吃蛇移动一步后，我们仅需将方向变量：左移两位，再右移两位，再或上蛇头移动的方向。剩下的问题就是宽度优先搜索了。"}]},{"type":"admonition","keyword":"tip","title":[],"children":[{"type":"paragraph","children":[{"type":"text","value":"问题的难点在于记录移动的状态。"}]}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"复杂度分析"}],"identifier":"heading-复杂度分析"},{"type":"paragraph","children":[{"type":"text","value":"由于移动操作仅需 "},{"type":"inlineMath","value":"O(1)"},{"type":"text","value":" 就可以完成了；但是，判断下一步是否为蛇的身体将需要\n"},{"type":"inlineMath","value":"O(L)"},{"type":"text","value":" 的时间完成。一共有 "},{"type":"inlineMath","value":"O(N\\times M\\times 2^{2L-2})"},{"type":"text","value":" 个状态。"}]},{"type":"list","ordered":false,"marker":45,"spread":false,"children":[{"type":"listItem","children":[{"type":"inlineCode","value":"空间复杂度"},{"type":"text","value":" "},{"type":"inlineMath","value":"O(N\\times M\\times 2^{2L-2})"}]},{"type":"listItem","children":[{"type":"inlineCode","value":"时间复杂度"},{"type":"text","value":" "},{"type":"inlineMath","value":"O(N\\times M\\times L\\times 2^{2L-2})"}]}]},{"type":"paragraph","children":[{"type":"text","value":"AC 代码："}]},{"type":"code","lang":"cpp","meta":"title=\"poj.1324.cpp\" sourcefile=\"./solution.cpp\" linenos collapsed maxlines=20","value":"#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\nusing namespace std;\n\nconst int nx[] = { -1, 0, 1, 0 };\nconst int ny[] = { 0, 1, 0, -1 };\n\nint T_T, N, M, L, B, bit, sx, sy, sd;\nbool vis[21][21][1 << 14 | 1], blank[21][21];\n\nstruct node {\n  int x, y, d, s;\n  node(int x = 0, int y = 0, int d = 0, int s = 0) : x(x), y(y), d(d), s(s) {\n  }\n  bool block(int x, int y) {\n    if (x >= 1 && y >= 1 && x <= N && y <= M && blank[x][y]) {\n      int mx = this->x;\n      int my = this->y;\n      int md = this->d;\n      for (int i = 1; i < L; ++i) {\n        int d = md & 3;\n        mx += nx[d];\n        my += ny[d];\n        md >>= 2;\n        if (mx == x && my == y) return true;\n      }\n      return false;\n    }\n    return true;\n  }\n};\n\nqueue<node> Q;\n\nint bfs() {\n  while (!Q.empty()) Q.pop();\n  Q.push(node(sx, sy, sd));\n  vis[sx][sy][sd] = true;\n\n  while (!Q.empty()) {\n    node now = Q.front();\n    Q.pop();\n\n    if (now.x == 1 && now.y == 1) return now.s;\n    for (int d = 0; d < 4; ++d) {\n      int mx = now.x + nx[d];\n      int my = now.y + ny[d];\n      if (!now.block(mx, my)) {\n        int md = ((now.d << 2) & bit) | (d ^ 2);\n        if (vis[mx][my][md]) continue;\n        vis[mx][my][md] = true;\n        Q.push(node(mx, my, md, now.s + 1));\n      }\n    }\n  }\n\n  return -1;\n}\n\nvoid work() {\n  while (scanf(\"%d%d%d\", &N, &M, &L) == 3 && N && M && L) {\n    bit = (1 << (L - 1 << 1)) - 1;\n    for (int n = 1; n <= N; ++n)\n      for (int m = 1; m <= M; ++m) memset(vis[n][m], 0, bit + 1);\n    memset(blank, 1, sizeof blank);\n\n    scanf(\"%d%d\", &sx, &sy);\n    sd = 0;\n    int mx = sx, my = sy, mu, mv;\n    for (int i = 0; i < L - 1; ++i) {\n      scanf(\"%d%d\", &mu, &mv);\n      for (int d = 0; d < 4; ++d)\n        if (mx + nx[d] == mu && my + ny[d] == mv) {\n          sd |= d << (i << 1);\n          mx = mu;\n          my = mv;\n          break;\n        }\n    }\n    scanf(\"%d\", &B);\n    while (B--) {\n      scanf(\"%d%d\", &mu, &mv);\n      blank[mu][mv] = false;\n    }\n\n    printf(\"Case %d: %d\\n\", ++T_T, bfs());\n  }\n}\n\nint main() {\n  work();\n  return 0;\n}\n"},{"type":"heading","depth":2,"children":[{"type":"text","value":"Related"}],"identifier":"heading-related"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"link","url":"http://poj.org/problem?id=1324","children":[{"type":"text","value":"题目链接"}]}]},{"type":"listItem","children":[{"type":"link","url":"/static/04e904f4ac58f4d638c7541f984023f8944c8da8/solution.cpp","children":[{"type":"text","value":"solution.cpp"}]}]}]}]},"ecmaImports":[],"definitionMap":{},"footnoteDefinitionMap":{"footnote-1":{"type":"footnoteDefinition","identifier":"footnote-1","label":"1","children":[{"type":"paragraph","children":[{"type":"text","value":"因为当贪吃蛇移动一步后，除了蛇头，身体 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 号部分将会移至原先 "},{"type":"inlineMath","value":"i-1"},{"type":"text","value":" 号部分所在的地方。，而 "},{"type":"inlineMath","value":"0"},{"type":"text","value":" 号身体会移至原先蛇头所处的位置，此时和蛇头的相对方向正好是移动方向"}]}]}},"fields":{"slug":"/post/acm/oj/poj/1324/"}},"previous":{"title":"HDU-5574 Colorful Tree 解题报告（原 2015-上海区域赛-C）","fields":{"slug":"/post/acm/oj/hdu/5574/"}},"next":{"title":"最长回文子串 Manacher 算法","fields":{"slug":"/post/algorithm/string/manacher/"}},"postItems":{"nodes":[{"title":"洗牌问题和 knuth-shuffle 算法","createdAt":"2021-07-22","tags":["shuffle","knuth-shuffle","约瑟夫环"],"fields":{"slug":"/post/algorithm/shuffle/"}},{"title":"编译原理-语法制导翻译实现计算器","createdAt":"2016-06-23","tags":["编译原理","语法制导翻译","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/exercise/"}},{"title":"编译原理-语法分析","createdAt":"2016-06-18","tags":["编译原理","语法分析","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/grammar/"}},{"title":"端口管理","createdAt":"2021-06-20","tags":["network","port","ssh","netstat"],"fields":{"slug":"/post/network/端口管理/"}},{"title":"防抖和节流","createdAt":"2021-09-03","tags":["coding","debounce","throttle"],"fields":{"slug":"/post/algorithm/debounce-and-throttle/"}},{"title":"精确覆盖问题和 DLX 算法","createdAt":"2021-07-24","tags":["算法","精确覆盖","DLX 算法"],"fields":{"slug":"/post/algorithm/dlx/"}},{"title":"背包九讲","createdAt":"2021-06-27","tags":["acm","算法","动态规划","背包问题"],"fields":{"slug":"/post/algorithm/knapsack/"}},{"title":"最长公共子序列（LCS）","createdAt":"2021-06-02","tags":["最长公共子序列","LCS"],"fields":{"slug":"/post/algorithm/lcs/"}},{"title":"最长上升子序列（LIS）","createdAt":"2021-06-02","tags":["最长上升子序列","LIS"],"fields":{"slug":"/post/algorithm/lis/"}},{"title":"当你想来一把数独","createdAt":"2021-08-01","tags":["game","sudoku"],"fields":{"slug":"/post/game/sudoku/"}},{"title":"函数的极限","createdAt":"2021-05-09","tags":["math","函数","极限"],"fields":{"slug":"/post/math/calculus/函数的极限/"}},{"title":"自然对数底数e","createdAt":"2021-08-07","tags":["math","函数","极限","自然对数"],"fields":{"slug":"/post/math/calculus/自然对数底数e/"}},{"title":"小球放盒模型","createdAt":"2016-04-22","tags":["math","组合数学"],"fields":{"slug":"/post/math/combinatorial/小球放盒模型/"}},{"title":"不修改数组找出重复的数字","createdAt":"2021-06-29","tags":["quiz","分治","追击"],"fields":{"slug":"/post/quiz/partition/find-duplicate-number/"}},{"title":"统计区间内的线段","createdAt":"2021-07-21","tags":["quiz","扫描线","前缀和","树状数组","线段树"],"fields":{"slug":"/post/quiz/scanning-line/segments/"}},{"title":"CSS 选择器","createdAt":"2020-11-02","tags":["web","frontend","css"],"fields":{"slug":"/post/web/css/selector/"}},{"title":"ECMA 2020 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2020/"}},{"title":"ECMA 2021 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2021/"}},{"title":"Javascript 踩坑记——继承和原型链","createdAt":"2021-09-05","tags":["studynote","javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/inherit/"}},{"title":"React Reconciliation","createdAt":"2021-06-26","tags":["react","react reconciliation"],"fields":{"slug":"/post/web/react/reconciliation/"}},{"title":"XSS 与 CSRF 的攻防","createdAt":"2021-08-19","tags":["web","web security","csrf"],"fields":{"slug":"/post/web/security/xss-csrf/"}},{"title":"二分图","createdAt":"2016-07-17","tags":["算法","图论","二分图","学习笔记"],"fields":{"slug":"/post/algorithm/graph/bipartite-graph/"}},{"title":"最长回文子串 Manacher 算法","createdAt":"2016-04-18","tags":["算法","字符串","回文串","manacher"],"fields":{"slug":"/post/algorithm/string/manacher/"}},{"title":"树链剖分","createdAt":"2016-04-23","tags":["acm","算法","树链剖分"],"fields":{"slug":"/post/algorithm/tree/tcs/"}},{"title":"伸展树专题","createdAt":"2016-07-03","tags":["acm","Splay","解题报告","专题训练"],"fields":{"slug":"/post/data-structure/bbst/splay/"}},{"title":"组合游戏基础之 SG 函数和 SG 定理","createdAt":"2016-09-04","tags":["组合数学","组合游戏","SG 定理"],"fields":{"slug":"/post/math/combinatorial/SG/"}},{"title":"快速傅里叶变换和雷德算法","createdAt":"2016-04-10","tags":["acm","大数乘法","fft","快速傅里叶变换"],"fields":{"slug":"/post/math/number-theory/fft/"}},{"title":"数论基础之筛法","createdAt":"2016-05-06","tags":["math","数论","素数","欧拉函数","线性筛"],"fields":{"slug":"/post/math/number-theory/sieve/"}},{"title":"数论基础之原根","createdAt":"2016-05-16","tags":["math","数论","原根"],"fields":{"slug":"/post/math/number-theory/原根/"}},{"title":"数论基础之欧拉函数","createdAt":"2016-05-10","tags":["math","数论","既约剩余系","欧拉函数"],"fields":{"slug":"/post/math/number-theory/欧拉函数/"}},{"title":"约瑟夫环问题","createdAt":"2021-07-16","tags":["quiz","经典问题","约瑟夫环"],"fields":{"slug":"/post/quiz/classical/Josephus-ring/"}},{"title":"扔鸡蛋问题","createdAt":"2021-06-20","tags":["quiz","动态规划"],"fields":{"slug":"/post/quiz/dp/egg-drop/"}},{"title":"在 excel 中启用正则表达式","createdAt":"2021-03-29","tags":["excel","tools"],"fields":{"slug":"/post/tool/excel/regex/"}},{"title":"百度之星 2016 解题报告","createdAt":"2016-06-03","tags":["acm","递推","状态压缩","动态规划","字典树","解题报告"],"fields":{"slug":"/post/acm/contest/baiduzhixing/2016/"}},{"title":"51nod-1462 数据结构 -- 解题报告","createdAt":"2016-04-23","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/51nod/1462/"}},{"title":"HDU-5306 Gorgeous Sequence 解题报告","createdAt":"2016-04-09","tags":["acm","数据结构","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5306/"}},{"title":"HDU-5574 Colorful Tree 解题报告（原 2015-上海区域赛-C）","createdAt":"2016-04-12","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5574/"}},{"title":"HDU-5576 Expection of String 解题报告（原 2015-上海区域赛-E)","createdAt":"2016-04-24","tags":["acm","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5576/"}},{"title":"剑指offer 解题报告","createdAt":"2021-07-15","tags":["专题训练","解题报告"],"fields":{"slug":"/post/acm/oj/nowcoder/jz-offer/"}},{"title":"POJ-1324 Holedox Moving 解题报告","createdAt":"2016-04-13","tags":["acm","bfs","图论","状态压缩","解题报告"],"fields":{"slug":"/post/acm/oj/poj/1324/"}},{"title":"网络流 24 题","createdAt":"2016-07-30","tags":["acm","算法","图论","网络流","二分图","解题报告","专题训练"],"fields":{"slug":"/post/algorithm/graph/network-flow/24-problems/"}},{"title":"网络流基础之最大权闭合图","createdAt":"2016-07-24","tags":["算法","图论","网络流","最大权闭合图"],"fields":{"slug":"/post/algorithm/graph/network-flow/最大权闭合图/"}},{"title":"Dijkstra 算法","createdAt":"2021-05-29","tags":["算法","最短路","单源最短路","dijkstra"],"fields":{"slug":"/post/algorithm/graph/shortest-path/dijkstra/"}},{"title":"Custom React Hooks","createdAt":"2020-10-29","tags":["react","react hooks"],"fields":{"slug":"/post/web/react/hooks/custom/"}},{"title":"2016 多校第 2 场","createdAt":"2016-07-22","tags":["acm","训练赛","数据结构","解题报告"],"fields":{"slug":"/post/acm/contest/multi-university-training/2016/2/"}},{"title":"CCF 2015-09 最佳文章 解题报告","createdAt":"2016-06-26","tags":["acm","Aho-Corasick 自动机","矩阵快速幂","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/ccf/2015/09/E/"}},{"title":"数论基础之模方程初步","createdAt":"2016-05-04","tags":["math","数论","扩展欧几里得算法","中国剩余定理","Baby Step Gaint Step"],"fields":{"slug":"/post/math/number-theory/模方程/basic/"}}]}},"pageContext":{"id":"b0ee531d-e04a-5c2d-bd44-4dc6b22a1cb9","contentType":"post","paginationUrl":"/posts","previousPostId":"9e6e0986-210c-5270-ab9d-22e3a744aa98","nextPostId":"fe27dc47-da0c-5618-97a4-196fc9c99632"}},"staticQueryHashes":[],"slicesMap":{}}