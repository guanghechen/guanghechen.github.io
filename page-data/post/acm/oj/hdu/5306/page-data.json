{"componentChunkName":"component---src-layout-post-post-tsx","path":"/post/acm/oj/hdu/5306/","result":{"data":{"content":{"title":"HDU-5306 Gorgeous Sequence 解题报告","description":"HDU-5306 Gorgeous Sequence 解题报告","createdAt":"April 09, 2016","updatedAt":null,"timeToRead":"6min 22s","frontmatter2":{"aplayer":null,"wechatThumbnail":null},"toc":{"children":[{"depth":2,"identifier":"heading-题意简述","contents":[{"type":"text","value":"题意简述"}],"children":[]},{"depth":2,"identifier":"heading-题目简析","contents":[{"type":"text","value":"题目简析"}],"children":[{"depth":3,"identifier":"heading-pushup","contents":[{"type":"text","value":"Pushup"}],"children":[]},{"depth":3,"identifier":"heading-clear","contents":[{"type":"text","value":"Clear"}],"children":[]},{"depth":3,"identifier":"heading-maintain","contents":[{"type":"text","value":"Maintain"}],"children":[]},{"depth":3,"identifier":"heading-update","contents":[{"type":"text","value":"Update"}],"children":[]},{"depth":3,"identifier":"heading-pushdown","contents":[{"type":"text","value":"Pushdown"}],"children":[]}]},{"depth":2,"identifier":"heading-复杂度分析","contents":[{"type":"text","value":"复杂度分析"}],"children":[]},{"depth":2,"identifier":"heading-related","contents":[{"type":"text","value":"Related"}],"children":[]}]},"categories":[],"tags":["acm","数据结构","线段树","解题报告"],"ast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"题意简述"}],"identifier":"heading-题意简述"},{"type":"paragraph","children":[{"type":"inlineMath","value":"N"},{"type":"text","value":" 个点的序列，编号 "},{"type":"inlineMath","value":"0 \\sim N-1"},{"type":"text","value":"。初始时，点 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 的权值为 "},{"type":"inlineMath","value":"a_i"},{"type":"text","value":"。进行 "},{"type":"inlineMath","value":"M"},{"type":"text","value":" 次如下操作："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"inlineCode","value":"0 x y t"},{"type":"text","value":": 令 "},{"type":"inlineMath","value":"a_i=\\min\\, \\lbrace a_i, t \\rbrace"},{"type":"text","value":"，其中："},{"type":"inlineMath","value":"x\\leqslant i\\leqslant y"},{"type":"text","value":"。记作 "},{"type":"inlineMath","value":"op_0"}]},{"type":"listItem","children":[{"type":"inlineCode","value":"1 x y"},{"type":"text","value":": 输出 "},{"type":"inlineMath","value":"\\max\\, \\lbrace a_i \\rbrace"},{"type":"text","value":"，其中："},{"type":"inlineMath","value":"x\\leqslant i\\leqslant y"},{"type":"text","value":"。记作 "},{"type":"inlineMath","value":"op_1"}]},{"type":"listItem","children":[{"type":"inlineCode","value":"2 x y"},{"type":"text","value":": 输出 "},{"type":"inlineMath","value":"\\displaystyle \\sum\\limits_{x\\leqslant i\\leqslant y} a_i"},{"type":"text","value":"。记作 "},{"type":"inlineMath","value":"op_2"}]}]},{"type":"paragraph","children":[{"type":"text","value":"数据范围： "},{"type":"inlineMath","value":"\\displaystyle 1\\leqslant T\\leqslant 100, \\quad 1 \\leqslant \\sum N, \\; \\sum M \\leqslant 10^6"},{"type":"text","value":"。"}]},{"type":"html","value":"<!-- more -->\n"},{"type":"heading","depth":2,"children":[{"type":"text","value":"题目简析"}],"identifier":"heading-题目简析"},{"type":"paragraph","children":[{"type":"text","value":"用线段树维护一段区间的 4 个标量："},{"type":"inlineCode","value":"tag"},{"type":"text","value":", "},{"type":"inlineCode","value":"cnt"},{"type":"text","value":", "},{"type":"inlineCode","value":"max"},{"type":"text","value":", "},{"type":"inlineCode","value":"sum"},{"type":"text","value":"。"}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"inlineCode","value":"max"},{"type":"text","value":": 区间内的最大值"}]},{"type":"listItem","children":[{"type":"inlineCode","value":"sum"},{"type":"text","value":": 区间内所有值的和"}]},{"type":"listItem","children":[{"type":"inlineCode","value":"tag"},{"type":"text","value":": 一个懒惰标记, 表示在该区间执行了一次 "},{"type":"inlineMath","value":"op_0"},{"type":"text","value":"，且 "},{"type":"inlineMath","value":"t=tag"},{"type":"text","value":"；同时，"},{"type":"inlineMath","value":"tag=0"},{"type":"text","value":"\n时还表示当前节点信息未被正确更新。"}]},{"type":"listItem","children":[{"type":"inlineCode","value":"cnt"},{"type":"text","value":": 当前区间中要删除的点的个数（见下文）。"}]}]},{"type":"paragraph","children":[{"type":"text","value":"注意到修改操作 ("},{"type":"inlineMath","value":"op_0"},{"type":"text","value":") 不会让 "},{"type":"inlineMath","value":"a_i"},{"type":"text","value":" 变大，因此当一个数成功被修改后，它的值将始终等于 "},{"type":"strong","children":[{"type":"text","value":"当前区间的最大值"}]},{"type":"text","value":"，这里的 "},{"type":"emphasis","children":[{"type":"text","value":"当前区间"}]},{"type":"text","value":" 指的是操作中指定的区间，也是线段树中的节点。那么我们完全可以将这个数删除掉，即把这个数的权值置为 0，此后只维护当前区间的最大值信息即可。注意，我们仅删除叶子节点。"}]},{"type":"paragraph","children":[{"type":"image","url":"/static/677449934e17cb65f1abf3b00fa179d2/fe797/tree.png","alt":"Segment Tree","src":"/static/677449934e17cb65f1abf3b00fa179d2/fe797/tree.png","srcSet":"/static/677449934e17cb65f1abf3b00fa179d2/fa83e/tree.png 163w,\n/static/677449934e17cb65f1abf3b00fa179d2/f0ade/tree.png 325w,\n/static/677449934e17cb65f1abf3b00fa179d2/fe797/tree.png 586w","sizes":"(max-width: 586px) 100vw, 586px","loading":"lazy","decoding":"async"}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"Pushup"}],"identifier":"heading-pushup"},{"type":"paragraph","children":[{"type":"text","value":"当一个叶子节点被删除时，我们要令其 "},{"type":"inlineMath","value":"cnt=1"},{"type":"text","value":"，注意到这样一来，从当前节点到该叶子节点的路径上所有节点的信息都未被正确更新，以我们要将整条路径的 "},{"type":"inlineCode","value":"tag"},{"type":"text","value":" 置为 "},{"type":"inlineMath","value":"0"},{"type":"text","value":" "},{"type":"footnoteReference","label":"1","identifier":"footnote-1"},{"type":"text","value":"；同时，要执行一次 "},{"type":"linkReference","identifier":"section-pushup","label":"section-pushup","referenceType":"full","children":[{"type":"text","value":"Pushup"}]},{"type":"text","value":" 操作，目的是将删除后的信息正确推送给父节点。"}]},{"type":"code","lang":"cpp","meta":"title=\"pushup.cpp\" linenos","value":"void pushup(int o) {\n    maxv[o] = std::max(maxv[lc], maxv[rc]);\n    sumv[o] = sumv[lc] + sumv[rc];\n    cntv[o] = cntv[lc] + cntv[rc];\n}\n"},{"type":"heading","depth":3,"children":[{"type":"text","value":"Clear"}],"identifier":"heading-clear"},{"type":"paragraph","children":[{"type":"text","value":"清零操作步骤如下："}]},{"type":"list","ordered":true,"orderType":"1","start":1,"marker":46,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"判断当前节点的 "},{"type":"inlineCode","value":"max"},{"type":"text","value":" 值是否大于 "},{"type":"inlineMath","value":"t"},{"type":"text","value":"， 若是，则不需要对该子树做修改"}]},{"type":"listItem","children":[{"type":"text","value":"把当前节点 "},{"type":"inlineCode","value":"tag"},{"type":"text","value":" 置为 "},{"type":"inlineMath","value":"0"}]},{"type":"listItem","children":[{"type":"text","value":"判断当前节点是否为叶子节点，若是则删除该节点；否则，递归 "},{"type":"linkReference","identifier":"section-clear","label":"section-clear","referenceType":"full","children":[{"type":"text","value":"Clear"}]},{"type":"text","value":" 左右子树，并 "},{"type":"linkReference","identifier":"section-pushup","label":"section-pushup","referenceType":"full","children":[{"type":"text","value":"Pushup"}]}]}]},{"type":"code","lang":"cpp","meta":"title=\"clear.cpp\" linenos","value":"void clear(int o, int tag) {\n    if (maxv[o] <= tag) return;\n    tagv[o] = 0;\n    if (leav[o]) {\n        sumv[o] = maxv[o] = 0;\n        cntv[o] = 1;\n    } else {\n        clear(lc, tag);\n        clear(rc, tag);\n        pushup(o);\n    }\n}\n"},{"type":"heading","depth":3,"children":[{"type":"text","value":"Maintain"}],"identifier":"heading-maintain"},{"type":"paragraph","children":[{"type":"text","value":"再考虑维护操作。"}]},{"type":"paragraph","children":[{"type":"inlineCode","value":"max"},{"type":"text","value":" 的维护很简单，瞎搞下就好，问题在于 "},{"type":"inlineCode","value":"sum"},{"type":"text","value":" 的维护。由于执行 "},{"type":"inlineMath","value":"op_0"},{"type":"text","value":"，实际是将一个大于 "},{"type":"inlineMath","value":"t"},{"type":"text","value":" 的值变成 "},{"type":"inlineMath","value":"t"},{"type":"text","value":"，而不是删掉。这时，"},{"type":"inlineCode","value":"cnt"},{"type":"text","value":" 的作用就体现了。我们仅需执行 "},{"type":"inlineMath","value":"sum += cnt \\times t"},{"type":"text","value":"。"}]},{"type":"code","lang":"cpp","meta":"title=\"maintain.cpp\" linenos","value":"void maintain(int o, int tag) {\n    // tagv[o]==0 表示当前节点未被正确更新\n    if (tagv[o]) return;\n\n    tagv[o] = tag;          \n\n    // 如果节点 o 维护的区间有叶子节点被删除\n    if (cntv[o]) {\n        sumv[o] += (LL) cntv[o] * tag;\n        maxv[o] = tag;\n        cntv[o] = 0;\n    }\n}\n"},{"type":"heading","depth":3,"children":[{"type":"text","value":"Update"}],"identifier":"heading-update"},{"type":"paragraph","children":[{"type":"text","value":"最后，更新操作就是将 "},{"type":"emphasis","children":[{"type":"text","value":"待修改区间的权值比 "},{"type":"inlineMath","value":"t"},{"type":"text","value":" 大的"}]},{"type":"text","value":" 叶子节点删除；同时，"},{"type":"linkReference","identifier":"section-maintain","label":"section-maintain","referenceType":"full","children":[{"type":"text","value":"Maintain"}]},{"type":"text","value":" 当前区间的信息。"}]},{"type":"code","lang":"cpp","meta":"title=\"update.cpp\" linenos","value":"int __ul, __ur, __uv;\nvoid update(int o, int lft, int rht) {\n    if (maxv[o] <= __uv) return;\n    if (__ul<=lft and rht<=__ur) {\n        clear(o, __uv);\n        maintain(o, __uv);\n    } else {\n        int mid = mid(lft, rht);\n        pushdown(o);\n        if (__ul <= mid) update(lson);\n        if (__ur > mid) update(rson);\n        pushup(o);\n    }\n}\n"},{"type":"heading","depth":3,"children":[{"type":"text","value":"Pushdown"}],"identifier":"heading-pushdown"},{"type":"paragraph","children":[{"type":"text","value":"需要注意的是，"},{"type":"strong","children":[{"type":"text","value":"Pushdown"}]},{"type":"text","value":" 操作把 "},{"type":"inlineCode","value":"tag"},{"type":"text","value":" 信息下传后，当前节点的 "},{"type":"inlineCode","value":"tag"},{"type":"text","value":" 不应该置为 "},{"type":"inlineMath","value":"0"},{"type":"text","value":"，因为 "},{"type":"inlineMath","value":"tag=0"},{"type":"text","value":" 表示当前节点的信息未被正确维护。直接调用 "},{"type":"linkReference","identifier":"section-maintain","label":"section-maintain","referenceType":"full","children":[{"type":"text","value":"Maintain"}]},{"type":"text","value":"\n维护左右子树即可。"}]},{"type":"code","lang":"cpp","meta":"title=\"pushdown.cpp\" linenos","value":"void pushdown(int o) {\n    if (tagv[o]) {\n        maintain(lc, tagv[o]);\n        maintain(rc, tagv[o]);\n    }\n}\n"},{"type":"heading","depth":2,"children":[{"type":"text","value":"复杂度分析"}],"identifier":"heading-复杂度分析"},{"type":"paragraph","children":[{"type":"text","value":"显然，单次 "},{"type":"linkReference","identifier":"section-update","label":"section-update","referenceType":"full","children":[{"type":"text","value":"Update"}]},{"type":"text","value":" 和 "},{"type":"strong","children":[{"type":"text","value":"Query"}]},{"type":"text","value":" 只会影响 "},{"type":"inlineMath","value":"O(log N)"},{"type":"text","value":" 个节点。一开始一共有 "},{"type":"inlineMath","value":"N"},{"type":"text","value":" 个节点，而单次的 "},{"type":"linkReference","identifier":"section-update","label":"section-update","referenceType":"full","children":[{"type":"text","value":"Update"}]},{"type":"text","value":" 或 "},{"type":"strong","children":[{"type":"text","value":"Query"}]},{"type":"text","value":" 操作至多产生 4 个叶子节点，而删除一个叶子节点的代价是 "},{"type":"inlineMath","value":"O(\\log N)"},{"type":"text","value":"，也就是\n"},{"type":"linkReference","identifier":"section-clear","label":"section-clear","referenceType":"full","children":[{"type":"text","value":"Clear"}]},{"type":"text","value":" 操作，故复杂度为 "},{"type":"inlineMath","value":"\\displaystyle O\\big( (N+4M)\\log N \\big)"},{"type":"text","value":"。"}]},{"type":"list","ordered":false,"marker":45,"spread":false,"children":[{"type":"listItem","children":[{"type":"inlineCode","value":"空间复杂度"},{"type":"text","value":" "},{"type":"inlineMath","value":"O(N)"}]},{"type":"listItem","children":[{"type":"inlineCode","value":"时间复杂度"},{"type":"text","value":" "},{"type":"inlineMath","value":"O(N\\log N)"}]}]},{"type":"admonition","keyword":"tip","title":[{"type":"text","value":"Hint"}],"children":[{"type":"paragraph","children":[{"type":"text","value":"尽管我们得到了 "},{"type":"inlineMath","value":"O((N+4M)\\log N)"},{"type":"text","value":" 的算法，但由于本题数据太大，还是要加一个读入优化才能通过。"}]}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"Related"}],"identifier":"heading-related"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"link","url":"/static/ce44ea1f0cdf633cf72a23253fcc520f1bb4b56e/code.cpp","children":[{"type":"text","value":"sourcecode"}]}]},{"type":"listItem","children":[{"type":"link","url":"http://acm.hdu.edu.cn/showproblem.php?pid=5306","children":[{"type":"text","value":"原题链接"}]}]},{"type":"listItem","children":[{"type":"link","url":"http://www.shuizilong.com/house/archives/hdu-5306-gorgeous-sequence/","children":[{"type":"text","value":"岛娘的解题报告"}]}]}]}]},"ecmaImports":[],"definitionMap":{"section-clear":{"type":"definition","identifier":"section-clear","label":"section-clear","url":"#heading-clear"},"section-maintain":{"type":"definition","identifier":"section-maintain","label":"section-maintain","url":"#heading-maintain"},"section-pushup":{"type":"definition","identifier":"section-pushup","label":"section-pushup","url":"#heading-pushup"},"section-pushdown":{"type":"definition","identifier":"section-pushdown","label":"section-pushdown","url":"#heading-pushdown"},"section-update":{"type":"definition","identifier":"section-update","label":"section-update","url":"#heading-update"}},"footnoteDefinitionMap":{"footnote-1":{"type":"footnoteDefinition","identifier":"footnote-1","label":"1","children":[{"type":"paragraph","children":[{"type":"inlineMath","value":"tag=0"},{"type":"text","value":" 表示当前节点信息未被正确更新。"}]}]}},"fields":{"slug":"/post/acm/oj/hdu/5306/"}},"previous":null,"next":{"title":"快速傅里叶变换和雷德算法","fields":{"slug":"/post/math/number-theory/fft/"}},"postItems":{"nodes":[{"title":"洗牌问题和 knuth-shuffle 算法","createdAt":"2021-07-22","tags":["shuffle","knuth-shuffle","约瑟夫环"],"fields":{"slug":"/post/algorithm/shuffle/"}},{"title":"编译原理-语法制导翻译实现计算器","createdAt":"2016-06-23","tags":["编译原理","语法制导翻译","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/exercise/"}},{"title":"编译原理-语法分析","createdAt":"2016-06-18","tags":["编译原理","语法分析","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/grammar/"}},{"title":"端口管理","createdAt":"2021-06-20","tags":["network","port","ssh","netstat"],"fields":{"slug":"/post/network/端口管理/"}},{"title":"防抖和节流","createdAt":"2021-09-03","tags":["coding","debounce","throttle"],"fields":{"slug":"/post/algorithm/debounce-and-throttle/"}},{"title":"精确覆盖问题和 DLX 算法","createdAt":"2021-07-24","tags":["算法","精确覆盖","DLX 算法"],"fields":{"slug":"/post/algorithm/dlx/"}},{"title":"背包九讲","createdAt":"2021-06-27","tags":["acm","算法","动态规划","背包问题"],"fields":{"slug":"/post/algorithm/knapsack/"}},{"title":"最长公共子序列（LCS）","createdAt":"2021-06-02","tags":["最长公共子序列","LCS"],"fields":{"slug":"/post/algorithm/lcs/"}},{"title":"最长上升子序列（LIS）","createdAt":"2021-06-02","tags":["最长上升子序列","LIS"],"fields":{"slug":"/post/algorithm/lis/"}},{"title":"当你想来一把数独","createdAt":"2021-08-01","tags":["game","sudoku"],"fields":{"slug":"/post/game/sudoku/"}},{"title":"函数的极限","createdAt":"2021-05-09","tags":["math","函数","极限"],"fields":{"slug":"/post/math/calculus/函数的极限/"}},{"title":"自然对数底数e","createdAt":"2021-08-07","tags":["math","函数","极限","自然对数"],"fields":{"slug":"/post/math/calculus/自然对数底数e/"}},{"title":"小球放盒模型","createdAt":"2016-04-22","tags":["math","组合数学"],"fields":{"slug":"/post/math/combinatorial/小球放盒模型/"}},{"title":"不修改数组找出重复的数字","createdAt":"2021-06-29","tags":["quiz","分治","追击"],"fields":{"slug":"/post/quiz/partition/find-duplicate-number/"}},{"title":"统计区间内的线段","createdAt":"2021-07-21","tags":["quiz","扫描线","前缀和","树状数组","线段树"],"fields":{"slug":"/post/quiz/scanning-line/segments/"}},{"title":"CSS 选择器","createdAt":"2020-11-02","tags":["web","frontend","css"],"fields":{"slug":"/post/web/css/selector/"}},{"title":"ECMA 2020 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2020/"}},{"title":"ECMA 2021 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2021/"}},{"title":"Javascript 踩坑记——继承和原型链","createdAt":"2021-09-05","tags":["studynote","javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/inherit/"}},{"title":"React Reconciliation","createdAt":"2021-06-26","tags":["react","react reconciliation"],"fields":{"slug":"/post/web/react/reconciliation/"}},{"title":"XSS 与 CSRF 的攻防","createdAt":"2021-08-19","tags":["web","web security","csrf"],"fields":{"slug":"/post/web/security/xss-csrf/"}},{"title":"二分图","createdAt":"2016-07-17","tags":["算法","图论","二分图","学习笔记"],"fields":{"slug":"/post/algorithm/graph/bipartite-graph/"}},{"title":"最长回文子串 Manacher 算法","createdAt":"2016-04-18","tags":["算法","字符串","回文串","manacher"],"fields":{"slug":"/post/algorithm/string/manacher/"}},{"title":"树链剖分","createdAt":"2016-04-23","tags":["acm","算法","树链剖分"],"fields":{"slug":"/post/algorithm/tree/tcs/"}},{"title":"伸展树专题","createdAt":"2016-07-03","tags":["acm","Splay","解题报告","专题训练"],"fields":{"slug":"/post/data-structure/bbst/splay/"}},{"title":"组合游戏基础之 SG 函数和 SG 定理","createdAt":"2016-09-04","tags":["组合数学","组合游戏","SG 定理"],"fields":{"slug":"/post/math/combinatorial/SG/"}},{"title":"快速傅里叶变换和雷德算法","createdAt":"2016-04-10","tags":["acm","大数乘法","fft","快速傅里叶变换"],"fields":{"slug":"/post/math/number-theory/fft/"}},{"title":"数论基础之筛法","createdAt":"2016-05-06","tags":["math","数论","素数","欧拉函数","线性筛"],"fields":{"slug":"/post/math/number-theory/sieve/"}},{"title":"数论基础之原根","createdAt":"2016-05-16","tags":["math","数论","原根"],"fields":{"slug":"/post/math/number-theory/原根/"}},{"title":"数论基础之欧拉函数","createdAt":"2016-05-10","tags":["math","数论","既约剩余系","欧拉函数"],"fields":{"slug":"/post/math/number-theory/欧拉函数/"}},{"title":"约瑟夫环问题","createdAt":"2021-07-16","tags":["quiz","经典问题","约瑟夫环"],"fields":{"slug":"/post/quiz/classical/Josephus-ring/"}},{"title":"扔鸡蛋问题","createdAt":"2021-06-20","tags":["quiz","动态规划"],"fields":{"slug":"/post/quiz/dp/egg-drop/"}},{"title":"在 excel 中启用正则表达式","createdAt":"2021-03-29","tags":["excel","tools"],"fields":{"slug":"/post/tool/excel/regex/"}},{"title":"百度之星 2016 解题报告","createdAt":"2016-06-03","tags":["acm","递推","状态压缩","动态规划","字典树","解题报告"],"fields":{"slug":"/post/acm/contest/baiduzhixing/2016/"}},{"title":"51nod-1462 数据结构 -- 解题报告","createdAt":"2016-04-23","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/51nod/1462/"}},{"title":"HDU-5306 Gorgeous Sequence 解题报告","createdAt":"2016-04-09","tags":["acm","数据结构","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5306/"}},{"title":"HDU-5574 Colorful Tree 解题报告（原 2015-上海区域赛-C）","createdAt":"2016-04-12","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5574/"}},{"title":"HDU-5576 Expection of String 解题报告（原 2015-上海区域赛-E)","createdAt":"2016-04-24","tags":["acm","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5576/"}},{"title":"剑指offer 解题报告","createdAt":"2021-07-15","tags":["专题训练","解题报告"],"fields":{"slug":"/post/acm/oj/nowcoder/jz-offer/"}},{"title":"POJ-1324 Holedox Moving 解题报告","createdAt":"2016-04-13","tags":["acm","bfs","图论","状态压缩","解题报告"],"fields":{"slug":"/post/acm/oj/poj/1324/"}},{"title":"网络流 24 题","createdAt":"2016-07-30","tags":["acm","算法","图论","网络流","二分图","解题报告","专题训练"],"fields":{"slug":"/post/algorithm/graph/network-flow/24-problems/"}},{"title":"网络流基础之最大权闭合图","createdAt":"2016-07-24","tags":["算法","图论","网络流","最大权闭合图"],"fields":{"slug":"/post/algorithm/graph/network-flow/最大权闭合图/"}},{"title":"Dijkstra 算法","createdAt":"2021-05-29","tags":["算法","最短路","单源最短路","dijkstra"],"fields":{"slug":"/post/algorithm/graph/shortest-path/dijkstra/"}},{"title":"Custom React Hooks","createdAt":"2020-10-29","tags":["react","react hooks"],"fields":{"slug":"/post/web/react/hooks/custom/"}},{"title":"2016 多校第 2 场","createdAt":"2016-07-22","tags":["acm","训练赛","数据结构","解题报告"],"fields":{"slug":"/post/acm/contest/multi-university-training/2016/2/"}},{"title":"CCF 2015-09 最佳文章 解题报告","createdAt":"2016-06-26","tags":["acm","Aho-Corasick 自动机","矩阵快速幂","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/ccf/2015/09/E/"}},{"title":"数论基础之模方程初步","createdAt":"2016-05-04","tags":["math","数论","扩展欧几里得算法","中国剩余定理","Baby Step Gaint Step"],"fields":{"slug":"/post/math/number-theory/模方程/basic/"}}]}},"pageContext":{"id":"94913dbc-026e-5e88-86d8-42f34d9dd3f4","contentType":"post","paginationUrl":"/posts","previousPostId":null,"nextPostId":"394fe303-e62a-56be-ab7d-ee0670e86164"}},"staticQueryHashes":[],"slicesMap":{}}