{"componentChunkName":"component---src-layout-post-post-tsx","path":"/post/acm/oj/51nod/1462/","result":{"data":{"content":{"title":"51nod-1462 数据结构 -- 解题报告","description":"51nod-1462 数据结构 -- 解题报告","createdAt":"April 23, 2016","updatedAt":null,"timeToRead":"9min 15s","frontmatter2":{"aplayer":null,"wechatThumbnail":null},"toc":{"children":[{"depth":2,"identifier":"heading-题意简述","contents":[{"type":"text","value":"题意简述"}],"children":[]},{"depth":2,"identifier":"heading-题目简析","contents":[{"type":"text","value":"题目简析"}],"children":[{"depth":3,"identifier":"heading-更新操作","contents":[{"type":"text","value":"更新操作"}],"children":[]},{"depth":3,"identifier":"heading-查询操作","contents":[{"type":"text","value":"查询操作"}],"children":[]}]},{"depth":2,"identifier":"heading-复杂度分析","contents":[{"type":"text","value":"复杂度分析"}],"children":[]},{"depth":2,"identifier":"heading-小结","contents":[{"type":"text","value":"小结"}],"children":[]},{"depth":2,"identifier":"heading-related","contents":[{"type":"text","value":"Related"}],"children":[]}]},"categories":[],"tags":["acm","数据结构","树链剖分","线段树","解题报告"],"ast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"题意简述"}],"identifier":"heading-题意简述"},{"type":"paragraph","children":[{"type":"text","value":"一棵 "},{"type":"inlineMath","value":"N"},{"type":"text","value":" 个节点的树，以 "},{"type":"inlineMath","value":"1"},{"type":"text","value":" 为根。树上的每个节点有两个权值："},{"type":"inlineMath","value":"v_i"},{"type":"text","value":"，"},{"type":"inlineMath","value":"t_i"},{"type":"text","value":"。初始时均为 "},{"type":"inlineMath","value":"0"},{"type":"text","value":"。有 "},{"type":"inlineMath","value":"Q"},{"type":"text","value":" 次操作，每次操作为下列之一："}]},{"type":"list","ordered":false,"marker":45,"spread":false,"children":[{"type":"listItem","children":[{"type":"inlineCode","value":"1 u d"},{"type":"text","value":": 对 "},{"type":"inlineMath","value":"u"},{"type":"text","value":" 到根上所有点执行 "},{"type":"inlineMath","value":"v_i \\mathrel{+}= d"}]},{"type":"listItem","children":[{"type":"inlineCode","value":"2 u d"},{"type":"text","value":": 对 "},{"type":"inlineMath","value":"u"},{"type":"text","value":" 到根上所有点执行 "},{"type":"inlineMath","value":"t_i \\mathrel{+}= v_i \\times d"}]}]},{"type":"paragraph","children":[{"type":"text","value":"输出 "},{"type":"inlineMath","value":"Q"},{"type":"text","value":" 次操作后所有节点的 "},{"type":"inlineMath","value":"t_i"},{"type":"text","value":" 权值。"}]},{"type":"paragraph","children":[{"type":"text","value":"数据范围："},{"type":"inlineMath","value":"N,Q \\leqslant 10^5"},{"type":"text","value":"。"},{"type":"break"},{"type":"text","value":"\n数据保证 "},{"type":"inlineMath","value":"64"},{"type":"text","value":" 位整数不会溢出。"}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"题目简析"}],"identifier":"heading-题目简析"},{"type":"paragraph","children":[{"type":"text","value":"虽然是树上的链的问题，但是通过"},{"type":"linkReference","identifier":"ghc-树链剖分","label":"ghc-树链剖分","referenceType":"full","children":[{"type":"text","value":"树链剖分"}]},{"type":"text","value":"可以将其拆解成 "},{"type":"inlineMath","value":"O(\\log N)"},{"type":"text","value":"\n段区间，因此我们只考虑如何在区间上完成这两个操作就好了。对于区间维护/查询问题，不难想到使用线段树来处理。"}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"更新操作"}],"identifier":"heading-更新操作"},{"type":"paragraph","children":[{"type":"text","value":"给线段树上的每个节点维护三个值 "},{"type":"inlineMath","value":"V_x"},{"type":"text","value":", "},{"type":"inlineMath","value":"T_x"},{"type":"text","value":" 和 "},{"type":"inlineMath","value":"S_x"},{"type":"text","value":"，分别表示节点 "},{"type":"inlineMath","value":"x"},{"type":"text","value":" 所代表的区间中的所有节点 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 均需要执行："}]},{"type":"math","value":"  \\begin{align*}\n    &v_i \\mathrel{+}= V_x\\\\\n    &t_i \\mathrel{+}= v_i \\times T_x + S_x\n  \\end{align*}\n"},{"type":"paragraph","children":[{"type":"text","value":"下面考虑两种操作对应的线段树更新流程："}]},{"type":"list","ordered":false,"marker":45,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"操作一： 给 "},{"type":"inlineMath","value":"v_i"},{"type":"text","value":" 增加值 "},{"type":"inlineMath","value":"d"}]},{"type":"paragraph","children":[{"type":"text","value":"若此时 "},{"type":"inlineMath","value":"T_x"},{"type":"text","value":" 不为 "},{"type":"inlineMath","value":"0"},{"type":"text","value":"，则需要执行一次"},{"type":"emphasis","children":[{"type":"text","value":"pushdown"}]},{"type":"text","value":"操作：将 "},{"type":"inlineMath","value":"T_x"},{"type":"text","value":" 更新给左右子树，并且将 "},{"type":"inlineMath","value":"T_x \\times V_x"},{"type":"text","value":" 累加到 "},{"type":"inlineMath","value":"S_x"},{"type":"text","value":" 中，最后将\n"},{"type":"inlineMath","value":"T_x"},{"type":"text","value":" 设置为 "},{"type":"inlineMath","value":"0"},{"type":"text","value":"."}]},{"type":"code","lang":"cpp","meta":"title=\"pushdown.cpp\" sourcefile=\"./solution.cpp\" sourceline=\"24-34\" linenos","value":"void pushdown(int o, int lft, int rht) {\n  LL d = T[o];\n  if (d == 0) return;\n\n  T[o] = 0;\n  S[o] += V[o] * d;\n  if (lft < rht) {\n    T[lc] += d;\n    T[rc] += d;\n  }\n}"},{"type":"paragraph","children":[{"type":"text","value":"为什么要先执行一次"},{"type":"emphasis","children":[{"type":"text","value":"pushdown"}]},{"type":"text","value":"呢？因为此时 "},{"type":"inlineMath","value":"T_x"},{"type":"text","value":" 代表的是在此次操作之前，节点\n"},{"type":"inlineMath","value":"x"},{"type":"text","value":" 所代表的区间中所有的点 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 均需要加上 "},{"type":"inlineMath","value":"v_i \\times T_x"},{"type":"text","value":"，如果不先"},{"type":"emphasis","children":[{"type":"text","value":"pushdown"}]},{"type":"text","value":"\n则含义变成了 "},{"type":"inlineMath","value":"x"},{"type":"text","value":" 所代表的区间中所有的点 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 均需要加上 "},{"type":"inlineMath","value":"(v_i + d) \\times T_x"},{"type":"text","value":"."}]},{"type":"paragraph","children":[{"type":"text","value":"之后，如果当前节点在目标区间内，则给 "},{"type":"inlineMath","value":"V_x"},{"type":"text","value":" 加上 "},{"type":"inlineMath","value":"d"},{"type":"text","value":"。由此，不难写出操作一对应的线段树操作的代码："}]},{"type":"code","lang":"cpp","meta":"title=\"update1.cpp\" sourcefile=\"./solution.cpp\" sourceline=\"37-48\" linenos","value":"void update1(int o, int lft, int rht) {\n  pushdown(o, lft, rht);\n\n  if (ul <= lft && rht <= ur) {\n    V[o] += uv;\n    return;\n  }\n\n  int mid = (lft + rht) >> 1;\n  if (ul <= mid) update1(lc, lft, mid);\n  if (ur > mid) update1(rc, mid + 1, rht);\n}"}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"操作二： 给 "},{"type":"inlineMath","value":"t_i"},{"type":"text","value":" 增加值（"},{"type":"inlineMath","value":"v_i"},{"type":"text","value":" 和 "},{"type":"inlineMath","value":"d"},{"type":"text","value":" 的乘积）"}]},{"type":"paragraph","children":[{"type":"text","value":"操作二比操作一略微复杂一些，除了要执行"},{"type":"emphasis","children":[{"type":"text","value":"pushdown"}]},{"type":"text","value":"，还需要将沿途所有的\n"},{"type":"inlineMath","value":"V_s \\times d"},{"type":"text","value":" 累加起来（不妨记为 "},{"type":"inlineMath","value":"acc"},{"type":"text","value":"），直到到达在操作区间内的区间节点时，再将 "},{"type":"inlineMath","value":"acc"},{"type":"text","value":" 累加给 "},{"type":"inlineMath","value":"S"},{"type":"text","value":"，同时将 "},{"type":"inlineMath","value":"d"},{"type":"text","value":" 累加给 "},{"type":"inlineMath","value":"T"},{"type":"text","value":"."}]},{"type":"paragraph","children":[{"type":"text","value":"之所以要记录 "},{"type":"inlineMath","value":"acc"},{"type":"text","value":" 是因为在"},{"type":"emphasis","children":[{"type":"text","value":"pushdown"}]},{"type":"text","value":"操作中我们只往子节点传递了 "},{"type":"inlineMath","value":"T"},{"type":"text","value":"，而没有传递 "},{"type":"inlineMath","value":"V"},{"type":"text","value":" "},{"type":"footnoteReference","label":"1","identifier":"footnote-1"},{"type":"text","value":"，因此当前节点 "},{"type":"inlineMath","value":"x"},{"type":"text","value":" 的所有祖先节点的 "},{"type":"inlineMath","value":"V"},{"type":"text","value":" 值之和 "},{"type":"inlineMath","value":"\\displaystyle \\sum_{ancient of x} V"},{"type":"text","value":"\n对于此次操作二中 "},{"type":"inlineMath","value":"v_i"},{"type":"text","value":" 的值都是有贡献的，所以必须维护这部分结果。幸运的是，对于 "},{"type":"inlineMath","value":"x"},{"type":"text","value":" 所代表的区间中的所有点，"},{"type":"inlineMath","value":"\\displaystyle \\sum_{ancient of x} V"},{"type":"text","value":" 对它们是等效的，所以将其累加到 "},{"type":"inlineMath","value":"S"},{"type":"text","value":" 中即可完成这部分信息的维护。"}]},{"type":"code","lang":"cpp","meta":"title=\"update2.cpp\" sourcefile=\"./solution.cpp\" sourceline=\"51-63\" linenos","value":"void update2(int o, int lft, int rht, LL acc) {\n  if (ul <= lft && rht <= ur) {\n    T[o] += uv;\n    S[o] += acc;\n    return;\n  }\n\n  acc += V[o] * uv;\n  pushdown(o, lft, rht);\n  int mid = (lft + rht) >> 1;\n  if (ul <= mid) update2(lc, lft, mid, acc);\n  if (ur > mid) update2(rc, mid + 1, rht, acc);\n}"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"查询操作"}],"identifier":"heading-查询操作"},{"type":"paragraph","children":[{"type":"text","value":"为方便表述，记原树中节点 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 对应线段树中节点 "},{"type":"inlineMath","value":"u(i)"},{"type":"text","value":"，并记 "},{"type":"inlineMath","value":"P_x"},{"type":"text","value":" 为线段树中节点\n"},{"type":"inlineMath","value":"x"},{"type":"text","value":" 的所有祖先节点集合，则原树中节点 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 最终的权值为："}]},{"type":"math","value":"  \\begin{align*}\n    &v_i = \\sum_{x \\in P_{u(i)}} V_x\\\\\n    &t_i = S_{u(i)} + \\sum_{x \\in P_{u(i)}} \\left( \\sum_{y \\in P_x} V_y \\times T_x \\right)\n  \\end{align*}\n"},{"type":"paragraph","children":[{"type":"text","value":"在线段树中执行一次树上的递推（从根结点出发，沿途"},{"type":"emphasis","children":[{"type":"text","value":"pushdown"}]},{"type":"text","value":"即可），则可以在\n"},{"type":"inlineMath","value":"O(N)"},{"type":"text","value":" 的复杂度内完成查询。其实若是要多次单个节点的 "},{"type":"inlineMath","value":"t_i"},{"type":"text","value":" 值，利用现在维护的信息也可以在 "},{"type":"inlineMath","value":"O(\\log N)"},{"type":"text","value":" 的复杂度内完成。"}]},{"type":"code","lang":"cpp","meta":"title=\"query.cpp\" sourcefile=\"./solution.cpp\" sourceline=\"65-76\" linenos","value":"void query(int o, int lft, int rht) {\n  if (lft == rht)\n    ans[lft] = S[o] + V[o] * T[o];\n  else {\n    pushdown(o, lft, rht);\n    S[lc] += S[o];\n    S[rc] += S[o];\n    int mid = lft + rht >> 1;\n    query(lc, lft, mid);\n    query(rc, mid + 1, rht);\n  }\n}"},{"type":"heading","depth":2,"children":[{"type":"text","value":"复杂度分析"}],"identifier":"heading-复杂度分析"},{"type":"paragraph","children":[{"type":"inlineCode","value":"update1"},{"type":"text","value":" 和 "},{"type":"inlineCode","value":"update2"},{"type":"text","value":" 都是线段树的经典操作，复杂度均为 "},{"type":"inlineMath","value":"O(\\log N)"},{"type":"text","value":" ，共执行了 "},{"type":"inlineMath","value":"Q"},{"type":"text","value":" 次；"},{"type":"inlineCode","value":"query"},{"type":"text","value":" 操作的复杂度和遍历树的复杂度相同，所以是 "},{"type":"inlineMath","value":"O(N)"},{"type":"text","value":" 的，共只执了行一次。需要注意的是，"},{"type":"inlineCode","value":"update"},{"type":"text","value":" 和 "},{"type":"inlineCode","value":"update2"},{"type":"text","value":" 是在树链剖分的基础上进行的，因此其复杂度需要再乘以 "},{"type":"inlineMath","value":"O(\\log N)"},{"type":"text","value":"："}]},{"type":"list","ordered":false,"marker":45,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"空间复杂度: "},{"type":"inlineMath","value":"O(N)"}]},{"type":"listItem","children":[{"type":"text","value":"时间复杂度: "},{"type":"inlineMath","value":"O(Q\\log^2 N + N)"}]}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"小结"}],"identifier":"heading-小结"},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"数据范围比较大，会爆栈，需要手动扩栈 "},{"type":"footnoteReference","label":"2","identifier":"footnote-2"},{"type":"text","value":"。"}]},{"type":"code","lang":"cpp","meta":null,"value":"#pragma comment(linker, \"/STACK:102400000,102400000\")\n"}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"记区间长度为 "},{"type":"inlineMath","value":"2^t < N \\leqslant 2^{t+1}"},{"type":"text","value":"，则线段树至多只需要 "},{"type":"inlineMath","value":"2^{t+2}"},{"type":"text","value":" 个节点。此外，预处理阶段（读入边时）使用到的数组可以和后续线段树中的数组进行复用，以此节约空间"}]},{"type":"code","lang":"cpp","meta":"{3,10} title=\"variables.cpp\" sourcefile=\"./solution.cpp\" sourceline=\"10-20\" linenos","value":"typedef long long LL;\nconst int MAXN = 100000 + 10;\nconst int MAXN2 = (1 << 17) + 10;\n\nint N, Q;\nint father[MAXN], dep[MAXN], son[MAXN], pos[MAXN], top[MAXN], dfsCnt;\nLL V[MAXN2 << 1], T[MAXN2 << 1], S[MAXN2 << 1], ans[MAXN];\n\n// 复用空间\nLL *from = V, *to = T, *nxt = S, *siz = ans;\n"}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"思路上是将操作分解，利用乘法分配律将操作二分解成两部分。总的来说还是利用了线段树维护区间的特点，每次"},{"type":"emphasis","children":[{"type":"text","value":"pushdown"}]},{"type":"text","value":"（或"},{"type":"emphasis","children":[{"type":"text","value":"maintain"}]},{"type":"text","value":"）都不能递归引发子节点的更新操作，则可以证明每次操作至多执行 "},{"type":"inlineMath","value":"O(\\log N)"},{"type":"text","value":" 次"},{"type":"emphasis","children":[{"type":"text","value":"pushdown"}]},{"type":"text","value":"（或"},{"type":"emphasis","children":[{"type":"text","value":"maintain"}]},{"type":"text","value":"），故而将单次操作的时间复杂度控制在 "},{"type":"inlineMath","value":"O(\\log N)"},{"type":"text","value":" 内"}]}]}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"Related"}],"identifier":"heading-related"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"link","url":"https://www.51nod.com/Challenge/Problem.html#problemId=1462","children":[{"type":"text","value":"题目链接"}]}]},{"type":"listItem","children":[{"type":"link","url":"/static/73b3d5d87c2b28a01fa6d3e1dc6605f1943a7c9a/solution.cpp","children":[{"type":"text","value":"solution.cpp"}]}]},{"type":"listItem","children":[{"type":"linkReference","identifier":"ghc-树链剖分","label":"ghc-树链剖分","referenceType":"full","children":[{"type":"text","value":"树链剖分 | 光和尘"}]}]}]}]},"ecmaImports":[],"definitionMap":{"ghc-树链剖分":{"type":"definition","identifier":"ghc-树链剖分","label":"ghc-树链剖分","url":"/post/algorithm/tree/tcs/"}},"footnoteDefinitionMap":{"footnote-1":{"type":"footnoteDefinition","identifier":"footnote-1","label":"1","children":[{"type":"paragraph","children":[{"type":"text","value":"若要传递 "},{"type":"inlineMath","value":"V"},{"type":"text","value":"，则单次"},{"type":"emphasis","children":[{"type":"text","value":"pushdown"}]},{"type":"text","value":"操作不足以完成信息的传递，因为传递 "},{"type":"inlineMath","value":"V"},{"type":"text","value":"\n相当于对子节点执行了一次操作一；这也是为什么需要额外维护一个 "},{"type":"inlineMath","value":"S_x"}]}]},"footnote-2":{"type":"footnoteDefinition","identifier":"footnote-2","label":"2","children":[{"type":"paragraph","children":[{"type":"text","value":"51nod 暂只有 Visual C++ 支持手动扩栈"}]}]}},"fields":{"slug":"/post/acm/oj/51nod/1462/"}},"previous":{"title":"小球放盒模型","fields":{"slug":"/post/math/combinatorial/小球放盒模型/"}},"next":{"title":"树链剖分","fields":{"slug":"/post/algorithm/tree/tcs/"}},"postItems":{"nodes":[{"title":"Custom React Hooks","createdAt":"2020-10-30","tags":["react","react hooks"],"fields":{"slug":"/post/web/react/hooks/custom/"}},{"title":"React Reconciliation","createdAt":"2021-06-27","tags":["react","react reconciliation"],"fields":{"slug":"/post/web/react/reconciliation/"}},{"title":"ECMA 2020 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2020/"}},{"title":"XSS 与 CSRF 的攻防","createdAt":"2021-08-19","tags":["web","web security","csrf"],"fields":{"slug":"/post/web/security/xss-csrf/"}},{"title":"Javascript 踩坑记——继承和原型链","createdAt":"2021-09-05","tags":["studynote","javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/inherit/"}},{"title":"CSS 选择器","createdAt":"2020-11-02","tags":["web","frontend","css"],"fields":{"slug":"/post/web/css/selector/"}},{"title":"ECMA 2021 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2021/"}},{"title":"在 excel 中启用正则表达式","createdAt":"2021-03-30","tags":["excel","tools"],"fields":{"slug":"/post/tool/excel/regex/"}},{"title":"统计区间内的线段","createdAt":"2021-07-21","tags":["quiz","扫描线","前缀和","树状数组","线段树"],"fields":{"slug":"/post/quiz/scanning-line/segments/"}},{"title":"约瑟夫环问题","createdAt":"2021-07-17","tags":["quiz","经典问题","约瑟夫环"],"fields":{"slug":"/post/quiz/classical/Josephus-ring/"}},{"title":"端口管理","createdAt":"2021-06-20","tags":["network","port","ssh","netstat"],"fields":{"slug":"/post/network/端口管理/"}},{"title":"数论基础之欧拉函数","createdAt":"2016-05-10","tags":["math","数论","既约剩余系","欧拉函数"],"fields":{"slug":"/post/math/number-theory/欧拉函数/"}},{"title":"扔鸡蛋问题","createdAt":"2021-06-20","tags":["quiz","动态规划"],"fields":{"slug":"/post/quiz/dp/egg-drop/"}},{"title":"数论基础之模方程初步","createdAt":"2016-05-04","tags":["math","数论","扩展欧几里得算法","中国剩余定理","Baby Step Gaint Step"],"fields":{"slug":"/post/math/number-theory/模方程/basic/"}},{"title":"不修改数组找出重复的数字","createdAt":"2021-06-29","tags":["quiz","分治","追击"],"fields":{"slug":"/post/quiz/partition/find-duplicate-number/"}},{"title":"数论基础之原根","createdAt":"2016-05-16","tags":["math","数论","原根"],"fields":{"slug":"/post/math/number-theory/原根/"}},{"title":"快速傅里叶变换和雷德算法","createdAt":"2016-04-10","tags":["acm","大数乘法","fft","快速傅里叶变换"],"fields":{"slug":"/post/math/number-theory/fft/"}},{"title":"小球放盒模型","createdAt":"2016-04-22","tags":["math","组合数学"],"fields":{"slug":"/post/math/combinatorial/小球放盒模型/"}},{"title":"组合游戏基础之 SG 函数和 SG 定理","createdAt":"2016-09-04","tags":["组合数学","组合游戏","SG 定理"],"fields":{"slug":"/post/math/combinatorial/SG/"}},{"title":"数论基础之筛法","createdAt":"2016-05-06","tags":["math","数论","素数","欧拉函数","线性筛"],"fields":{"slug":"/post/math/number-theory/sieve/"}},{"title":"函数的极限","createdAt":"2021-05-09","tags":["math","函数","极限"],"fields":{"slug":"/post/math/calculus/函数的极限/"}},{"title":"当你想来一把数独","createdAt":"2021-08-01","tags":["game","sudoku"],"fields":{"slug":"/post/game/sudoku/"}},{"title":"编译原理-语法制导翻译实现计算器","createdAt":"2016-06-23","tags":["编译原理","语法制导翻译","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/exercise/"}},{"title":"编译原理-语法分析","createdAt":"2016-06-18","tags":["编译原理","语法分析","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/grammar/"}},{"title":"伸展树专题","createdAt":"2016-07-03","tags":["acm","Splay","解题报告","专题训练"],"fields":{"slug":"/post/data-structure/bbst/splay/"}},{"title":"洗牌问题和 knuth-shuffle 算法","createdAt":"2021-07-22","tags":["shuffle","knuth-shuffle","约瑟夫环"],"fields":{"slug":"/post/algorithm/shuffle/"}},{"title":"自然对数底数e","createdAt":"2021-08-07","tags":["math","函数","极限","自然对数"],"fields":{"slug":"/post/math/calculus/自然对数底数e/"}},{"title":"树链剖分","createdAt":"2016-04-23","tags":["acm","算法","树链剖分"],"fields":{"slug":"/post/algorithm/tree/tcs/"}},{"title":"最长上升子序列（LIS）","createdAt":"2021-06-02","tags":["最长上升子序列","LIS"],"fields":{"slug":"/post/algorithm/lis/"}},{"title":"最长回文子串 Manacher 算法","createdAt":"2016-04-18","tags":["算法","字符串","回文串","manacher"],"fields":{"slug":"/post/algorithm/string/manacher/"}},{"title":"最长公共子序列（LCS）","createdAt":"2021-06-02","tags":["最长公共子序列","LCS"],"fields":{"slug":"/post/algorithm/lcs/"}},{"title":"背包九讲","createdAt":"2021-06-27","tags":["acm","算法","动态规划","背包问题"],"fields":{"slug":"/post/algorithm/knapsack/"}},{"title":"Dijkstra 算法","createdAt":"2021-05-29","tags":["算法","最短路","单源最短路","dijkstra"],"fields":{"slug":"/post/algorithm/graph/shortest-path/dijkstra/"}},{"title":"二分图","createdAt":"2016-07-17","tags":["算法","图论","二分图","学习笔记"],"fields":{"slug":"/post/algorithm/graph/bipartite-graph/"}},{"title":"防抖和节流","createdAt":"2021-09-03","tags":["coding","debounce","throttle"],"fields":{"slug":"/post/algorithm/debounce-and-throttle/"}},{"title":"精确覆盖问题和 DLX 算法","createdAt":"2021-07-24","tags":["算法","精确覆盖","DLX 算法"],"fields":{"slug":"/post/algorithm/dlx/"}},{"title":"POJ-1324 Holedox Moving 解题报告","createdAt":"2016-04-13","tags":["acm","bfs","图论","状态压缩","解题报告"],"fields":{"slug":"/post/acm/oj/poj/1324/"}},{"title":"网络流 24 题","createdAt":"2016-07-30","tags":["acm","算法","图论","网络流","二分图","解题报告","专题训练"],"fields":{"slug":"/post/algorithm/graph/network-flow/24-problems/"}},{"title":"网络流基础之最大权闭合图","createdAt":"2016-07-24","tags":["算法","图论","网络流","最大权闭合图"],"fields":{"slug":"/post/algorithm/graph/network-flow/最大权闭合图/"}},{"title":"HDU-5576 Expection of String 解题报告（原 2015-上海区域赛-E)","createdAt":"2016-04-24","tags":["acm","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5576/"}},{"title":"剑指offer 解题报告","createdAt":"2021-07-15","tags":["专题训练","解题报告"],"fields":{"slug":"/post/acm/oj/nowcoder/jz-offer/"}},{"title":"2016 多校第 2 场","createdAt":"2016-07-22","tags":["acm","训练赛","数据结构","解题报告"],"fields":{"slug":"/post/acm/contest/multi-university-training/2016/2/"}},{"title":"HDU-5306 Gorgeous Sequence 解题报告","createdAt":"2016-04-09","tags":["acm","数据结构","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5306/"}},{"title":"51nod-1462 数据结构 -- 解题报告","createdAt":"2016-04-23","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/51nod/1462/"}},{"title":"百度之星 2016 解题报告","createdAt":"2016-06-03","tags":["acm","递推","状态压缩","动态规划","字典树","解题报告"],"fields":{"slug":"/post/acm/contest/baiduzhixing/2016/"}},{"title":"CCF 2015-09 最佳文章 解题报告","createdAt":"2016-06-26","tags":["acm","Aho-Corasick 自动机","矩阵快速幂","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/ccf/2015/09/E/"}},{"title":"HDU-5574 Colorful Tree 解题报告（原 2015-上海区域赛-C）","createdAt":"2016-04-12","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5574/"}}]}},"pageContext":{"id":"4444c90d-ccb3-508f-bedd-c5420bd4a34c","contentType":"post","paginationUrl":"/posts","previousPostId":"1db541cb-51aa-5d2f-806c-1d40296d6566","nextPostId":"56af1cbd-bcb1-5967-892e-16feece037a2"}},"staticQueryHashes":[],"slicesMap":{}}