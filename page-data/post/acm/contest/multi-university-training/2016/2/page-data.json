{"componentChunkName":"component---src-layout-post-post-tsx","path":"/post/acm/contest/multi-university-training/2016/2/","result":{"data":{"content":{"title":"2016 多校第 2 场","description":"2016 多校第 2 场","createdAt":"July 22, 2016","updatedAt":null,"timeToRead":"2min 40s","frontmatter2":{"aplayer":null,"wechatThumbnail":null},"toc":{"children":[{"depth":2,"identifier":"heading-1004-differencia","contents":[{"type":"text","value":"1004 Differencia"}],"children":[{"depth":3,"identifier":"heading-题目描述","contents":[{"type":"text","value":"题目描述"}],"children":[]},{"depth":3,"identifier":"heading-题目简析","contents":[{"type":"text","value":"题目简析"}],"children":[]},{"depth":3,"identifier":"heading-程序实现","contents":[{"type":"text","value":"程序实现"}],"children":[]}]}]},"categories":[],"tags":["acm","训练赛","数据结构","解题报告"],"ast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"1004 Differencia"}],"identifier":"heading-1004-differencia"},{"type":"heading","depth":3,"children":[{"type":"text","value":"题目描述"}],"identifier":"heading-题目描述"},{"type":"paragraph","children":[{"type":"text","value":"有两个序列："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"inlineMath","value":"\\big\\lbrace a_1, a_2, \\cdots, a_n \\big\\rbrace"}]},{"type":"listItem","children":[{"type":"inlineMath","value":"\\big\\lbrace b_1, b_2, \\cdots, b_n \\big\\rbrace"}]}]},{"type":"paragraph","children":[{"type":"text","value":"有两种操作："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"inlineMath","value":"+ \\; l \\;r \\; x"},{"type":"text","value":": 将所有的 "},{"type":"inlineMath","value":"a_i(l \\leqslant i\\leqslant r)"},{"type":"text","value":" 置为 "},{"type":"inlineMath","value":"x"}]},{"type":"listItem","children":[{"type":"inlineMath","value":"? \\; l \\;r"},{"type":"text","value":": 询问 "},{"type":"inlineMath","value":"l\\leqslant i\\leqslant r"},{"type":"text","value":" 中有多少个 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 满足 "},{"type":"inlineMath","value":"a_i \\geqslant b_i"}]}]},{"type":"paragraph","children":[{"type":"text","value":"数据范围："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"inlineMath","value":"1\\leqslant n\\leqslant 10^5"}]},{"type":"listItem","children":[{"type":"inlineMath","value":"3\\times 10^6"},{"type":"text","value":" 次询问，强制在线。"}]}]},{"type":"paragraph","children":[{"type":"link","url":"http://acm.hdu.edu.cn/showproblem.php?pid=5737","children":[{"type":"text","value":"题目链接"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"题目简析"}],"identifier":"heading-题目简析"},{"type":"paragraph","children":[{"type":"text","value":"将 "},{"type":"inlineMath","value":"B"},{"type":"text","value":" 数组建成归并树（用线段树实现即可），并预处理出初始的 "},{"type":"inlineMath","value":"a_i \\geqslant b_i"},{"type":"text","value":"\n的前缀和，用该线段树维护。那么，对于每次查询就是简单的线段树区间求和问题，复杂度为 "},{"type":"inlineMath","value":"O(n\\log n)"},{"type":"text","value":". 由于修改操作是将一个区间内所有的 "},{"type":"inlineMath","value":"a_i"},{"type":"text","value":" 置为 "},{"type":"inlineMath","value":"x"},{"type":"text","value":"，区间修改将影响线段树中 "},{"type":"inlineMath","value":"O(\\log n)"},{"type":"text","value":" 个节点；对于每个节点，直接二分即可知道有多少这个区间内有多少个点满足 "},{"type":"inlineMath","value":"b_i \\leqslant x"},{"type":"text","value":" 了。这么做的时间复杂度是 "},{"type":"inlineMath","value":"O(n\\log n + q\\log^2 n)"},{"type":"text","value":"\n的，遗憾的是，出题人只给 "},{"type":"inlineMath","value":"O(n\\log n)"},{"type":"text","value":" 以下的复杂度过。"}]},{"type":"paragraph","children":[{"type":"text","value":"如果预处理初每个节点所维护的区间中每个节点在左右子节点中的 "},{"type":"inlineMath","value":"rank"},{"type":"text","value":"，这个可以线扫，总复杂度为 "},{"type":"inlineMath","value":"O(n\\log n)"},{"type":"text","value":"；不难发现，每次在节点所维护的区间内查找有多少个点小于等于 "},{"type":"inlineMath","value":"x"},{"type":"text","value":" 操作仅需在根节点处二分一次，之后 "},{"type":"inlineMath","value":"O(1)"},{"type":"text","value":" 转移，复杂度降为 "},{"type":"inlineMath","value":"O((n+q)\\log n)"},{"type":"text","value":"."}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"程序实现"}],"identifier":"heading-程序实现"},{"type":"code","lang":"cpp","meta":"title=\"1004.cpp\" sourcefile=\"./1004.cpp\" maxlines=\"20\" collapsed linenos","value":"#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n\ninline int read() {\n  bool positive = true;\n  char c = getchar();\n  int s = 0;\n  for (; c < '0' || c > '9'; c = getchar())\n    if (c == '-') positive = false;\n  for (; c >= '0' && c <= '9'; c = getchar()) s = s * 10 + c - '0';\n  return positive ? s : -s;\n}\n\nnamespace solve {\n  const int MAXN = 100000 + 10;\n  int A[MAXN], B[20][MAXN], L[20][MAXN], R[20][MAXN];\n  int sumv[MAXN << 2], setv[MAXN << 2], posv[MAXN << 2];\n\n  inline void build(int o, int lft, int rht, int cur = 0) {\n    setv[o] = 0;\n    if (lft == rht) {\n      B[cur][lft] = read();\n      sumv[o] = A[lft] >= B[cur][lft] ? 1 : 0;\n    } else {\n      int mid = lft + rht >> 1;\n      build(o << 1, lft, mid, cur + 1);\n      build(o << 1 | 1, mid + 1, rht, cur + 1);\n\n      int tot = lft, i = lft, j = mid + 1;\n      for (; i <= mid && j <= rht;)\n        if (B[cur + 1][i] <= B[cur + 1][j])\n          B[cur][tot++] = B[cur + 1][i++];\n        else\n          B[cur][tot++] = B[cur + 1][j++];\n      for (; i <= mid;) B[cur][tot++] = B[cur + 1][i++];\n      for (; j <= rht;) B[cur][tot++] = B[cur + 1][j++];\n      sumv[o] = sumv[o << 1] + sumv[o << 1 | 1];\n\n      // 计算区间 [lft,rht] 的每个节点在左右子节点中的 rank\n      L[cur][lft] = lft;\n      R[cur][lft] = mid + 1;\n      for (int& l = L[cur][lft]; l <= mid && B[cur + 1][l] <= B[cur][lft]; ++l)\n        ;\n      for (int& r = R[cur][lft]; r <= rht && B[cur + 1][r] <= B[cur][lft]; ++r)\n        ;\n      --L[cur][lft];\n      --R[cur][lft];\n      for (int i = lft + 1; i <= rht; ++i) {\n        L[cur][i] = L[cur][i - 1] + 1;\n        R[cur][i] = R[cur][i - 1] + 1;\n        for (int& l = L[cur][i]; l <= mid && B[cur + 1][l] <= B[cur][i]; ++l)\n          ;\n        for (int& r = R[cur][i]; r <= rht && B[cur + 1][r] <= B[cur][i]; ++r)\n          ;\n        --L[cur][i];\n        --R[cur][i];\n      }\n    }\n  }\n\n  inline void pushdown(int o, int lft, int rht, int cur) {\n    int lc = o << 1, rc = o << 1 | 1, mid = lft + rht >> 1;\n    setv[lc] = setv[o];\n    posv[lc] = posv[o] >= lft ? L[cur][posv[o]] : lft - 1;\n    setv[rc] = setv[o];\n    posv[rc] = posv[o] >= lft ? R[cur][posv[o]] : mid;\n    sumv[lc] = posv[lc] - lft + 1;\n    sumv[rc] = posv[rc] - mid;\n    setv[o] = 0;\n  }\n\n  int ul, ur, uv;\n  inline void update(int o, int lft, int rht, int pos, int cur = 0) {\n    if (lft == rht) {\n      sumv[o] = uv >= B[cur][lft] ? 1 : 0;\n      return;\n    }\n    if (ul <= lft && rht <= ur) {\n      int mid = lft + rht >> 1;\n      setv[o] = uv;\n      posv[o] = pos;\n      sumv[o] = pos - lft + 1;\n    } else {\n      if (setv[o]) pushdown(o, lft, rht, cur);\n      int mid = lft + rht >> 1;\n      if (ul <= mid)\n        update(o << 1, lft, mid, pos >= lft ? L[cur][pos] : lft - 1, cur + 1);\n      if (mid < ur)\n        update(o << 1 | 1, mid + 1, rht, pos >= lft ? R[cur][pos] : mid, cur + 1);\n      sumv[o] = sumv[o << 1] + sumv[o << 1 | 1];\n    }\n  }\n\n  int ql, qr;\n  inline int query(int o, int lft, int rht, int cur = 0) {\n    if (ql <= lft && rht <= qr) return sumv[o];\n    if (setv[o]) pushdown(o, lft, rht, cur);\n    int mid = lft + rht >> 1;\n    int ans = 0;\n    if (ql <= mid) ans += query(o << 1, lft, mid, cur + 1);\n    if (mid < qr) ans += query(o << 1 | 1, mid + 1, rht, cur + 1);\n    return ans;\n  }\n};   // namespace solve\n\ntypedef long long LL;\nconst int MOD = 1000000000 + 7;\nconst int C = ~(1 << 31);\nconst int M = (1 << 16) - 1;\n\nint n, m, A, B, a, b, last;\n\ninline int rnd(int last) {\n  a = (36969 + (last >> 3)) * (a & M) + (a >> 16);\n  b = (18000 + (last >> 3)) * (b & M) + (b >> 16);\n  return (C & ((a << 16) + b)) % 1000000000;\n}\n\nint main() {\n  int T_T = read();\n  for (int kase = 1; kase <= T_T; ++kase) {\n    scanf(\"%d%d%d%d\", &n, &m, &A, &B);\n    for (int i = 1; i <= n; ++i) solve::A[i] = read();\n    solve::build(1, 1, n);\n\n    LL ans = 0LL;\n    a = A, b = B, last = 0;\n    for (int i = 1; i <= m; ++i) {\n      int l = rnd(last) % n + 1;\n      int r = rnd(last) % n + 1;\n      int x = rnd(last) + 1;\n      if (l > r) std::swap(l, r);\n      if ((l + r + x) & 1) {\n        solve::ul = l;\n        solve::ur = r;\n        solve::uv = x;\n        int pos = std::upper_bound(solve::B[0] + 1, solve::B[0] + n + 1, x) -\n                  solve::B[0] - 1;\n        solve::update(1, 1, n, pos);\n      } else {\n        solve::ql = l;\n        solve::qr = r;\n        last = solve::query(1, 1, n);\n        ans = (ans + (LL)i * last) % MOD;\n      }\n    }\n    printf(\"%d\\n\", ans);\n  }\n\n  return 0;\n}\n"}]},"ecmaImports":[],"definitionMap":{},"footnoteDefinitionMap":{},"fields":{"slug":"/post/acm/contest/multi-university-training/2016/2/"}},"previous":{"title":"二分图","fields":{"slug":"/post/algorithm/graph/bipartite-graph/"}},"next":{"title":"网络流基础之最大权闭合图","fields":{"slug":"/post/algorithm/graph/network-flow/最大权闭合图/"}},"postItems":{"nodes":[{"title":"Custom React Hooks","createdAt":"2020-10-30","tags":["react","react hooks"],"fields":{"slug":"/post/web/react/hooks/custom/"}},{"title":"React Reconciliation","createdAt":"2021-06-27","tags":["react","react reconciliation"],"fields":{"slug":"/post/web/react/reconciliation/"}},{"title":"ECMA 2020 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2020/"}},{"title":"XSS 与 CSRF 的攻防","createdAt":"2021-08-19","tags":["web","web security","csrf"],"fields":{"slug":"/post/web/security/xss-csrf/"}},{"title":"Javascript 踩坑记——继承和原型链","createdAt":"2021-09-05","tags":["studynote","javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/inherit/"}},{"title":"CSS 选择器","createdAt":"2020-11-02","tags":["web","frontend","css"],"fields":{"slug":"/post/web/css/selector/"}},{"title":"ECMA 2021 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2021/"}},{"title":"在 excel 中启用正则表达式","createdAt":"2021-03-30","tags":["excel","tools"],"fields":{"slug":"/post/tool/excel/regex/"}},{"title":"统计区间内的线段","createdAt":"2021-07-21","tags":["quiz","扫描线","前缀和","树状数组","线段树"],"fields":{"slug":"/post/quiz/scanning-line/segments/"}},{"title":"约瑟夫环问题","createdAt":"2021-07-17","tags":["quiz","经典问题","约瑟夫环"],"fields":{"slug":"/post/quiz/classical/Josephus-ring/"}},{"title":"端口管理","createdAt":"2021-06-20","tags":["network","port","ssh","netstat"],"fields":{"slug":"/post/network/端口管理/"}},{"title":"数论基础之欧拉函数","createdAt":"2016-05-10","tags":["math","数论","既约剩余系","欧拉函数"],"fields":{"slug":"/post/math/number-theory/欧拉函数/"}},{"title":"扔鸡蛋问题","createdAt":"2021-06-20","tags":["quiz","动态规划"],"fields":{"slug":"/post/quiz/dp/egg-drop/"}},{"title":"数论基础之模方程初步","createdAt":"2016-05-04","tags":["math","数论","扩展欧几里得算法","中国剩余定理","Baby Step Gaint Step"],"fields":{"slug":"/post/math/number-theory/模方程/basic/"}},{"title":"不修改数组找出重复的数字","createdAt":"2021-06-29","tags":["quiz","分治","追击"],"fields":{"slug":"/post/quiz/partition/find-duplicate-number/"}},{"title":"数论基础之原根","createdAt":"2016-05-16","tags":["math","数论","原根"],"fields":{"slug":"/post/math/number-theory/原根/"}},{"title":"快速傅里叶变换和雷德算法","createdAt":"2016-04-10","tags":["acm","大数乘法","fft","快速傅里叶变换"],"fields":{"slug":"/post/math/number-theory/fft/"}},{"title":"小球放盒模型","createdAt":"2016-04-22","tags":["math","组合数学"],"fields":{"slug":"/post/math/combinatorial/小球放盒模型/"}},{"title":"组合游戏基础之 SG 函数和 SG 定理","createdAt":"2016-09-04","tags":["组合数学","组合游戏","SG 定理"],"fields":{"slug":"/post/math/combinatorial/SG/"}},{"title":"数论基础之筛法","createdAt":"2016-05-06","tags":["math","数论","素数","欧拉函数","线性筛"],"fields":{"slug":"/post/math/number-theory/sieve/"}},{"title":"函数的极限","createdAt":"2021-05-09","tags":["math","函数","极限"],"fields":{"slug":"/post/math/calculus/函数的极限/"}},{"title":"当你想来一把数独","createdAt":"2021-08-01","tags":["game","sudoku"],"fields":{"slug":"/post/game/sudoku/"}},{"title":"编译原理-语法制导翻译实现计算器","createdAt":"2016-06-23","tags":["编译原理","语法制导翻译","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/exercise/"}},{"title":"编译原理-语法分析","createdAt":"2016-06-18","tags":["编译原理","语法分析","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/grammar/"}},{"title":"伸展树专题","createdAt":"2016-07-03","tags":["acm","Splay","解题报告","专题训练"],"fields":{"slug":"/post/data-structure/bbst/splay/"}},{"title":"洗牌问题和 knuth-shuffle 算法","createdAt":"2021-07-22","tags":["shuffle","knuth-shuffle","约瑟夫环"],"fields":{"slug":"/post/algorithm/shuffle/"}},{"title":"自然对数底数e","createdAt":"2021-08-07","tags":["math","函数","极限","自然对数"],"fields":{"slug":"/post/math/calculus/自然对数底数e/"}},{"title":"树链剖分","createdAt":"2016-04-23","tags":["acm","算法","树链剖分"],"fields":{"slug":"/post/algorithm/tree/tcs/"}},{"title":"最长上升子序列（LIS）","createdAt":"2021-06-02","tags":["最长上升子序列","LIS"],"fields":{"slug":"/post/algorithm/lis/"}},{"title":"最长回文子串 Manacher 算法","createdAt":"2016-04-18","tags":["算法","字符串","回文串","manacher"],"fields":{"slug":"/post/algorithm/string/manacher/"}},{"title":"最长公共子序列（LCS）","createdAt":"2021-06-02","tags":["最长公共子序列","LCS"],"fields":{"slug":"/post/algorithm/lcs/"}},{"title":"背包九讲","createdAt":"2021-06-27","tags":["acm","算法","动态规划","背包问题"],"fields":{"slug":"/post/algorithm/knapsack/"}},{"title":"Dijkstra 算法","createdAt":"2021-05-29","tags":["算法","最短路","单源最短路","dijkstra"],"fields":{"slug":"/post/algorithm/graph/shortest-path/dijkstra/"}},{"title":"二分图","createdAt":"2016-07-17","tags":["算法","图论","二分图","学习笔记"],"fields":{"slug":"/post/algorithm/graph/bipartite-graph/"}},{"title":"防抖和节流","createdAt":"2021-09-03","tags":["coding","debounce","throttle"],"fields":{"slug":"/post/algorithm/debounce-and-throttle/"}},{"title":"精确覆盖问题和 DLX 算法","createdAt":"2021-07-24","tags":["算法","精确覆盖","DLX 算法"],"fields":{"slug":"/post/algorithm/dlx/"}},{"title":"POJ-1324 Holedox Moving 解题报告","createdAt":"2016-04-13","tags":["acm","bfs","图论","状态压缩","解题报告"],"fields":{"slug":"/post/acm/oj/poj/1324/"}},{"title":"网络流 24 题","createdAt":"2016-07-30","tags":["acm","算法","图论","网络流","二分图","解题报告","专题训练"],"fields":{"slug":"/post/algorithm/graph/network-flow/24-problems/"}},{"title":"网络流基础之最大权闭合图","createdAt":"2016-07-24","tags":["算法","图论","网络流","最大权闭合图"],"fields":{"slug":"/post/algorithm/graph/network-flow/最大权闭合图/"}},{"title":"HDU-5576 Expection of String 解题报告（原 2015-上海区域赛-E)","createdAt":"2016-04-24","tags":["acm","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5576/"}},{"title":"剑指offer 解题报告","createdAt":"2021-07-15","tags":["专题训练","解题报告"],"fields":{"slug":"/post/acm/oj/nowcoder/jz-offer/"}},{"title":"2016 多校第 2 场","createdAt":"2016-07-22","tags":["acm","训练赛","数据结构","解题报告"],"fields":{"slug":"/post/acm/contest/multi-university-training/2016/2/"}},{"title":"HDU-5306 Gorgeous Sequence 解题报告","createdAt":"2016-04-09","tags":["acm","数据结构","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5306/"}},{"title":"51nod-1462 数据结构 -- 解题报告","createdAt":"2016-04-23","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/51nod/1462/"}},{"title":"百度之星 2016 解题报告","createdAt":"2016-06-03","tags":["acm","递推","状态压缩","动态规划","字典树","解题报告"],"fields":{"slug":"/post/acm/contest/baiduzhixing/2016/"}},{"title":"CCF 2015-09 最佳文章 解题报告","createdAt":"2016-06-26","tags":["acm","Aho-Corasick 自动机","矩阵快速幂","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/ccf/2015/09/E/"}},{"title":"HDU-5574 Colorful Tree 解题报告（原 2015-上海区域赛-C）","createdAt":"2016-04-12","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5574/"}}]}},"pageContext":{"id":"cba60032-a8c8-5914-ac2c-08136eedbab7","contentType":"post","paginationUrl":"/posts","previousPostId":"fcd952cf-3332-5fa5-aef3-b30a104a5254","nextPostId":"0c2c884a-4a1c-5532-a77b-db267d0d7844"}},"staticQueryHashes":[],"slicesMap":{}}