{"componentChunkName":"component---src-layout-post-post-tsx","path":"/post/quiz/dp/egg-drop/","result":{"data":{"content":{"title":"扔鸡蛋问题","description":"扔鸡蛋问题","createdAt":"June 20, 2021","updatedAt":null,"timeToRead":"4min 36s","frontmatter2":{"aplayer":null,"wechatThumbnail":null},"toc":{"children":[{"depth":2,"identifier":"heading-问题描述","contents":[{"type":"text","value":"问题描述"}],"children":[{"depth":3,"identifier":"heading-算法一","contents":[{"type":"text","value":"算法一"}],"children":[]},{"depth":3,"identifier":"heading-算法二","contents":[{"type":"text","value":"算法二"}],"children":[]}]},{"depth":2,"identifier":"heading-related","contents":[{"type":"text","value":"Related"}],"children":[]}]},"categories":[],"tags":["quiz","动态规划"],"ast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"问题描述"}],"identifier":"heading-问题描述"},{"type":"paragraph","children":[{"type":"text","value":"有 "},{"type":"inlineMath","value":"K"},{"type":"text","value":" 个鸡蛋和 "},{"type":"inlineMath","value":"N"},{"type":"text","value":" 层楼，测试最多试验几次可以测出让鸡蛋摔碎的最低楼层。假定鸡蛋无磨损，即如果在第 "},{"type":"inlineMath","value":"x"},{"type":"text","value":" 层楼扔下没碎，那么在第 "},{"type":"inlineMath","value":"x"},{"type":"text","value":" 层楼重复扔无限次都不会碎。没碎的鸡蛋可以重复使用（用于测试），已碎的鸡蛋无法继续使用。"}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"算法一"}],"identifier":"heading-算法一"},{"type":"paragraph","children":[{"type":"text","value":"将 "},{"type":"inlineMath","value":"N"},{"type":"text","value":" 层楼看作长度为 "},{"type":"inlineMath","value":"N"},{"type":"text","value":" 的区间，记 "},{"type":"inlineMath","value":"dp(k, n)"},{"type":"text","value":" 表示至多使用 "},{"type":"inlineMath","value":"k"},{"type":"text","value":" 个鸡蛋测出区间长度为 "},{"type":"inlineMath","value":"n"},{"type":"text","value":" 的楼层里任意楼层是否能摔碎鸡蛋的最少试验次数，则状态转移方程为："}]},{"type":"math","value":"dp(k, n) = \n  \\min \\big\\lbrace \n    \\max \\lbrace dp(k-1, x-1), dp(k, n-x) \\rbrace\n    \\; \\big\\vert \\; 1 \\leqslant x \\leqslant n \n  \\big\\rbrace + 1\n"},{"type":"paragraph","children":[{"type":"text","value":"上式的含义是，枚举区间长度为 "},{"type":"inlineMath","value":"n"},{"type":"text","value":" 层楼中的第 "},{"type":"inlineMath","value":"x"},{"type":"text","value":" 层楼，并从此层楼扔下一枚鸡蛋："}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"若鸡蛋碎了，则还有 "},{"type":"inlineMath","value":"k-1"},{"type":"text","value":" 个鸡蛋可以使用，并只需要需要在区间长度为 "},{"type":"inlineMath","value":"x-1"},{"type":"text","value":" 的楼层里找到答案"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"若鸡蛋没碎，则还有 "},{"type":"inlineMath","value":"k"},{"type":"text","value":" 个鸡蛋可以使用，并只需要在区间长度为 "},{"type":"inlineMath","value":"n-x"},{"type":"text","value":" 的楼层里找到答案"}]}]}]},{"type":"paragraph","children":[{"type":"text","value":"不难发现，如果直接暴力枚举，复杂度将高达 "},{"type":"inlineMath","value":"O(K \\cdot N^2)"},{"type":"text","value":"。"}]},{"type":"thematicBreak"},{"type":"paragraph","children":[{"type":"text","value":"注意到 "},{"type":"inlineMath","value":"dp(k)"},{"type":"text","value":" 是一个非严格单调递增的向量（即 "},{"type":"inlineMath","value":"dp(k, x) \\leqslant dp(k, x+1)"},{"type":"text","value":"，因此可以通过二分 "},{"type":"inlineMath","value":"dp(k, n)"},{"type":"text","value":" 的答案，然后找到 "},{"type":"inlineMath","value":"dp(k-1, x-1), 1 \\leqslant x \\leqslant n"},{"type":"text","value":"\n中小于此答案的最大 "},{"type":"inlineMath","value":"x"},{"type":"text","value":"，然后检查 "},{"type":"inlineMath","value":"dp(k, n-x)"},{"type":"text","value":" 是否也同时小于此答案即可完整验证。此时，时间复杂度为 "},{"type":"inlineMath","value":"O(K \\cdot N \\cdot \\log^2 N)"}]},{"type":"code","lang":"typescript","meta":"title=\"algorithm1.ts\" linenos","value":"const MAX_K = 100 + 2\nconst MAX_N = 10000 + 2\nconst dp: number[][] = new Array(MAX_K)\n\nfunction preprocess(): void {\n  for (let k = 0; k < MAX_K; ++k) {\n    dp[k] = new Array(MAX_N)\n    dp[k][0] = 0\n  }\n\n  for (let n = 1; n < MAX_N; ++n) {\n    dp[1][n] = n\n  }\n\n  for (let k = 2; k < MAX_K; ++k) {\n    const f: number[] = dp[k - 1]\n    const h: number[] = dp[k]\n    for (let n = 1; n < MAX_N; ++n) {\n      const answer = lowerBound(f[1], f[n], candidateAnswer => {\n        const x = lowerBound(1, n, y => f[y] <= candidateAnswer)\n        return x <= 1 || h[n - x] > candidateAnswer\n      })\n      h[n] = Math.min(f[n], answer + 1)\n    }\n  }\n}\n"},{"type":"heading","depth":3,"children":[{"type":"text","value":"算法二"}],"identifier":"heading-算法二"},{"type":"paragraph","children":[{"type":"text","value":"记 "},{"type":"inlineMath","value":"dp(k, m)"},{"type":"text","value":" 表示使用 "},{"type":"inlineMath","value":"k"},{"type":"text","value":" 个鸡蛋在 "},{"type":"inlineMath","value":"m"},{"type":"text","value":" 步内最多能测出的最高楼层。考虑第一次扔鸡蛋应该在哪一层扔，不妨假设最优决策是先在第 "},{"type":"inlineMath","value":"x"},{"type":"text","value":" 层扔鸡蛋："}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"如果鸡蛋摔碎了，则必须要使用 "},{"type":"inlineMath","value":"k-1"},{"type":"text","value":" 个鸡蛋在 "},{"type":"inlineMath","value":"m-1"},{"type":"text","value":" 次里测出前 "},{"type":"inlineMath","value":"x-1"},{"type":"text","value":" 层里能使鸡蛋摔碎的最小楼层，则取 "},{"type":"inlineMath","value":"x = dp(k-1, m-1) + 1"},{"type":"text","value":" 是最优的（否则，无法在条件限制内完成测试）。"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"如果鸡蛋没摔碎，则相当于把第 "},{"type":"inlineMath","value":"x+1"},{"type":"text","value":" 层看作第一层继续测试，因此最多还能测出\n"},{"type":"inlineMath","value":"dp(k, m-1)"},{"type":"text","value":" 层楼。"}]}]}]},{"type":"paragraph","children":[{"type":"text","value":"因此，状态转移方程为："}]},{"type":"math","value":"dp(k, m) = x + dp(k, m - 1) = dp(k - 1, m - 1) + dp(k, m - 1) + 1\n"},{"type":"heading","depth":2,"children":[{"type":"text","value":"Related"}],"identifier":"heading-related"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"link","url":"https://leetcode.com/problems/super-egg-drop/","children":[{"type":"text","value":"Super Egg Drop | leetcode"}]}]},{"type":"listItem","children":[{"type":"text","value":"算法竞赛入门经典（第2版） P292 装满水的气球 -- 刘汝佳"}]}]}]},"ecmaImports":[],"definitionMap":{},"footnoteDefinitionMap":{},"fields":{"slug":"/post/quiz/dp/egg-drop/"}},"previous":{"title":"端口管理","fields":{"slug":"/post/network/端口管理/"}},"next":{"title":"React Reconciliation","fields":{"slug":"/post/web/react/reconciliation/"}},"postItems":{"nodes":[{"title":"洗牌问题和 knuth-shuffle 算法","createdAt":"2021-07-22","tags":["shuffle","knuth-shuffle","约瑟夫环"],"fields":{"slug":"/post/algorithm/shuffle/"}},{"title":"编译原理-语法制导翻译实现计算器","createdAt":"2016-06-23","tags":["编译原理","语法制导翻译","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/exercise/"}},{"title":"编译原理-语法分析","createdAt":"2016-06-18","tags":["编译原理","语法分析","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/grammar/"}},{"title":"端口管理","createdAt":"2021-06-20","tags":["network","port","ssh","netstat"],"fields":{"slug":"/post/network/端口管理/"}},{"title":"防抖和节流","createdAt":"2021-09-03","tags":["coding","debounce","throttle"],"fields":{"slug":"/post/algorithm/debounce-and-throttle/"}},{"title":"精确覆盖问题和 DLX 算法","createdAt":"2021-07-24","tags":["算法","精确覆盖","DLX 算法"],"fields":{"slug":"/post/algorithm/dlx/"}},{"title":"背包九讲","createdAt":"2021-06-27","tags":["acm","算法","动态规划","背包问题"],"fields":{"slug":"/post/algorithm/knapsack/"}},{"title":"最长公共子序列（LCS）","createdAt":"2021-06-02","tags":["最长公共子序列","LCS"],"fields":{"slug":"/post/algorithm/lcs/"}},{"title":"最长上升子序列（LIS）","createdAt":"2021-06-02","tags":["最长上升子序列","LIS"],"fields":{"slug":"/post/algorithm/lis/"}},{"title":"当你想来一把数独","createdAt":"2021-08-01","tags":["game","sudoku"],"fields":{"slug":"/post/game/sudoku/"}},{"title":"函数的极限","createdAt":"2021-05-09","tags":["math","函数","极限"],"fields":{"slug":"/post/math/calculus/函数的极限/"}},{"title":"自然对数底数e","createdAt":"2021-08-07","tags":["math","函数","极限","自然对数"],"fields":{"slug":"/post/math/calculus/自然对数底数e/"}},{"title":"小球放盒模型","createdAt":"2016-04-22","tags":["math","组合数学"],"fields":{"slug":"/post/math/combinatorial/小球放盒模型/"}},{"title":"不修改数组找出重复的数字","createdAt":"2021-06-29","tags":["quiz","分治","追击"],"fields":{"slug":"/post/quiz/partition/find-duplicate-number/"}},{"title":"统计区间内的线段","createdAt":"2021-07-21","tags":["quiz","扫描线","前缀和","树状数组","线段树"],"fields":{"slug":"/post/quiz/scanning-line/segments/"}},{"title":"CSS 选择器","createdAt":"2020-11-02","tags":["web","frontend","css"],"fields":{"slug":"/post/web/css/selector/"}},{"title":"ECMA 2020 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2020/"}},{"title":"ECMA 2021 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2021/"}},{"title":"Javascript 踩坑记——继承和原型链","createdAt":"2021-09-05","tags":["studynote","javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/inherit/"}},{"title":"React Reconciliation","createdAt":"2021-06-26","tags":["react","react reconciliation"],"fields":{"slug":"/post/web/react/reconciliation/"}},{"title":"XSS 与 CSRF 的攻防","createdAt":"2021-08-19","tags":["web","web security","csrf"],"fields":{"slug":"/post/web/security/xss-csrf/"}},{"title":"二分图","createdAt":"2016-07-17","tags":["算法","图论","二分图","学习笔记"],"fields":{"slug":"/post/algorithm/graph/bipartite-graph/"}},{"title":"最长回文子串 Manacher 算法","createdAt":"2016-04-18","tags":["算法","字符串","回文串","manacher"],"fields":{"slug":"/post/algorithm/string/manacher/"}},{"title":"树链剖分","createdAt":"2016-04-23","tags":["acm","算法","树链剖分"],"fields":{"slug":"/post/algorithm/tree/tcs/"}},{"title":"伸展树专题","createdAt":"2016-07-03","tags":["acm","Splay","解题报告","专题训练"],"fields":{"slug":"/post/data-structure/bbst/splay/"}},{"title":"组合游戏基础之 SG 函数和 SG 定理","createdAt":"2016-09-04","tags":["组合数学","组合游戏","SG 定理"],"fields":{"slug":"/post/math/combinatorial/SG/"}},{"title":"快速傅里叶变换和雷德算法","createdAt":"2016-04-10","tags":["acm","大数乘法","fft","快速傅里叶变换"],"fields":{"slug":"/post/math/number-theory/fft/"}},{"title":"数论基础之筛法","createdAt":"2016-05-06","tags":["math","数论","素数","欧拉函数","线性筛"],"fields":{"slug":"/post/math/number-theory/sieve/"}},{"title":"数论基础之原根","createdAt":"2016-05-16","tags":["math","数论","原根"],"fields":{"slug":"/post/math/number-theory/原根/"}},{"title":"数论基础之欧拉函数","createdAt":"2016-05-10","tags":["math","数论","既约剩余系","欧拉函数"],"fields":{"slug":"/post/math/number-theory/欧拉函数/"}},{"title":"约瑟夫环问题","createdAt":"2021-07-16","tags":["quiz","经典问题","约瑟夫环"],"fields":{"slug":"/post/quiz/classical/Josephus-ring/"}},{"title":"扔鸡蛋问题","createdAt":"2021-06-20","tags":["quiz","动态规划"],"fields":{"slug":"/post/quiz/dp/egg-drop/"}},{"title":"在 excel 中启用正则表达式","createdAt":"2021-03-29","tags":["excel","tools"],"fields":{"slug":"/post/tool/excel/regex/"}},{"title":"百度之星 2016 解题报告","createdAt":"2016-06-03","tags":["acm","递推","状态压缩","动态规划","字典树","解题报告"],"fields":{"slug":"/post/acm/contest/baiduzhixing/2016/"}},{"title":"51nod-1462 数据结构 -- 解题报告","createdAt":"2016-04-23","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/51nod/1462/"}},{"title":"HDU-5306 Gorgeous Sequence 解题报告","createdAt":"2016-04-09","tags":["acm","数据结构","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5306/"}},{"title":"HDU-5574 Colorful Tree 解题报告（原 2015-上海区域赛-C）","createdAt":"2016-04-12","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5574/"}},{"title":"HDU-5576 Expection of String 解题报告（原 2015-上海区域赛-E)","createdAt":"2016-04-24","tags":["acm","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5576/"}},{"title":"剑指offer 解题报告","createdAt":"2021-07-15","tags":["专题训练","解题报告"],"fields":{"slug":"/post/acm/oj/nowcoder/jz-offer/"}},{"title":"POJ-1324 Holedox Moving 解题报告","createdAt":"2016-04-13","tags":["acm","bfs","图论","状态压缩","解题报告"],"fields":{"slug":"/post/acm/oj/poj/1324/"}},{"title":"网络流 24 题","createdAt":"2016-07-30","tags":["acm","算法","图论","网络流","二分图","解题报告","专题训练"],"fields":{"slug":"/post/algorithm/graph/network-flow/24-problems/"}},{"title":"网络流基础之最大权闭合图","createdAt":"2016-07-24","tags":["算法","图论","网络流","最大权闭合图"],"fields":{"slug":"/post/algorithm/graph/network-flow/最大权闭合图/"}},{"title":"Dijkstra 算法","createdAt":"2021-05-29","tags":["算法","最短路","单源最短路","dijkstra"],"fields":{"slug":"/post/algorithm/graph/shortest-path/dijkstra/"}},{"title":"Custom React Hooks","createdAt":"2020-10-29","tags":["react","react hooks"],"fields":{"slug":"/post/web/react/hooks/custom/"}},{"title":"2016 多校第 2 场","createdAt":"2016-07-22","tags":["acm","训练赛","数据结构","解题报告"],"fields":{"slug":"/post/acm/contest/multi-university-training/2016/2/"}},{"title":"CCF 2015-09 最佳文章 解题报告","createdAt":"2016-06-26","tags":["acm","Aho-Corasick 自动机","矩阵快速幂","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/ccf/2015/09/E/"}},{"title":"数论基础之模方程初步","createdAt":"2016-05-04","tags":["math","数论","扩展欧几里得算法","中国剩余定理","Baby Step Gaint Step"],"fields":{"slug":"/post/math/number-theory/模方程/basic/"}}]}},"pageContext":{"id":"e02f128b-6178-536b-befd-44fa29bcf8be","contentType":"post","paginationUrl":"/posts","previousPostId":"b56f7b68-3e29-530e-b4d8-e98dcbfeaf5c","nextPostId":"39d63608-58e7-5817-97cc-add98d55ad78"}},"staticQueryHashes":[],"slicesMap":{}}