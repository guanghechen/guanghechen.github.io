{"componentChunkName":"component---src-layout-post-post-tsx","path":"/post/game/sudoku/","result":{"data":{"content":{"title":"当你想来一把数独","description":"当你想来一把数独","createdAt":"August 01, 2021","updatedAt":null,"timeToRead":"11min 12s","frontmatter2":{"aplayer":null,"wechatThumbnail":null},"toc":{"children":[{"depth":2,"identifier":"heading-前言","contents":[{"type":"text","value":"前言"}],"children":[]},{"depth":2,"identifier":"heading-什么是数独","contents":[{"type":"text","value":"什么是数独"}],"children":[]},{"depth":2,"identifier":"heading-生成一个数独谜题","contents":[{"type":"text","value":"生成一个数独谜题"}],"children":[{"depth":3,"identifier":"heading-如何确保存在解","contents":[{"type":"text","value":"如何确保存在解"}],"children":[]},{"depth":3,"identifier":"heading-如何确保唯一解","contents":[{"type":"text","value":"如何确保唯一解"}],"children":[]},{"depth":3,"identifier":"heading-如何区分难度","contents":[{"type":"text","value":"如何区分难度"}],"children":[]},{"depth":3,"identifier":"heading-如何获得更好的随机性","contents":[{"type":"text","value":"如何获得更好的随机性"}],"children":[]}]},{"depth":2,"identifier":"heading-交互设计","contents":[{"type":"text","value":"交互设计"}],"children":[]},{"depth":2,"identifier":"heading-附录","contents":[{"type":"text","value":"附录"}],"children":[]},{"depth":2,"identifier":"heading-related","contents":[{"type":"text","value":"Related"}],"children":[]}]},"categories":[],"tags":["game","sudoku"],"ast":{"type":"root","children":[{"type":"ecmaImport","moduleName":"@kyokuya/_demo/component/container.tsx","namedImports":[{"src":"CenterContainer","alias":null}]},{"type":"ecmaImport","moduleName":"@kyokuya/_demo/post/game/sudoku.tsx","namedImports":[{"src":"SudokuGameDemo","alias":null},{"src":"SudokuBoard1","alias":null},{"src":"SudokuBoard2","alias":null}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"前言"}],"identifier":"heading-前言"},{"type":"paragraph","children":[{"type":"text","value":"前一阵子想要整理一下"},{"type":"linkReference","identifier":"ghc-dlx","label":"ghc-dlx","referenceType":"full","children":[{"type":"text","value":"精确覆盖问题和 DLX 算法"}]},{"type":"text","value":"，为了验证对算法理解的准确性写了一道数独的题目。想起大学时用 "},{"type":"inlineCode","value":"C++"},{"type":"text","value":" 写过一个回溯版的，当时还兴致冲冲地拿它去求解手机上的数独游戏。想到这里时还特意在电脑上翻了好久也没能找到当时的代码；想起那时在 codevs.cn 上做过提交，本来还想去嫌弃下自己当年写的代码的，结果发现\ncodevs.cn 好像死掉了。"}]},{"type":"paragraph","children":[{"type":"text","value":"时间过得可真快，转眼间又是几个春秋。而我仿佛总是在迟到，好几件事情都没能在最希望完成的时候做到，却又在过后耿耿于怀，不甘心地追逐着过去的时空里所发生的期待。不是在原地踏步，可还是开始动摇，想必继续往前的地方是没有尽头的。"}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"什么是数独"}],"identifier":"heading-什么是数独"},{"type":"paragraph","children":[{"type":"text","value":"一个经典的数独游戏由 "},{"type":"inlineMath","value":"x^2"},{"type":"text","value":" "},{"type":"inlineMath","value":"\\times x^2"},{"type":"text","value":" 的网格构成，游戏的规则就是在网格上填数直到满足下述四个约束："}]},{"type":"list","ordered":true,"orderType":"1","start":1,"marker":46,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"网格中所有的格子都恰好填上一个数字"}]},{"type":"listItem","children":[{"type":"text","value":"每一行中需要出现 "},{"type":"inlineMath","value":"[1, x^2]"},{"type":"text","value":" 之间的所有整数"}]},{"type":"listItem","children":[{"type":"text","value":"每一列中需要出现 "},{"type":"inlineMath","value":"[1, x^2]"},{"type":"text","value":" 之间的所有整数"}]},{"type":"listItem","children":[{"type":"text","value":"每一个子方阵中需要出现 "},{"type":"inlineMath","value":"[1, x^2]"},{"type":"text","value":" 之间的所有整数"}]}]},{"type":"paragraph","children":[{"type":"text","value":"如下所示是一个经典的 "},{"type":"inlineMath","value":"9 \\times 9"},{"type":"text","value":" 的数独面板，其中粗线围成了 "},{"type":"inlineMath","value":"x^2=9"},{"type":"text","value":" 个子方阵\n"},{"type":"footnoteReference","label":"1","identifier":"footnote-1"},{"type":"text","value":"。"}]},{"type":"code","lang":"jsx","meta":"embed","value":"() => (<SudokuBoard1 />)\n"},{"type":"heading","depth":2,"children":[{"type":"text","value":"生成一个数独谜题"}],"identifier":"heading-生成一个数独谜题"},{"type":"paragraph","children":[{"type":"text","value":"要写一个离线游戏首先要解决数据的问题，对于数独要考虑的问题有："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"如何确保存在解"}]},{"type":"listItem","children":[{"type":"text","value":"如何确保唯一解"}]},{"type":"listItem","children":[{"type":"text","value":"如何区分难度"}]},{"type":"listItem","children":[{"type":"text","value":"如何获得更好的随机性"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"如何确保存在解"}],"identifier":"heading-如何确保存在解"},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"先生成一个填满的数独面板 "},{"type":"inlineMath","value":"G(r, c)"}]},{"type":"paragraph","children":[{"type":"text","value":"在数独面板上选取若干个位置，无冲突地填入值，然后跑求解数独的算法，若无解，则从之前选取填入的位置中选取一个，将其上面的值擦除，再运行求解数独的算法，不断重复此过程，必然能得到一个填满的数独"},{"type":"footnoteReference","label":"2","identifier":"footnote-2"},{"type":"text","value":"。"}]},{"type":"paragraph","children":[{"type":"text","value":"如何求解数独可参见 "},{"type":"linkReference","identifier":"ghc-dlx","label":"ghc-dlx","referenceType":"full","children":[{"type":"text","value":"精确覆盖问题和 DLX 算法"}]}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"在一个填满的数独面板中选取若干个位置，依次枚举这些位置 "},{"type":"inlineMath","value":"(r, c)"},{"type":"text","value":"，尝试将上面的值 "},{"type":"inlineMath","value":"v=G(r, c)"},{"type":"text","value":" 擦除，则得到一个必定存在解的数独谜题。"}]}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"如何确保唯一解"}],"identifier":"heading-如何确保唯一解"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"在上一步选取待擦除位置的操作中增加一个校验的逻辑：尝试擦除位置 "},{"type":"inlineMath","value":"(r, c)"},{"type":"text","value":" 上的值\n"},{"type":"inlineMath","value":"v = G(r, c)"},{"type":"text","value":" 时，枚举 "},{"type":"inlineMath","value":"[1, x^2]"},{"type":"text","value":" 之间除 "},{"type":"inlineMath","value":"v"},{"type":"text","value":" 外的所有整数 "},{"type":"inlineMath","value":"v'"},{"type":"text","value":"，并将格子\n"},{"type":"inlineMath","value":"(r, c)"},{"type":"text","value":" 的值设置为 "},{"type":"inlineMath","value":"v'"},{"type":"text","value":"，对于每次枚举都分别跑一次求解数独的算法，若存在解，说明此位置上的值不能擦除"},{"type":"footnoteReference","label":"3","identifier":"footnote-3"},{"type":"text","value":"；否则，擦除此格子上的值。"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"如何区分难度"}],"identifier":"heading-如何区分难度"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"一个直观的印象是：数独面板中缺失的格子越多，想要解决的困难度越大。所以难度可以映射为在生成数独谜题时尽可能多地尝试擦除格子。"}]}]},{"type":"paragraph","children":[{"type":"text","value":"下面是一个示例，拖动滑块以切换难度。"}]},{"type":"code","lang":"jsx","meta":"embed","value":"() => (<SudokuBoard2 />)\n"},{"type":"heading","depth":3,"children":[{"type":"text","value":"如何获得更好的随机性"}],"identifier":"heading-如何获得更好的随机性"},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"在初始填充的数独面板时："}]},{"type":"list","ordered":false,"marker":45,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"随机选取填充的位置"}]},{"type":"paragraph","children":[{"type":"text","value":"将所有的格子排成一排，为方便叙述不妨将其记为 "},{"type":"inlineMath","value":"T"},{"type":"text","value":"，应用 "},{"type":"linkReference","identifier":"ghc-knuth-shuffle","label":"ghc-knuth-shuffle","referenceType":"full","children":[{"type":"text","value":"Knuth Shuffle"}]},{"type":"text","value":"\n算法将其顺序打乱。则在随机选取格子时直接遍历打乱顺序后的 "},{"type":"inlineMath","value":"T"},{"type":"text","value":" 就可以了。一方面 "},{"type":"linkReference","identifier":"ghc-knuth-shuffle","label":"ghc-knuth-shuffle","referenceType":"full","children":[{"type":"text","value":"Knuth Shuffle"}]},{"type":"text","value":" 保证了每个格子以相同的概率排在任一位置上；另一方面直接遍历 "},{"type":"inlineMath","value":"T"},{"type":"text","value":" 相比随机枚举格子，不存在重复枚举的可能性。"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"按随机顺序枚举某个位置上可填入的值"}]},{"type":"paragraph","children":[{"type":"text","value":"枚举 "},{"type":"inlineMath","value":"v'"},{"type":"text","value":" 时可以先求出一个候选项列表"},{"type":"footnoteReference","label":"4","identifier":"footnote-4"},{"type":"text","value":"，同样地，将候选项列表打乱顺序后进行遍历。"}]}]}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"在尝试擦除格子时："}]},{"type":"list","ordered":false,"marker":45,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"随机选取待擦除的位置"}]},{"type":"paragraph","children":[{"type":"text","value":"类似地，在尝试擦除格子时，可以通过遍历 "},{"type":"inlineMath","value":"T"},{"type":"text","value":" 达到随机枚举格子的效果。检查擦除此位置时是否存在多解时，直接按顺序遍历即可。"}]},{"type":"paragraph","children":[{"type":"text","value":"为了体现难度，可以只对前 "},{"type":"inlineMath","value":"\\displaystyle \\left\\lceil difficulty \\times \\big\\lvert T \\big\\rvert \\right\\rceil"},{"type":"text","value":"\n个格子进行擦除尝试。"}]}]}]}]}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"交互设计"}],"identifier":"heading-交互设计"},{"type":"paragraph","children":[{"type":"text","value":"除了数据外还需要考虑几个交互问题："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","status":"done","children":[{"type":"text","value":"切换难度和数独面板的大小"}]},{"type":"listItem","status":"done","children":[{"type":"text","value":"暂停（暂停时用模糊滤镜遮住谜题）、继续游戏、重新开始游戏"}]},{"type":"listItem","status":"done","children":[{"type":"text","value":"计时器：支持暂停、恢复、重置"}]},{"type":"listItem","status":"done","children":[{"type":"text","value":"区分谜题预填充的格子和玩家填充的格子"}]},{"type":"listItem","status":"done","children":[{"type":"text","value":"格子的输入"}]},{"type":"listItem","status":"done","children":[{"type":"text","value":"输入冲突的值时高亮提醒"}]},{"type":"listItem","status":"done","children":[{"type":"text","value":"选中非空格子时高亮与之值相同的格子"}]},{"type":"listItem","status":"done","children":[{"type":"text","value":"完成游戏时的简易提示"}]},{"type":"listItem","status":"done","children":[{"type":"text","value":"简易的提示和小抄"}]},{"type":"listItem","status":"todo","children":[{"type":"text","value":"完成某行、列或子方阵时的提示动画"}]}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"附录"}],"identifier":"heading-附录"},{"type":"paragraph","children":[{"type":"text","value":"下面我实现的一个简易数独，求解数独以及生成数独所需的数据的算法我封装到了\n"},{"type":"linkReference","identifier":"@algorithm.ts/sudoku","label":"@algorithm.ts/sudoku","referenceType":"collapsed","children":[{"type":"text","value":"@algorithm.ts/sudoku"}]},{"type":"text","value":" 中，有兴趣的朋友可以自取。ui 组件打算之后做好整理再开源。"}]},{"type":"code","lang":"jsx","meta":"embed title=\"sudoku-game\"","value":"() => <SudokuGameDemo />\n"},{"type":"heading","depth":2,"children":[{"type":"text","value":"Related"}],"identifier":"heading-related"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"linkReference","identifier":"ghc-dlx","label":"ghc-dlx","referenceType":"full","children":[{"type":"text","value":"精确覆盖问题和 DLX 算法 | 光和尘"}]}]},{"type":"listItem","children":[{"type":"linkReference","identifier":"ghc-knuth-shuffle","label":"ghc-knuth-shuffle","referenceType":"full","children":[{"type":"text","value":"洗牌问题和 Knuth-Shuffle 算法 | 光和尘"}]}]},{"type":"listItem","children":[{"type":"linkReference","identifier":"ghc-sudoku-game","label":"ghc-sudoku-game","referenceType":"full","children":[{"type":"text","value":"Sudoku Game | 光和尘"}]}]},{"type":"listItem","children":[{"type":"linkReference","identifier":"@algorithm.ts/sudoku","label":"@algorithm.ts/sudoku","referenceType":"collapsed","children":[{"type":"text","value":"@algorithm.ts/sudoku"}]}]}]}]},"ecmaImports":[{"type":"ecmaImport","moduleName":"@kyokuya/_demo/component/container.tsx","namedImports":[{"src":"CenterContainer","alias":null}]},{"type":"ecmaImport","moduleName":"@kyokuya/_demo/post/game/sudoku.tsx","namedImports":[{"src":"SudokuGameDemo","alias":null},{"src":"SudokuBoard1","alias":null},{"src":"SudokuBoard2","alias":null}]}],"definitionMap":{"ghc-dlx":{"type":"definition","identifier":"ghc-dlx","label":"ghc-dlx","url":"/post/algorithm/dlx/"},"ghc-knuth-shuffle":{"type":"definition","identifier":"ghc-knuth-shuffle","label":"ghc-knuth-shuffle","url":"/post/algorithm/shuffle/"},"ghc-sudoku-game":{"type":"definition","identifier":"ghc-sudoku-game","label":"ghc-sudoku-game","url":"/game/sudoku"},"@algorithm.ts/sudoku":{"type":"definition","identifier":"@algorithm.ts/sudoku","label":"@algorithm.ts/sudoku","url":"https://github.com/guanghechen/algorithm.ts/tree/main/packages/sudoku"}},"footnoteDefinitionMap":{"footnote-1":{"type":"footnoteDefinition","identifier":"footnote-1","label":"1","children":[{"type":"paragraph","children":[{"type":"text","value":"即上述约束中第四个约束提到的“子方阵”"}]}]},"footnote-2":{"type":"footnoteDefinition","identifier":"footnote-2","label":"2","children":[{"type":"paragraph","children":[{"type":"text","value":"因为空的面板必然存在解，最坏的情况是擦除所有的格子上的值（当然，不可能等到所有格子都被擦除才找到解）"}]}]},"footnote-3":{"type":"footnoteDefinition","identifier":"footnote-3","label":"3","children":[{"type":"paragraph","children":[{"type":"text","value":"否则将存在多个解，因为此时格子 "},{"type":"inlineMath","value":"(r, c)"},{"type":"text","value":" 至少可以有 "},{"type":"inlineMath","value":"v"},{"type":"text","value":"\n和 "},{"type":"inlineMath","value":"v'"},{"type":"text","value":" 两种选择"}]}]},"footnote-4":{"type":"footnoteDefinition","identifier":"footnote-4","label":"4","children":[{"type":"paragraph","children":[{"type":"text","value":"因为可以简单检查格子所处的行、列、子方阵上的值构成的集合，即可在 "},{"type":"inlineMath","value":"O(x^2)"},{"type":"text","value":" 的复杂度内排除部分答案，这个预处理的开销远远小于运行求解数独算法的开销，且事先排除掉不可能的情况有利于消除边缘数据"}]}]}},"fields":{"slug":"/post/game/sudoku/"}},"previous":{"title":"精确覆盖问题和 DLX 算法","fields":{"slug":"/post/algorithm/dlx/"}},"next":{"title":"自然对数底数e","fields":{"slug":"/post/math/calculus/自然对数底数e/"}},"postItems":{"nodes":[{"title":"洗牌问题和 knuth-shuffle 算法","createdAt":"2021-07-22","tags":["shuffle","knuth-shuffle","约瑟夫环"],"fields":{"slug":"/post/algorithm/shuffle/"}},{"title":"编译原理-语法制导翻译实现计算器","createdAt":"2016-06-23","tags":["编译原理","语法制导翻译","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/exercise/"}},{"title":"编译原理-语法分析","createdAt":"2016-06-18","tags":["编译原理","语法分析","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/grammar/"}},{"title":"端口管理","createdAt":"2021-06-20","tags":["network","port","ssh","netstat"],"fields":{"slug":"/post/network/端口管理/"}},{"title":"防抖和节流","createdAt":"2021-09-03","tags":["coding","debounce","throttle"],"fields":{"slug":"/post/algorithm/debounce-and-throttle/"}},{"title":"精确覆盖问题和 DLX 算法","createdAt":"2021-07-24","tags":["算法","精确覆盖","DLX 算法"],"fields":{"slug":"/post/algorithm/dlx/"}},{"title":"背包九讲","createdAt":"2021-06-27","tags":["acm","算法","动态规划","背包问题"],"fields":{"slug":"/post/algorithm/knapsack/"}},{"title":"最长公共子序列（LCS）","createdAt":"2021-06-02","tags":["最长公共子序列","LCS"],"fields":{"slug":"/post/algorithm/lcs/"}},{"title":"最长上升子序列（LIS）","createdAt":"2021-06-02","tags":["最长上升子序列","LIS"],"fields":{"slug":"/post/algorithm/lis/"}},{"title":"当你想来一把数独","createdAt":"2021-08-01","tags":["game","sudoku"],"fields":{"slug":"/post/game/sudoku/"}},{"title":"函数的极限","createdAt":"2021-05-09","tags":["math","函数","极限"],"fields":{"slug":"/post/math/calculus/函数的极限/"}},{"title":"自然对数底数e","createdAt":"2021-08-07","tags":["math","函数","极限","自然对数"],"fields":{"slug":"/post/math/calculus/自然对数底数e/"}},{"title":"小球放盒模型","createdAt":"2016-04-22","tags":["math","组合数学"],"fields":{"slug":"/post/math/combinatorial/小球放盒模型/"}},{"title":"不修改数组找出重复的数字","createdAt":"2021-06-29","tags":["quiz","分治","追击"],"fields":{"slug":"/post/quiz/partition/find-duplicate-number/"}},{"title":"统计区间内的线段","createdAt":"2021-07-21","tags":["quiz","扫描线","前缀和","树状数组","线段树"],"fields":{"slug":"/post/quiz/scanning-line/segments/"}},{"title":"CSS 选择器","createdAt":"2020-11-02","tags":["web","frontend","css"],"fields":{"slug":"/post/web/css/selector/"}},{"title":"ECMA 2020 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2020/"}},{"title":"ECMA 2021 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2021/"}},{"title":"Javascript 踩坑记——继承和原型链","createdAt":"2021-09-05","tags":["studynote","javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/inherit/"}},{"title":"React Reconciliation","createdAt":"2021-06-26","tags":["react","react reconciliation"],"fields":{"slug":"/post/web/react/reconciliation/"}},{"title":"XSS 与 CSRF 的攻防","createdAt":"2021-08-19","tags":["web","web security","csrf"],"fields":{"slug":"/post/web/security/xss-csrf/"}},{"title":"二分图","createdAt":"2016-07-17","tags":["算法","图论","二分图","学习笔记"],"fields":{"slug":"/post/algorithm/graph/bipartite-graph/"}},{"title":"最长回文子串 Manacher 算法","createdAt":"2016-04-18","tags":["算法","字符串","回文串","manacher"],"fields":{"slug":"/post/algorithm/string/manacher/"}},{"title":"树链剖分","createdAt":"2016-04-23","tags":["acm","算法","树链剖分"],"fields":{"slug":"/post/algorithm/tree/tcs/"}},{"title":"伸展树专题","createdAt":"2016-07-03","tags":["acm","Splay","解题报告","专题训练"],"fields":{"slug":"/post/data-structure/bbst/splay/"}},{"title":"组合游戏基础之 SG 函数和 SG 定理","createdAt":"2016-09-04","tags":["组合数学","组合游戏","SG 定理"],"fields":{"slug":"/post/math/combinatorial/SG/"}},{"title":"快速傅里叶变换和雷德算法","createdAt":"2016-04-10","tags":["acm","大数乘法","fft","快速傅里叶变换"],"fields":{"slug":"/post/math/number-theory/fft/"}},{"title":"数论基础之筛法","createdAt":"2016-05-06","tags":["math","数论","素数","欧拉函数","线性筛"],"fields":{"slug":"/post/math/number-theory/sieve/"}},{"title":"数论基础之原根","createdAt":"2016-05-16","tags":["math","数论","原根"],"fields":{"slug":"/post/math/number-theory/原根/"}},{"title":"数论基础之欧拉函数","createdAt":"2016-05-10","tags":["math","数论","既约剩余系","欧拉函数"],"fields":{"slug":"/post/math/number-theory/欧拉函数/"}},{"title":"约瑟夫环问题","createdAt":"2021-07-16","tags":["quiz","经典问题","约瑟夫环"],"fields":{"slug":"/post/quiz/classical/Josephus-ring/"}},{"title":"扔鸡蛋问题","createdAt":"2021-06-20","tags":["quiz","动态规划"],"fields":{"slug":"/post/quiz/dp/egg-drop/"}},{"title":"在 excel 中启用正则表达式","createdAt":"2021-03-29","tags":["excel","tools"],"fields":{"slug":"/post/tool/excel/regex/"}},{"title":"百度之星 2016 解题报告","createdAt":"2016-06-03","tags":["acm","递推","状态压缩","动态规划","字典树","解题报告"],"fields":{"slug":"/post/acm/contest/baiduzhixing/2016/"}},{"title":"51nod-1462 数据结构 -- 解题报告","createdAt":"2016-04-23","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/51nod/1462/"}},{"title":"HDU-5306 Gorgeous Sequence 解题报告","createdAt":"2016-04-09","tags":["acm","数据结构","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5306/"}},{"title":"HDU-5574 Colorful Tree 解题报告（原 2015-上海区域赛-C）","createdAt":"2016-04-12","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5574/"}},{"title":"HDU-5576 Expection of String 解题报告（原 2015-上海区域赛-E)","createdAt":"2016-04-24","tags":["acm","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5576/"}},{"title":"剑指offer 解题报告","createdAt":"2021-07-15","tags":["专题训练","解题报告"],"fields":{"slug":"/post/acm/oj/nowcoder/jz-offer/"}},{"title":"POJ-1324 Holedox Moving 解题报告","createdAt":"2016-04-13","tags":["acm","bfs","图论","状态压缩","解题报告"],"fields":{"slug":"/post/acm/oj/poj/1324/"}},{"title":"网络流 24 题","createdAt":"2016-07-30","tags":["acm","算法","图论","网络流","二分图","解题报告","专题训练"],"fields":{"slug":"/post/algorithm/graph/network-flow/24-problems/"}},{"title":"网络流基础之最大权闭合图","createdAt":"2016-07-24","tags":["算法","图论","网络流","最大权闭合图"],"fields":{"slug":"/post/algorithm/graph/network-flow/最大权闭合图/"}},{"title":"Dijkstra 算法","createdAt":"2021-05-29","tags":["算法","最短路","单源最短路","dijkstra"],"fields":{"slug":"/post/algorithm/graph/shortest-path/dijkstra/"}},{"title":"Custom React Hooks","createdAt":"2020-10-29","tags":["react","react hooks"],"fields":{"slug":"/post/web/react/hooks/custom/"}},{"title":"2016 多校第 2 场","createdAt":"2016-07-22","tags":["acm","训练赛","数据结构","解题报告"],"fields":{"slug":"/post/acm/contest/multi-university-training/2016/2/"}},{"title":"CCF 2015-09 最佳文章 解题报告","createdAt":"2016-06-26","tags":["acm","Aho-Corasick 自动机","矩阵快速幂","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/ccf/2015/09/E/"}},{"title":"数论基础之模方程初步","createdAt":"2016-05-04","tags":["math","数论","扩展欧几里得算法","中国剩余定理","Baby Step Gaint Step"],"fields":{"slug":"/post/math/number-theory/模方程/basic/"}}]}},"pageContext":{"id":"d2fdc696-bc99-5e87-97a6-67c2ff914dc3","contentType":"post","paginationUrl":"/posts","previousPostId":"fd25419c-3328-525a-aa06-a60376789227","nextPostId":"3f476876-2c59-5f5d-bc07-b0a16795ef72"}},"staticQueryHashes":[],"slicesMap":{}}