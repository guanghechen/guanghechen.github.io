{"componentChunkName":"component---src-layout-post-post-tsx","path":"/post/web/javascript/inherit/","result":{"data":{"content":{"title":"Javascript 踩坑记——继承和原型链","description":"Javascript 踩坑记——继承和原型链","createdAt":"September 05, 2021","updatedAt":null,"timeToRead":"6min 42s","frontmatter2":{"aplayer":null,"wechatThumbnail":null},"toc":{"children":[{"depth":2,"identifier":"heading-前言","contents":[{"type":"text","value":"前言"}],"children":[]},{"depth":2,"identifier":"heading-原型链","contents":[{"type":"text","value":"原型链"}],"children":[]},{"depth":2,"identifier":"heading-继承","contents":[{"type":"text","value":"继承"}],"children":[]},{"depth":2,"identifier":"heading-创建对象","contents":[{"type":"text","value":"创建对象"}],"children":[]},{"depth":2,"identifier":"heading-related","contents":[{"type":"text","value":"Related"}],"children":[]}]},"categories":[],"tags":["studynote","javascript","ecmascript"],"ast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"前言"}],"identifier":"heading-前言"},{"type":"paragraph","children":[{"type":"text","value":"和其它面向对象的语言不同——继承只存在于两个不同的类之间——，Javascript 没有真正的类的概念。它采用一种原型链的机制，通过原型对象的连接关系来表达继承：通过某个属性（"},{"type":"inlineCode","value":"__proto__"},{"type":"text","value":"）将原型对象连接成树形结构，则所谓的继承即为该树中节点与其祖先节点的血缘关系。在访问某个对象的属性时，会顺着原型对象树往上寻找目标属性，并返回第一个含有此属性的节点的对应属性值。这种继承策略带来的副产品是，可以轻易地通过修改原型对象上的属性使得所有继承它的对象都拥有此新增属性"},{"type":"footnoteReference","identifier":"footnote-1","label":"1"},{"type":"text","value":"。"}]},{"type":"admonition","keyword":"warning","title":[],"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"__proto__"},{"type":"text","value":" 虽然被纳入了 ECMA 标准中，但目前它是不被推荐使用的，请使用\n"},{"type":"linkReference","identifier":"reflect.getprototypeof","label":"Reflect.getPrototypeOf","referenceType":"full","children":[{"type":"text","value":"Reflect.getPrototypeOf()"}]},{"type":"text","value":" 和 "},{"type":"linkReference","identifier":"reflect.setprototypeof","label":"Reflect.setPrototypeOf","referenceType":"full","children":[{"type":"text","value":"Reflect.setPrototypeOf()"}]},{"type":"text","value":"\n代替。"}]},{"type":"paragraph","children":[{"type":"text","value":"出于方便叙述考虑，本文仍采用 "},{"type":"inlineCode","value":"__proto__"},{"type":"text","value":" 进行演示。"}]}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"原型链"}],"identifier":"heading-原型链"},{"type":"paragraph","children":[{"type":"text","value":"在 ES6 标准里，所有的对象都有两个内置属性 "},{"type":"inlineCode","value":"constructor"},{"type":"text","value":" 和 "},{"type":"inlineCode","value":"__proto__"},{"type":"text","value":"，其中："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"inlineCode","value":"constructor"},{"type":"text","value":": 指向创建它的构造函数。"}]},{"type":"listItem","children":[{"type":"inlineCode","value":"__proto__"},{"type":"text","value":": 指向创建它的构造函数的原型对象。"}]}]},{"type":"paragraph","children":[{"type":"text","value":"构造函数还有一个内置属性 "},{"type":"inlineCode","value":"prototype"},{"type":"text","value":" 指向它的原型对象；而构造函数的原型对象的\n"},{"type":"inlineCode","value":"constructor"},{"type":"text","value":" 又指向此构造函数。有点绕，可以看下面的代码示例"},{"type":"footnoteReference","identifier":"footnote-2","label":"2"},{"type":"text","value":"："}]},{"type":"code","lang":"javascript","meta":"{12} title=\"demo1.ts\" linenos","value":"function Person(name) {\n  this.name = name\n}\n\nconst alice = new Person('Alice')\n\nalice.constructor === Person // => true\nalice.__proto__ === Person.prototype // => true\n\nPerson.constructor === Function // => true\nPerson.__proto__ === Function.prototype // => true\nPerson.prototype.constructor === Person // => true\n"},{"type":"heading","depth":2,"children":[{"type":"text","value":"继承"}],"identifier":"heading-继承"},{"type":"paragraph","children":[{"type":"text","value":"前面提到过，Javascript 通过原型对象的连接关系来表达继承，因此我们可以修改连接关系来实现继承。比如下面的代码中，想让 "},{"type":"inlineCode","value":"Student"},{"type":"text","value":" 继承自 "},{"type":"inlineCode","value":"Person"},{"type":"text","value":"，只需要将\n"},{"type":"inlineCode","value":"Student"},{"type":"text","value":" 的原型对象的 "},{"type":"inlineCode","value":"__proto__"},{"type":"text","value":" 指向 "},{"type":"inlineCode","value":"Person"},{"type":"text","value":" 的原型对象就好了（仅用于演示，请不要投入到生产中）："}]},{"type":"code","lang":"javascript","meta":"{11,15} title=\"demo2.ts\" linenos","value":"function Person(name) { this.name = name }\nPerson.prototype.great = function () {\n  return `Hello, ${this.name}!`\n}\n\nfunction Student(grade) { this.grade = grade }\nStudent.prototype.showGrade = function () {\n  return `Grade: ${this.grade}`\n}\n\nStudent.prototype.__proto__ = Person.prototype\n\nconst alice = new Student(2)\nalice instanceof Student // => true\nalice instanceof Person // => true\n\nalice.great() // => 'Hello, undefined!'\nalice.name = 'Alice'\nalice.showGrade() // => 'Grade: 2'\nalice.great() // => 'Hello, Alice!'\n"},{"type":"admonition","keyword":"warning","title":[],"children":[{"type":"paragraph","children":[{"type":"text","value":"上面的修改看起来很直观，但直接操作 "},{"type":"inlineCode","value":"__proto__"},{"type":"text","value":" 是不被推荐的，你可以使用\n"},{"type":"linkReference","identifier":"reflect.setprototypeof","label":"Reflect.setPrototypeOf","referenceType":"full","children":[{"type":"text","value":"Reflect.setPrototypeOf()"}]},{"type":"text","value":" 来做修改。"}]}]},{"type":"thematicBreak"},{"type":"paragraph","children":[{"type":"text","value":"此外，原型对象之间的连接还可以通过 "},{"type":"inlineCode","value":"constructor"},{"type":"text","value":" 和 "},{"type":"inlineCode","value":"constructor.prototype"},{"type":"text","value":" 来表达，（前文提到过，对象的 "},{"type":"inlineCode","value":"constructor"},{"type":"text","value":" 指向其构造函数）如最开始的例子中："}]},{"type":"code","lang":"javascript","meta":null,"value":"alice.__proto__ === Student.prototype // => true\nStudent.__proto__ === Person.prototype // => true\nPerson.__proto__ === Function.prototype // => true\n"},{"type":"paragraph","children":[{"type":"text","value":"等价于："}]},{"type":"code","lang":"javascript","meta":null,"value":"alice.constructor.prototype === Person.prototype // => true\nPerson.constructor.prototype === Function.prototype // => true\n"},{"type":"paragraph","children":[{"type":"text","value":"因此我们可以利用 "},{"type":"inlineCode","value":"Object.create"},{"type":"text","value":" 来创建一个以 "},{"type":"inlineCode","value":"Person.prototype"},{"type":"text","value":" 为原型对象的对象，然后将 "},{"type":"inlineCode","value":"Student.prototype"},{"type":"text","value":" 指向此对象："}]},{"type":"code","lang":"javascript","meta":"{3-6} title=\"inherit.ts\" linenos","value":"function inherit(Child, Parent) {\n  const prototype = Object.create(Parent.prototype)\n  for (const key of Object.getOwnPropertyNames(Child.prototype)) {\n    if (prototype.hasOwnProperty(key)) continue\n    prototype[key] = Child.prototype[key]\n  }\n  prototype.constructor = Child\n  Child.prototype = prototype\n}\n"},{"type":"admonition","keyword":"tip","title":[],"children":[{"type":"paragraph","children":[{"type":"text","value":"注意上面代码高亮部分，将 "},{"type":"inlineCode","value":"Child.prototype"},{"type":"text","value":" 的值复制到了新的原型对象中，否则调用此继承函数后，原先定义在 "},{"type":"inlineCode","value":"Child.prototype"},{"type":"text","value":" 上的属性会丢失。"}]}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"创建对象"}],"identifier":"heading-创建对象"},{"type":"paragraph","children":[{"type":"text","value":"在 "},{"type":"inlineCode","value":"Javascript"},{"type":"text","value":" 中创建对象有多种方式："}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"new"},{"type":"text","value":": "},{"type":"inlineCode","value":"new Person()"},{"type":"text","value":" 创建并返回一个以 "},{"type":"inlineCode","value":"Person.constructor"},{"type":"text","value":" 作为原型对象的对象，因此返回的对象继承自 "},{"type":"inlineCode","value":"Person"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"Object.create"},{"type":"text","value":": "},{"type":"inlineCode","value":"Object.create(__proto__)"},{"type":"text","value":": 接受一个对象 "},{"type":"inlineCode","value":"__proto__"},{"type":"text","value":"，创建并返回一个以此对象作为原型对象的对象，因此使用 "},{"type":"inlineCode","value":"Object.create(null)"},{"type":"text","value":" 可以创建一个不继承自任何对象的对象。"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"const alice = { name: 'alice' }"},{"type":"text","value":": 等价于 "},{"type":"inlineCode","value":"const alice = new Object({ name: 'alice' })"}]}]}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"Related"}],"identifier":"heading-related"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"linkReference","identifier":"reflect.getprototypeof","label":"Reflect.getPrototypeOf","referenceType":"full","children":[{"type":"text","value":"Reflect.getPrototypeOf() | MDN"}]}]},{"type":"listItem","children":[{"type":"linkReference","identifier":"reflect.setprototypeof","label":"Reflect.setPrototypeOf","referenceType":"full","children":[{"type":"text","value":"Reflect.setPrototypeOf() | MDN"}]}]},{"type":"listItem","children":[{"type":"link","url":"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance","children":[{"type":"text","value":"Inheritance in JavaScript | MDN"}]}]},{"type":"listItem","children":[{"type":"link","url":"https://stackoverflow.com/questions/12201082/prototypal-inheritance-concept-in-javascript-as-a-prototype-based-language","children":[{"type":"text","value":"prototypal inheritance concept in javascript as a prototype based language | Stack Overflow"}]}]},{"type":"listItem","children":[{"type":"link","url":"https://stackoverflow.com/questions/4166616/understanding-the-difference-between-object-create-and-new-somefunction","children":[{"type":"text","value":"Understanding the difference between Object.create() and new SomeFunction() | Stack Overflow"}]}]}]}]},"ecmaImports":[],"definitionMap":{"reflect.getprototypeof":{"type":"definition","identifier":"reflect.getprototypeof","label":"Reflect.getPrototypeOf","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getPrototypeOf"},"reflect.setprototypeof":{"type":"definition","identifier":"reflect.setprototypeof","label":"Reflect.setPrototypeOf","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/setPrototypeOf"}},"footnoteDefinitionMap":{"footnote-1":{"type":"footnoteDefinition","identifier":"footnote-1","label":"1","children":[{"type":"paragraph","children":[{"type":"text","value":"其它面向对象的语言不得不修改类的实现才能获得此能力。"}]}]},"footnote-2":{"type":"footnoteDefinition","identifier":"footnote-2","label":"2","children":[{"type":"paragraph","children":[{"type":"text","value":"需要注意的是，构造函数如果返回一个对象，则此对象的 "},{"type":"inlineCode","value":"__proto__"},{"type":"text","value":" 将指向\n"},{"type":"inlineCode","value":"Object.prototype"},{"type":"text","value":"，如："}]},{"type":"code","lang":"javascript","meta":"{3}","value":"function Person(name) {\n  this.name = name\n  return { name }\n}\n\nconst alice = Person('alice')\nalice.constructor === Object // => true\nalice.__proto__ === Object.prototype // => true\n"}]},"footnote-3":{"type":"footnoteDefinition","identifier":"footnote-3","label":"3","children":[{"type":"paragraph","children":[{"type":"text","value":"Javascript 访问属性时，会沿着继承链往上找，所以即便是一个空对象，还是能够访问其祖先节点上定义的属性的。"}]}]}},"fields":{"slug":"/post/web/javascript/inherit/"}},"previous":{"title":"防抖和节流","fields":{"slug":"/post/algorithm/debounce-and-throttle/"}},"next":null,"postItems":{"nodes":[{"title":"Custom React Hooks","createdAt":"2020-10-30","tags":["react","react hooks"],"fields":{"slug":"/post/web/react/hooks/custom/"}},{"title":"React Reconciliation","createdAt":"2021-06-27","tags":["react","react reconciliation"],"fields":{"slug":"/post/web/react/reconciliation/"}},{"title":"ECMA 2020 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2020/"}},{"title":"XSS 与 CSRF 的攻防","createdAt":"2021-08-19","tags":["web","web security","csrf"],"fields":{"slug":"/post/web/security/xss-csrf/"}},{"title":"Javascript 踩坑记——继承和原型链","createdAt":"2021-09-05","tags":["studynote","javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/inherit/"}},{"title":"CSS 选择器","createdAt":"2020-11-02","tags":["web","frontend","css"],"fields":{"slug":"/post/web/css/selector/"}},{"title":"ECMA 2021 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2021/"}},{"title":"在 excel 中启用正则表达式","createdAt":"2021-03-30","tags":["excel","tools"],"fields":{"slug":"/post/tool/excel/regex/"}},{"title":"统计区间内的线段","createdAt":"2021-07-21","tags":["quiz","扫描线","前缀和","树状数组","线段树"],"fields":{"slug":"/post/quiz/scanning-line/segments/"}},{"title":"约瑟夫环问题","createdAt":"2021-07-17","tags":["quiz","经典问题","约瑟夫环"],"fields":{"slug":"/post/quiz/classical/Josephus-ring/"}},{"title":"端口管理","createdAt":"2021-06-20","tags":["network","port","ssh","netstat"],"fields":{"slug":"/post/network/端口管理/"}},{"title":"数论基础之欧拉函数","createdAt":"2016-05-10","tags":["math","数论","既约剩余系","欧拉函数"],"fields":{"slug":"/post/math/number-theory/欧拉函数/"}},{"title":"扔鸡蛋问题","createdAt":"2021-06-20","tags":["quiz","动态规划"],"fields":{"slug":"/post/quiz/dp/egg-drop/"}},{"title":"数论基础之模方程初步","createdAt":"2016-05-04","tags":["math","数论","扩展欧几里得算法","中国剩余定理","Baby Step Gaint Step"],"fields":{"slug":"/post/math/number-theory/模方程/basic/"}},{"title":"不修改数组找出重复的数字","createdAt":"2021-06-29","tags":["quiz","分治","追击"],"fields":{"slug":"/post/quiz/partition/find-duplicate-number/"}},{"title":"数论基础之原根","createdAt":"2016-05-16","tags":["math","数论","原根"],"fields":{"slug":"/post/math/number-theory/原根/"}},{"title":"快速傅里叶变换和雷德算法","createdAt":"2016-04-10","tags":["acm","大数乘法","fft","快速傅里叶变换"],"fields":{"slug":"/post/math/number-theory/fft/"}},{"title":"小球放盒模型","createdAt":"2016-04-22","tags":["math","组合数学"],"fields":{"slug":"/post/math/combinatorial/小球放盒模型/"}},{"title":"组合游戏基础之 SG 函数和 SG 定理","createdAt":"2016-09-04","tags":["组合数学","组合游戏","SG 定理"],"fields":{"slug":"/post/math/combinatorial/SG/"}},{"title":"数论基础之筛法","createdAt":"2016-05-06","tags":["math","数论","素数","欧拉函数","线性筛"],"fields":{"slug":"/post/math/number-theory/sieve/"}},{"title":"函数的极限","createdAt":"2021-05-09","tags":["math","函数","极限"],"fields":{"slug":"/post/math/calculus/函数的极限/"}},{"title":"当你想来一把数独","createdAt":"2021-08-01","tags":["game","sudoku"],"fields":{"slug":"/post/game/sudoku/"}},{"title":"编译原理-语法制导翻译实现计算器","createdAt":"2016-06-23","tags":["编译原理","语法制导翻译","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/exercise/"}},{"title":"编译原理-语法分析","createdAt":"2016-06-18","tags":["编译原理","语法分析","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/grammar/"}},{"title":"伸展树专题","createdAt":"2016-07-03","tags":["acm","Splay","解题报告","专题训练"],"fields":{"slug":"/post/data-structure/bbst/splay/"}},{"title":"洗牌问题和 knuth-shuffle 算法","createdAt":"2021-07-22","tags":["shuffle","knuth-shuffle","约瑟夫环"],"fields":{"slug":"/post/algorithm/shuffle/"}},{"title":"自然对数底数e","createdAt":"2021-08-07","tags":["math","函数","极限","自然对数"],"fields":{"slug":"/post/math/calculus/自然对数底数e/"}},{"title":"树链剖分","createdAt":"2016-04-23","tags":["acm","算法","树链剖分"],"fields":{"slug":"/post/algorithm/tree/tcs/"}},{"title":"最长上升子序列（LIS）","createdAt":"2021-06-02","tags":["最长上升子序列","LIS"],"fields":{"slug":"/post/algorithm/lis/"}},{"title":"最长回文子串 Manacher 算法","createdAt":"2016-04-18","tags":["算法","字符串","回文串","manacher"],"fields":{"slug":"/post/algorithm/string/manacher/"}},{"title":"最长公共子序列（LCS）","createdAt":"2021-06-02","tags":["最长公共子序列","LCS"],"fields":{"slug":"/post/algorithm/lcs/"}},{"title":"背包九讲","createdAt":"2021-06-27","tags":["acm","算法","动态规划","背包问题"],"fields":{"slug":"/post/algorithm/knapsack/"}},{"title":"Dijkstra 算法","createdAt":"2021-05-29","tags":["算法","最短路","单源最短路","dijkstra"],"fields":{"slug":"/post/algorithm/graph/shortest-path/dijkstra/"}},{"title":"二分图","createdAt":"2016-07-17","tags":["算法","图论","二分图","学习笔记"],"fields":{"slug":"/post/algorithm/graph/bipartite-graph/"}},{"title":"防抖和节流","createdAt":"2021-09-03","tags":["coding","debounce","throttle"],"fields":{"slug":"/post/algorithm/debounce-and-throttle/"}},{"title":"精确覆盖问题和 DLX 算法","createdAt":"2021-07-24","tags":["算法","精确覆盖","DLX 算法"],"fields":{"slug":"/post/algorithm/dlx/"}},{"title":"POJ-1324 Holedox Moving 解题报告","createdAt":"2016-04-13","tags":["acm","bfs","图论","状态压缩","解题报告"],"fields":{"slug":"/post/acm/oj/poj/1324/"}},{"title":"网络流 24 题","createdAt":"2016-07-30","tags":["acm","算法","图论","网络流","二分图","解题报告","专题训练"],"fields":{"slug":"/post/algorithm/graph/network-flow/24-problems/"}},{"title":"网络流基础之最大权闭合图","createdAt":"2016-07-24","tags":["算法","图论","网络流","最大权闭合图"],"fields":{"slug":"/post/algorithm/graph/network-flow/最大权闭合图/"}},{"title":"HDU-5576 Expection of String 解题报告（原 2015-上海区域赛-E)","createdAt":"2016-04-24","tags":["acm","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5576/"}},{"title":"剑指offer 解题报告","createdAt":"2021-07-15","tags":["专题训练","解题报告"],"fields":{"slug":"/post/acm/oj/nowcoder/jz-offer/"}},{"title":"2016 多校第 2 场","createdAt":"2016-07-22","tags":["acm","训练赛","数据结构","解题报告"],"fields":{"slug":"/post/acm/contest/multi-university-training/2016/2/"}},{"title":"HDU-5306 Gorgeous Sequence 解题报告","createdAt":"2016-04-09","tags":["acm","数据结构","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5306/"}},{"title":"51nod-1462 数据结构 -- 解题报告","createdAt":"2016-04-23","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/51nod/1462/"}},{"title":"百度之星 2016 解题报告","createdAt":"2016-06-03","tags":["acm","递推","状态压缩","动态规划","字典树","解题报告"],"fields":{"slug":"/post/acm/contest/baiduzhixing/2016/"}},{"title":"CCF 2015-09 最佳文章 解题报告","createdAt":"2016-06-26","tags":["acm","Aho-Corasick 自动机","矩阵快速幂","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/ccf/2015/09/E/"}},{"title":"HDU-5574 Colorful Tree 解题报告（原 2015-上海区域赛-C）","createdAt":"2016-04-12","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5574/"}}]}},"pageContext":{"id":"ce72bc50-aa6f-5e1b-a623-08b39b23edb3","contentType":"post","paginationUrl":"/posts","previousPostId":"7f18c6b8-e277-5578-900b-9873401d2ffe","nextPostId":null}},"staticQueryHashes":[],"slicesMap":{}}