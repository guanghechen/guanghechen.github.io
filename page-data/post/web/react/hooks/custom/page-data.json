{"componentChunkName":"component---src-layout-post-post-tsx","path":"/post/web/react/hooks/custom/","result":{"data":{"content":{"title":"Custom React Hooks","description":"Custom React Hooks","createdAt":"October 30, 2020","updatedAt":null,"timeToRead":"1min 13s","frontmatter2":{"aplayer":null,"wechatThumbnail":null},"toc":{"children":[{"depth":2,"identifier":"heading-usedeepcomparecallback","contents":[{"type":"text","value":"useDeepCompareCallback"}],"children":[]},{"depth":2,"identifier":"heading-usedeepcompareeffect","contents":[{"type":"text","value":"useDeepCompareEffect"}],"children":[]},{"depth":2,"identifier":"heading-usedeepcomparememo","contents":[{"type":"text","value":"useDeepCompareMemo"}],"children":[]},{"depth":2,"identifier":"heading-useinterval","contents":[{"type":"text","value":"useInterval"}],"children":[]},{"depth":2,"identifier":"heading-usepreviousstate","contents":[{"type":"text","value":"usePreviousState"}],"children":[]},{"depth":2,"identifier":"heading-usereactiveref","contents":[{"type":"text","value":"useReactiveRef"}],"children":[{"depth":3,"identifier":"heading-example","contents":[{"type":"text","value":"Example"}],"children":[]}]},{"depth":2,"identifier":"heading-related","contents":[{"type":"text","value":"Related"}],"children":[]}]},"categories":[],"tags":["react","react hooks"],"ast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"useDeepCompareCallback"}],"identifier":"heading-usedeepcomparecallback"},{"type":"paragraph","children":[{"type":"text","value":"Deep compare version of "},{"type":"inlineCode","value":"React.useCallback"}]},{"type":"code","lang":"tsx","meta":"title=\"useDeepCompareCallback.ts\" sourcefile=\"./useDeepCompareCallback.ts\" collapsed linenos","value":"import isEqual from '@guanghechen/fast-deep-equal'\nimport type React from 'react'\nimport { useCallback, useRef } from 'react'\n\n/**\n * Deep compare version of React.useCallback\n * @param fn\n * @param deps\n */\nexport function useDeepCompareCallback<T extends (...args: any[]) => any>(\n  fn: T,\n  deps: React.DependencyList,\n): T {\n  const signal = useRef<number>(0)\n  const prevDeps = useRef<React.DependencyList>(deps)\n\n  if (!isEqual(prevDeps.current, deps)) {\n    signal.current += 1\n  }\n  prevDeps.current = deps\n\n  return useCallback(fn, [signal.current])\n}\n"},{"type":"heading","depth":2,"children":[{"type":"text","value":"useDeepCompareEffect"}],"identifier":"heading-usedeepcompareeffect"},{"type":"paragraph","children":[{"type":"text","value":"Deep compare version of "},{"type":"inlineCode","value":"React.useEffect"}]},{"type":"code","lang":"tsx","meta":"title=\"useDeepCompareEffect.ts\" sourcefile=\"./useDeepCompareEffect.ts\" collapsed linenos","value":"import isEqual from '@guanghechen/fast-deep-equal'\nimport type React from 'react'\nimport { useEffect, useRef } from 'react'\n\n/**\n * Deep compare version of React.useEffect\n * @param fn\n * @param deps\n */\nexport function useDeepCompareEffect(fn: React.EffectCallback, deps: React.DependencyList): void {\n  const signal = useRef<number>(0)\n  const prevDeps = useRef<React.DependencyList>(deps)\n\n  if (!isEqual(prevDeps.current, deps)) {\n    signal.current += 1\n  }\n  prevDeps.current = deps\n\n  useEffect(fn, [signal.current])\n}\n"},{"type":"heading","depth":2,"children":[{"type":"text","value":"useDeepCompareMemo"}],"identifier":"heading-usedeepcomparememo"},{"type":"paragraph","children":[{"type":"text","value":"Deep compare version of "},{"type":"inlineCode","value":"React.useMemo"}]},{"type":"code","lang":"tsx","meta":"title=\"useDeepCompareMemo.ts\" sourcefile=\"./useDeepCompareMemo.ts\" collapsed linenos","value":"import isEqual from '@guanghechen/fast-deep-equal'\nimport type React from 'react'\nimport { useMemo, useRef } from 'react'\n\n/**\n * Deep compare version of React.useMemo\n * @param fn\n * @param deps\n */\nexport function useDeepCompareMemo<T>(fn: () => T, deps: React.DependencyList): T {\n  const signal = useRef<number>(0)\n  const prevDeps = useRef<React.DependencyList>(deps)\n\n  if (!isEqual(prevDeps.current, deps)) {\n    signal.current += 1\n  }\n  prevDeps.current = deps\n\n  return useMemo(fn, [signal.current])\n}\n"},{"type":"heading","depth":2,"children":[{"type":"text","value":"useInterval"}],"identifier":"heading-useinterval"},{"type":"paragraph","children":[{"type":"text","value":"Execute callback interval in react function components."}]},{"type":"code","lang":"tsx","meta":"title=\"userInterval.ts\" sourcefile=\"./useInterval.ts\" collapsed linenos","value":"import { useEffect, useRef } from 'react'\n\ntype Callback = () => void\n\n/**\n * Execute callback interval in react function components.\n * @param callback\n * @param delay\n */\nexport function useInterval(callback: Callback, delay: number): void {\n  const callbackRef = useRef<Callback>(callback)\n\n  useEffect(() => {\n    callbackRef.current = callback\n  }, [callback])\n\n  useEffect(() => {\n    const tick: Callback = () => {\n      if (callbackRef.current === undefined) return\n      callbackRef.current()\n    }\n    const id = setInterval(tick, delay)\n    return () => clearInterval(id)\n  }, [delay])\n}\n"},{"type":"heading","depth":2,"children":[{"type":"text","value":"usePreviousState"}],"identifier":"heading-usepreviousstate"},{"type":"paragraph","children":[{"type":"text","value":"记录上一个状态。"}]},{"type":"paragraph","children":[{"type":"text","value":"利用更新 "},{"type":"inlineCode","value":"ref.current"},{"type":"text","value":" 的值不会触发组件更新的特性，在 "},{"type":"inlineCode","value":"usePreviousState"},{"type":"text","value":" 中总是返回旧的值，尽管在 "},{"type":"inlineCode","value":"userPreviousState"},{"type":"text","value":" 的 "},{"type":"inlineCode","value":"useEffect"},{"type":"text","value":" 中更新了新值，但并不触发更新。"}]},{"type":"code","lang":"tsx","meta":"title=\"usePreviousState.ts\" sourcefile=\"./usePreviousState.ts\" collapsed linenos","value":"import { useEffect, useRef } from 'react'\n\n/**\n * Use previous state.\n * @param value\n * @returns\n */\nexport function usePreviousState<T extends unknown = any>(value: T): T {\n  const ref = useRef<T>(value)\n  useEffect(() => {\n    ref.current = value\n  }, [value])\n  return ref.current\n}\n"},{"type":"heading","depth":2,"children":[{"type":"text","value":"useReactiveRef"}],"identifier":"heading-usereactiveref"},{"type":"code","lang":"tsx","meta":"title=\"useReactiveRef.ts\" sourcefile=\"./useReactiveRef.ts\" collapsed linenos","value":"import type React from 'react'\nimport { useEffect, useRef } from 'react'\n\n/**\n * Create a reactive ref which will follow the changes of the given data.\n * @param data\n * @returns\n */\nexport function useReactiveRef<T>(data: T): React.MutableRefObject<T> {\n  const ref = useRef(data)\n  useEffect(() => {\n    ref.current = data\n  }, [data])\n  return ref\n}\n"},{"type":"html","value":"<!-- more -->\n"},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example"}],"identifier":"heading-example"},{"type":"code","lang":"jsx","meta":"live renderMode=\"block\" title=\"demo/usePreviousState.jsx\" maxlines=\"15\" linenos","value":"const { useEffect, useState, useRef } = React\n\nconst Container = styled.div`\n  padding: 1rem;\n\n  div {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    text-align: center;\n    min-width: 8rem;\n\n    button {\n      flex: 0 0 auto;\n      user-select: none;\n    }\n\n    span {\n      flex: 1 1 3rem;\n      color: #e37878;\n    }\n  }\n\n  h2 {\n    padding-top: 1rem;\n    border-top: 1px solid #ccc;\n    margin: 1rem auto 0;\n    text-align: center;\n  }\n`\n\nfunction usePreviousState(value, defaultValue) {\n  const ref = useRef(defaultValue)\n\n  useEffect(() => {\n    ref.current = value\n  }, [value])\n\n  console.log('[usePreviousState] value: ', value, 'current:', ref.current)\n  return ref.current\n}\n\nfunction Component() {\n  const [count, setCount] = useState(0)\n  const prevCount = usePreviousState(count, -1)\n\n  return (\n    <Container>\n      <div>\n        <button onClick={ () => setCount(c => c - 1) }>-</button>\n        <span>{ count }</span>\n        <button onClick={ () => setCount(c => c + 1) }>+</button>\n      </div>\n      <h2>before: {prevCount} </h2>\n    </Container>\n  )\n}\n\nrender(<Component />)\n"},{"type":"heading","depth":2,"children":[{"type":"text","value":"Related"}],"identifier":"heading-related"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"link","url":"https://overreacted.io/making-setinterval-declarative-with-react-hooks/","children":[{"type":"text","value":"Making setInterval Declarative with React Hooks"}]}]},{"type":"listItem","children":[{"type":"link","url":"https://github.com/guanghechen/node-scaffolds/tree/main/packages/react-hooks","children":[{"type":"text","value":"@guanghechen/react-hooks"}]}]}]}]},"ecmaImports":[],"definitionMap":{},"footnoteDefinitionMap":{},"fields":{"slug":"/post/web/react/hooks/custom/"}},"previous":{"title":"组合游戏基础之 SG 函数和 SG 定理","fields":{"slug":"/post/math/combinatorial/SG/"}},"next":{"title":"CSS 选择器","fields":{"slug":"/post/web/css/selector/"}},"postItems":{"nodes":[{"title":"Custom React Hooks","createdAt":"2020-10-30","tags":["react","react hooks"],"fields":{"slug":"/post/web/react/hooks/custom/"}},{"title":"React Reconciliation","createdAt":"2021-06-27","tags":["react","react reconciliation"],"fields":{"slug":"/post/web/react/reconciliation/"}},{"title":"ECMA 2020 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2020/"}},{"title":"XSS 与 CSRF 的攻防","createdAt":"2021-08-19","tags":["web","web security","csrf"],"fields":{"slug":"/post/web/security/xss-csrf/"}},{"title":"Javascript 踩坑记——继承和原型链","createdAt":"2021-09-05","tags":["studynote","javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/inherit/"}},{"title":"CSS 选择器","createdAt":"2020-11-02","tags":["web","frontend","css"],"fields":{"slug":"/post/web/css/selector/"}},{"title":"ECMA 2021 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2021/"}},{"title":"在 excel 中启用正则表达式","createdAt":"2021-03-30","tags":["excel","tools"],"fields":{"slug":"/post/tool/excel/regex/"}},{"title":"统计区间内的线段","createdAt":"2021-07-21","tags":["quiz","扫描线","前缀和","树状数组","线段树"],"fields":{"slug":"/post/quiz/scanning-line/segments/"}},{"title":"约瑟夫环问题","createdAt":"2021-07-17","tags":["quiz","经典问题","约瑟夫环"],"fields":{"slug":"/post/quiz/classical/Josephus-ring/"}},{"title":"端口管理","createdAt":"2021-06-20","tags":["network","port","ssh","netstat"],"fields":{"slug":"/post/network/端口管理/"}},{"title":"数论基础之欧拉函数","createdAt":"2016-05-10","tags":["math","数论","既约剩余系","欧拉函数"],"fields":{"slug":"/post/math/number-theory/欧拉函数/"}},{"title":"扔鸡蛋问题","createdAt":"2021-06-20","tags":["quiz","动态规划"],"fields":{"slug":"/post/quiz/dp/egg-drop/"}},{"title":"数论基础之模方程初步","createdAt":"2016-05-04","tags":["math","数论","扩展欧几里得算法","中国剩余定理","Baby Step Gaint Step"],"fields":{"slug":"/post/math/number-theory/模方程/basic/"}},{"title":"不修改数组找出重复的数字","createdAt":"2021-06-29","tags":["quiz","分治","追击"],"fields":{"slug":"/post/quiz/partition/find-duplicate-number/"}},{"title":"数论基础之原根","createdAt":"2016-05-16","tags":["math","数论","原根"],"fields":{"slug":"/post/math/number-theory/原根/"}},{"title":"快速傅里叶变换和雷德算法","createdAt":"2016-04-10","tags":["acm","大数乘法","fft","快速傅里叶变换"],"fields":{"slug":"/post/math/number-theory/fft/"}},{"title":"小球放盒模型","createdAt":"2016-04-22","tags":["math","组合数学"],"fields":{"slug":"/post/math/combinatorial/小球放盒模型/"}},{"title":"组合游戏基础之 SG 函数和 SG 定理","createdAt":"2016-09-04","tags":["组合数学","组合游戏","SG 定理"],"fields":{"slug":"/post/math/combinatorial/SG/"}},{"title":"数论基础之筛法","createdAt":"2016-05-06","tags":["math","数论","素数","欧拉函数","线性筛"],"fields":{"slug":"/post/math/number-theory/sieve/"}},{"title":"函数的极限","createdAt":"2021-05-09","tags":["math","函数","极限"],"fields":{"slug":"/post/math/calculus/函数的极限/"}},{"title":"当你想来一把数独","createdAt":"2021-08-01","tags":["game","sudoku"],"fields":{"slug":"/post/game/sudoku/"}},{"title":"编译原理-语法制导翻译实现计算器","createdAt":"2016-06-23","tags":["编译原理","语法制导翻译","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/exercise/"}},{"title":"编译原理-语法分析","createdAt":"2016-06-18","tags":["编译原理","语法分析","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/grammar/"}},{"title":"伸展树专题","createdAt":"2016-07-03","tags":["acm","Splay","解题报告","专题训练"],"fields":{"slug":"/post/data-structure/bbst/splay/"}},{"title":"洗牌问题和 knuth-shuffle 算法","createdAt":"2021-07-22","tags":["shuffle","knuth-shuffle","约瑟夫环"],"fields":{"slug":"/post/algorithm/shuffle/"}},{"title":"自然对数底数e","createdAt":"2021-08-07","tags":["math","函数","极限","自然对数"],"fields":{"slug":"/post/math/calculus/自然对数底数e/"}},{"title":"树链剖分","createdAt":"2016-04-23","tags":["acm","算法","树链剖分"],"fields":{"slug":"/post/algorithm/tree/tcs/"}},{"title":"最长上升子序列（LIS）","createdAt":"2021-06-02","tags":["最长上升子序列","LIS"],"fields":{"slug":"/post/algorithm/lis/"}},{"title":"最长回文子串 Manacher 算法","createdAt":"2016-04-18","tags":["算法","字符串","回文串","manacher"],"fields":{"slug":"/post/algorithm/string/manacher/"}},{"title":"最长公共子序列（LCS）","createdAt":"2021-06-02","tags":["最长公共子序列","LCS"],"fields":{"slug":"/post/algorithm/lcs/"}},{"title":"背包九讲","createdAt":"2021-06-27","tags":["acm","算法","动态规划","背包问题"],"fields":{"slug":"/post/algorithm/knapsack/"}},{"title":"Dijkstra 算法","createdAt":"2021-05-29","tags":["算法","最短路","单源最短路","dijkstra"],"fields":{"slug":"/post/algorithm/graph/shortest-path/dijkstra/"}},{"title":"二分图","createdAt":"2016-07-17","tags":["算法","图论","二分图","学习笔记"],"fields":{"slug":"/post/algorithm/graph/bipartite-graph/"}},{"title":"防抖和节流","createdAt":"2021-09-03","tags":["coding","debounce","throttle"],"fields":{"slug":"/post/algorithm/debounce-and-throttle/"}},{"title":"精确覆盖问题和 DLX 算法","createdAt":"2021-07-24","tags":["算法","精确覆盖","DLX 算法"],"fields":{"slug":"/post/algorithm/dlx/"}},{"title":"POJ-1324 Holedox Moving 解题报告","createdAt":"2016-04-13","tags":["acm","bfs","图论","状态压缩","解题报告"],"fields":{"slug":"/post/acm/oj/poj/1324/"}},{"title":"网络流 24 题","createdAt":"2016-07-30","tags":["acm","算法","图论","网络流","二分图","解题报告","专题训练"],"fields":{"slug":"/post/algorithm/graph/network-flow/24-problems/"}},{"title":"网络流基础之最大权闭合图","createdAt":"2016-07-24","tags":["算法","图论","网络流","最大权闭合图"],"fields":{"slug":"/post/algorithm/graph/network-flow/最大权闭合图/"}},{"title":"HDU-5576 Expection of String 解题报告（原 2015-上海区域赛-E)","createdAt":"2016-04-24","tags":["acm","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5576/"}},{"title":"剑指offer 解题报告","createdAt":"2021-07-15","tags":["专题训练","解题报告"],"fields":{"slug":"/post/acm/oj/nowcoder/jz-offer/"}},{"title":"2016 多校第 2 场","createdAt":"2016-07-22","tags":["acm","训练赛","数据结构","解题报告"],"fields":{"slug":"/post/acm/contest/multi-university-training/2016/2/"}},{"title":"HDU-5306 Gorgeous Sequence 解题报告","createdAt":"2016-04-09","tags":["acm","数据结构","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5306/"}},{"title":"51nod-1462 数据结构 -- 解题报告","createdAt":"2016-04-23","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/51nod/1462/"}},{"title":"百度之星 2016 解题报告","createdAt":"2016-06-03","tags":["acm","递推","状态压缩","动态规划","字典树","解题报告"],"fields":{"slug":"/post/acm/contest/baiduzhixing/2016/"}},{"title":"CCF 2015-09 最佳文章 解题报告","createdAt":"2016-06-26","tags":["acm","Aho-Corasick 自动机","矩阵快速幂","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/ccf/2015/09/E/"}},{"title":"HDU-5574 Colorful Tree 解题报告（原 2015-上海区域赛-C）","createdAt":"2016-04-12","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5574/"}}]}},"pageContext":{"id":"be1b30f4-975a-506f-81e2-480d781b813a","contentType":"post","paginationUrl":"/posts","previousPostId":"ea356cf7-0124-541a-ad6c-42248215eaf2","nextPostId":"50616db0-268d-5fd8-9422-69f5fc3ed941"}},"staticQueryHashes":[],"slicesMap":{}}