{"componentChunkName":"component---src-layout-post-post-tsx","path":"/post/algorithm/graph/bipartite-graph/","result":{"data":{"content":{"title":"二分图","description":"二分图","createdAt":"July 17, 2016","updatedAt":null,"timeToRead":"9min 15s","frontmatter2":{"aplayer":null,"wechatThumbnail":null},"toc":{"children":[{"depth":2,"identifier":"heading-term","contents":[{"type":"text","value":"Term"}],"children":[{"depth":3,"identifier":"heading-点覆盖-vertex-covering","contents":[{"type":"text","value":"点覆盖 (vertex covering)"}],"children":[]},{"depth":3,"identifier":"heading-边覆盖-edge-covering","contents":[{"type":"text","value":"边覆盖 (edge covering)"}],"children":[]},{"depth":3,"identifier":"heading-团-clique","contents":[{"type":"text","value":"团 (clique)"}],"children":[]},{"depth":3,"identifier":"heading-独立集-independent-set","contents":[{"type":"text","value":"独立集 (independent set)"}],"children":[]},{"depth":3,"identifier":"heading-边独立集-edge-independent-set","contents":[{"type":"text","value":"边独立集 (edge independent set)"}],"children":[]},{"depth":3,"identifier":"heading-支配集-dominating-set","contents":[{"type":"text","value":"支配集 (dominating set)"}],"children":[]},{"depth":3,"identifier":"heading-边支配集-edge-dominating-set","contents":[{"type":"text","value":"边支配集 (edge dominating set)"}],"children":[]},{"depth":3,"identifier":"heading-匹配-matching","contents":[{"type":"text","value":"匹配 (matching)"}],"children":[]}]},{"depth":2,"identifier":"heading-theorem","contents":[{"type":"text","value":"Theorem"}],"children":[{"depth":3,"identifier":"heading-增广路定理","contents":[{"type":"text","value":"增广路定理"}],"children":[]},{"depth":3,"identifier":"heading-könig定理","contents":[{"type":"text","value":"König定理"}],"children":[]}]},{"depth":2,"identifier":"heading-related","contents":[{"type":"text","value":"Related"}],"children":[]}]},"categories":[],"tags":["算法","图论","二分图","学习笔记"],"ast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Term"}],"identifier":"heading-term"},{"type":"heading","depth":3,"children":[{"type":"text","value":"点覆盖 (vertex covering)"}],"identifier":"heading-点覆盖-vertex-covering"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"点覆盖"}]},{"type":"text","value":"： 一个点集，满足所有边都至少有一个端点在集合中"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"极小点覆盖"}]},{"type":"text","value":"： 本身是一个点覆盖，但任意一个真子集都不是点覆盖"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"最小点覆盖"}]},{"type":"text","value":"： 点数最少的点覆盖"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"点覆盖数"}]},{"type":"text","value":"： 最小点覆盖的点数"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"边覆盖 (edge covering)"}],"identifier":"heading-边覆盖-edge-covering"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"边覆盖"}]},{"type":"text","value":"： 一个边集，满足所有顶点都是集合中至少一条边的一个端点"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"极小边覆盖"}]},{"type":"text","value":"： 本身是一个边覆盖，但任意一个真子集都不是边覆盖"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"最小边覆盖"}]},{"type":"text","value":"： 边数最少的边覆盖"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"边覆盖数"}]},{"type":"text","value":"： 最小边覆盖的边数"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"团 (clique)"}],"identifier":"heading-团-clique"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"团"}]},{"type":"text","value":"： 一个点集，满足集合中任意两点相邻"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"极大团"}]},{"type":"text","value":"： 本身是一个团，但再加入任意个点都不再是团"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"最大团"}]},{"type":"text","value":"： 点数最多的团"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"团数"}]},{"type":"text","value":"： 最大团的点数"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"独立集 (independent set)"}],"identifier":"heading-独立集-independent-set"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"独立集"}]},{"type":"text","value":"： 一个点集，满足集合中的任意两点都不相邻"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"极大独立集"}]},{"type":"text","value":"： 本身是一个独立集，但再加入任意个点都不再是独立集"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"最大独立集"}]},{"type":"text","value":"： 点数最多的独立集"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"独立数"}]},{"type":"text","value":"： 最大独立集的点数"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"边独立集 (edge independent set)"}],"identifier":"heading-边独立集-edge-independent-set"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"边独立集"}]},{"type":"text","value":"： 一个边集，满足集合中的任意两条边都没有公共端点"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"极大边独立集"}]},{"type":"text","value":"： 本身是一个边独立集，但再加入任意条边都不再是边独立集"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"最大边独立集"}]},{"type":"text","value":"： 边数最多的边独立集"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"边独立数"}]},{"type":"text","value":"： 最大边独立集的边数"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"支配集 (dominating set)"}],"identifier":"heading-支配集-dominating-set"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"支配集"}]},{"type":"text","value":"： 一个点集，满足集合外其它点都至少有一个相邻的点在集合中"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"极小支配集"}]},{"type":"text","value":"： 本身是一个支配集，但再加入任意个点都不再是支配集"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"最小支配集"}]},{"type":"text","value":"： 点数最少的支配集"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"支配数"}]},{"type":"text","value":"： 最小支配集的点数"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"边支配集 (edge dominating set)"}],"identifier":"heading-边支配集-edge-dominating-set"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"边支配集"}]},{"type":"text","value":"： 一个边集，满足集合外其它边都至少有一条相邻的边在集合中"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"极小边支配集"}]},{"type":"text","value":"： 本身是一个边支配集，但再加入任意条边都不再是边支配集"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"最小边支配集"}]},{"type":"text","value":"： 边数最少的边支配集"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"边支配数"}]},{"type":"text","value":"： 最小边支配集的边数"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"匹配 (matching)"}],"identifier":"heading-匹配-matching"},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"匹配"}]},{"type":"text","value":"： 一个两两没有共同顶点的边集，又称"},{"type":"strong","children":[{"type":"text","value":"边独立集"}]}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"匹配点"}]},{"type":"text","value":"： 在匹配中的点，又称"},{"type":"strong","children":[{"type":"text","value":"饱和点"}]}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"未匹配点"}]},{"type":"text","value":"： 不在匹配中的点，又称"},{"type":"strong","children":[{"type":"text","value":"未饱和点"}]}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"最大匹配"}]},{"type":"text","value":"： 边最多的"},{"type":"strong","children":[{"type":"text","value":"匹配"}]}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"完备匹配"}]},{"type":"text","value":"： 匹配了二分图较小集合（左侧的点集和右侧点集中较小的点集）的所有点的"},{"type":"strong","children":[{"type":"text","value":"匹配"}]}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"完美匹配"}]},{"type":"text","value":"： 匹配了所有点的"},{"type":"strong","children":[{"type":"text","value":"匹配"}]}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"匹配数"}]},{"type":"text","value":"： 最大匹配的边数"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"匹配边"}]},{"type":"text","value":"： 一对匹配点的唯一连边"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"交替路"}]},{"type":"text","value":"： 图的一条简单路径，从"},{"type":"strong","children":[{"type":"text","value":"未匹配点"}]},{"type":"text","value":"出发，依次经过非匹配边、匹配边、非匹配边、匹配边...的路径（即满足路径上任意相邻的两条边，一条在匹配内，一条不在匹配内）"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"增广路"}]},{"type":"text","value":"： 起始点与终止点都为未匹配点的交替路"}]}]}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"Theorem"}],"identifier":"heading-theorem"},{"type":"heading","depth":3,"children":[{"type":"text","value":"增广路定理"}],"identifier":"heading-增广路定理"},{"type":"paragraph","children":[{"type":"text","value":"一个匹配是最大匹配的充分必要条件是不存在增广路："}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"如果存在"},{"type":"strong","children":[{"type":"text","value":"增广路"}]},{"type":"text","value":"，则说此前尚未达到最大匹配。因为"},{"type":"strong","children":[{"type":"text","value":"增广路"}]},{"type":"text","value":"中的非匹配边比匹配边多一条，若把交替路中的非匹配边和匹配边互换，则新的到的匹配比原先的匹配更大。"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"若不存在"},{"type":"strong","children":[{"type":"text","value":"增广路"}]},{"type":"text","value":"，则说明此时已到达最大匹配。"}]}]}]},{"type":"paragraph","children":[{"type":"text","value":"由增广路定理不难得到增广路算法：从二分图任意未匹配点出发，扩展出匈牙利树，并将经过的点标记。则左侧未标记点与右侧标记点构成最小覆盖集。"}]},{"type":"code","lang":"cpp","meta":"title=\"hungary.hpp\" sourcefile=\"./hungary.hpp\" maxlines=20 linenos","value":"#include <cstdio>\n#include <cstring>\n#include <vector>\n\nclass Hungary {\n  protected:\n  int N, MAXN;\n  std::vector<std::vector<int>> G;\n  int* partner;\n  bool* visited;\n\n  public:\n  Hungary(int MAXN) : MAXN(MAXN) {\n    G.resize(MAXN);\n    partner = new int[MAXN];\n  }\n\n\n  void init(int N) {\n    this->N = N;\n    for (int i = 0; i < N; ++i) G[i].clear();\n    memset(partner, -1, N * sizeof(int));\n  }\n\n  void addEdge(int u, int v) {\n    G[u].push_back(v);\n    G[v].push_back(u);\n  }\n\n  bool match(int u) {\n    for (auto& v : G[u]) {\n      if (visited[v]) continue;\n      visited[v] = true;\n      if (partner[v] < 0 || match(partner[v])) {\n        partner[u] = v;\n        partner[v] = u;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  int maxmatch() {\n    memset(partner, -1, sizeof partner);\n\n    int ans = 0;\n    for (int u = 0; u < N; ++u) {\n      if (partner[u] < 0) {\n        memset(visited, 0, N * sizeof(bool));\n        visited[u] = true;\n        if (match(u)) ans += 1;\n      }\n    }\n\n    return ans;\n  }\n\n  void display() {\n    printf(\"lft:\");\n    for (int u = 0; u < N; ++u)\n      if (partner[u] > u) printf(\" %d\", u);\n    printf(\"\\n\");\n\n    printf(\"rht:\");\n    for (int v = 0; v < N; ++v)\n      if (partner[v] > -1 && partner[v] < v) printf(\" %d\", v);\n    printf(\"\\n\");\n  }\n};\n"},{"type":"heading","depth":3,"children":[{"type":"text","value":"König定理"}],"identifier":"heading-könig定理"},{"type":"paragraph","children":[{"type":"text","value":"最小点覆盖数 "},{"type":"inlineMath","value":"="},{"type":"text","value":" 最大匹配数。如下图所示，粗紫线构成了最大匹配。显然，最大匹配中："}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"任意一个匹配点不会同时和两个以上的未匹配点直接或间接相连，（否则就会存在增广路，这与最大匹配矛盾）。"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"任意一个未配点出发的边都直接连向匹配点（理由同上）"}]}]}]},{"type":"code","lang":"graphviz","meta":"embed engine=dot","value":"graph bipartite_graph {\n  graph [pad=\"0.212,0.055\" bgcolor=transparent]\n  rankdir=LR\n  node [\n    fillcolor=\"#808080\"\n    fixedsize=true\n    fontcolor=\"#ffffff\"\n    fontsize=14\n    ordering=out\n    shape=circle\n    style=filled\n    width=0.4\n  ]\n\n  subgraph left {\n    1\n    2\n    3\n    4\n  }\n\n  subgraph right {\n    5\n    6\n    7\n  }\n\n  1 -- 5 [penwidth=2 color=violet]\n  1 -- 6 [style=dashed]\n  2 -- 5 [style=dashed]\n  2 -- 6 [style=dashed]\n  2 -- 7 [penwidth=2 color=violet]\n  3 -- 6 [penwidth=2 color=violet]\n  4 -- 7 [style=dashed]\n}\n"},{"type":"paragraph","children":[{"type":"text","value":"所以，对于每一条匹配边，至多只有一个未匹配点与其直接相邻；若选择与该未匹配点相邻的匹配点作为覆盖点，则可同时覆盖一条匹配边和一条与未匹配点相邻的边。不难发现：\n"},{"type":"strong","children":[{"type":"text","value":"将所有与未匹配点直接相邻的匹配点选为覆盖点，并将剩下的没有端点为覆盖点的匹配边中任选一个端点作为覆盖点，则构成最小覆盖集"}]},{"type":"text","value":"。而这个集合的大小显然和最大匹配个数是相等的。"}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"Related"}],"identifier":"heading-related"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"link","url":"http://dsqiu.iteye.com/blog/1689505","children":[{"type":"text","value":"二分图大讲堂——彻底搞定最大匹配数（最小覆盖数）、最大独立数、最小路径覆盖、带权最优匹配"}]}]}]}]},"ecmaImports":[],"definitionMap":{},"footnoteDefinitionMap":{},"fields":{"slug":"/post/algorithm/graph/bipartite-graph/"}},"previous":{"title":"伸展树专题","fields":{"slug":"/post/data-structure/bbst/splay/"}},"next":{"title":"2016 多校第 2 场","fields":{"slug":"/post/acm/contest/multi-university-training/2016/2/"}},"postItems":{"nodes":[{"title":"Custom React Hooks","createdAt":"2020-10-30","tags":["react","react hooks"],"fields":{"slug":"/post/web/react/hooks/custom/"}},{"title":"React Reconciliation","createdAt":"2021-06-27","tags":["react","react reconciliation"],"fields":{"slug":"/post/web/react/reconciliation/"}},{"title":"ECMA 2020 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2020/"}},{"title":"XSS 与 CSRF 的攻防","createdAt":"2021-08-19","tags":["web","web security","csrf"],"fields":{"slug":"/post/web/security/xss-csrf/"}},{"title":"Javascript 踩坑记——继承和原型链","createdAt":"2021-09-05","tags":["studynote","javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/inherit/"}},{"title":"CSS 选择器","createdAt":"2020-11-02","tags":["web","frontend","css"],"fields":{"slug":"/post/web/css/selector/"}},{"title":"ECMA 2021 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2021/"}},{"title":"在 excel 中启用正则表达式","createdAt":"2021-03-30","tags":["excel","tools"],"fields":{"slug":"/post/tool/excel/regex/"}},{"title":"统计区间内的线段","createdAt":"2021-07-21","tags":["quiz","扫描线","前缀和","树状数组","线段树"],"fields":{"slug":"/post/quiz/scanning-line/segments/"}},{"title":"约瑟夫环问题","createdAt":"2021-07-17","tags":["quiz","经典问题","约瑟夫环"],"fields":{"slug":"/post/quiz/classical/Josephus-ring/"}},{"title":"端口管理","createdAt":"2021-06-20","tags":["network","port","ssh","netstat"],"fields":{"slug":"/post/network/端口管理/"}},{"title":"数论基础之欧拉函数","createdAt":"2016-05-10","tags":["math","数论","既约剩余系","欧拉函数"],"fields":{"slug":"/post/math/number-theory/欧拉函数/"}},{"title":"扔鸡蛋问题","createdAt":"2021-06-20","tags":["quiz","动态规划"],"fields":{"slug":"/post/quiz/dp/egg-drop/"}},{"title":"数论基础之模方程初步","createdAt":"2016-05-04","tags":["math","数论","扩展欧几里得算法","中国剩余定理","Baby Step Gaint Step"],"fields":{"slug":"/post/math/number-theory/模方程/basic/"}},{"title":"不修改数组找出重复的数字","createdAt":"2021-06-29","tags":["quiz","分治","追击"],"fields":{"slug":"/post/quiz/partition/find-duplicate-number/"}},{"title":"数论基础之原根","createdAt":"2016-05-16","tags":["math","数论","原根"],"fields":{"slug":"/post/math/number-theory/原根/"}},{"title":"快速傅里叶变换和雷德算法","createdAt":"2016-04-10","tags":["acm","大数乘法","fft","快速傅里叶变换"],"fields":{"slug":"/post/math/number-theory/fft/"}},{"title":"小球放盒模型","createdAt":"2016-04-22","tags":["math","组合数学"],"fields":{"slug":"/post/math/combinatorial/小球放盒模型/"}},{"title":"组合游戏基础之 SG 函数和 SG 定理","createdAt":"2016-09-04","tags":["组合数学","组合游戏","SG 定理"],"fields":{"slug":"/post/math/combinatorial/SG/"}},{"title":"数论基础之筛法","createdAt":"2016-05-06","tags":["math","数论","素数","欧拉函数","线性筛"],"fields":{"slug":"/post/math/number-theory/sieve/"}},{"title":"函数的极限","createdAt":"2021-05-09","tags":["math","函数","极限"],"fields":{"slug":"/post/math/calculus/函数的极限/"}},{"title":"当你想来一把数独","createdAt":"2021-08-01","tags":["game","sudoku"],"fields":{"slug":"/post/game/sudoku/"}},{"title":"编译原理-语法制导翻译实现计算器","createdAt":"2016-06-23","tags":["编译原理","语法制导翻译","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/exercise/"}},{"title":"编译原理-语法分析","createdAt":"2016-06-18","tags":["编译原理","语法分析","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/grammar/"}},{"title":"伸展树专题","createdAt":"2016-07-03","tags":["acm","Splay","解题报告","专题训练"],"fields":{"slug":"/post/data-structure/bbst/splay/"}},{"title":"洗牌问题和 knuth-shuffle 算法","createdAt":"2021-07-22","tags":["shuffle","knuth-shuffle","约瑟夫环"],"fields":{"slug":"/post/algorithm/shuffle/"}},{"title":"自然对数底数e","createdAt":"2021-08-07","tags":["math","函数","极限","自然对数"],"fields":{"slug":"/post/math/calculus/自然对数底数e/"}},{"title":"树链剖分","createdAt":"2016-04-23","tags":["acm","算法","树链剖分"],"fields":{"slug":"/post/algorithm/tree/tcs/"}},{"title":"最长上升子序列（LIS）","createdAt":"2021-06-02","tags":["最长上升子序列","LIS"],"fields":{"slug":"/post/algorithm/lis/"}},{"title":"最长回文子串 Manacher 算法","createdAt":"2016-04-18","tags":["算法","字符串","回文串","manacher"],"fields":{"slug":"/post/algorithm/string/manacher/"}},{"title":"最长公共子序列（LCS）","createdAt":"2021-06-02","tags":["最长公共子序列","LCS"],"fields":{"slug":"/post/algorithm/lcs/"}},{"title":"背包九讲","createdAt":"2021-06-27","tags":["acm","算法","动态规划","背包问题"],"fields":{"slug":"/post/algorithm/knapsack/"}},{"title":"Dijkstra 算法","createdAt":"2021-05-29","tags":["算法","最短路","单源最短路","dijkstra"],"fields":{"slug":"/post/algorithm/graph/shortest-path/dijkstra/"}},{"title":"二分图","createdAt":"2016-07-17","tags":["算法","图论","二分图","学习笔记"],"fields":{"slug":"/post/algorithm/graph/bipartite-graph/"}},{"title":"防抖和节流","createdAt":"2021-09-03","tags":["coding","debounce","throttle"],"fields":{"slug":"/post/algorithm/debounce-and-throttle/"}},{"title":"精确覆盖问题和 DLX 算法","createdAt":"2021-07-24","tags":["算法","精确覆盖","DLX 算法"],"fields":{"slug":"/post/algorithm/dlx/"}},{"title":"POJ-1324 Holedox Moving 解题报告","createdAt":"2016-04-13","tags":["acm","bfs","图论","状态压缩","解题报告"],"fields":{"slug":"/post/acm/oj/poj/1324/"}},{"title":"网络流 24 题","createdAt":"2016-07-30","tags":["acm","算法","图论","网络流","二分图","解题报告","专题训练"],"fields":{"slug":"/post/algorithm/graph/network-flow/24-problems/"}},{"title":"网络流基础之最大权闭合图","createdAt":"2016-07-24","tags":["算法","图论","网络流","最大权闭合图"],"fields":{"slug":"/post/algorithm/graph/network-flow/最大权闭合图/"}},{"title":"HDU-5576 Expection of String 解题报告（原 2015-上海区域赛-E)","createdAt":"2016-04-24","tags":["acm","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5576/"}},{"title":"剑指offer 解题报告","createdAt":"2021-07-15","tags":["专题训练","解题报告"],"fields":{"slug":"/post/acm/oj/nowcoder/jz-offer/"}},{"title":"2016 多校第 2 场","createdAt":"2016-07-22","tags":["acm","训练赛","数据结构","解题报告"],"fields":{"slug":"/post/acm/contest/multi-university-training/2016/2/"}},{"title":"HDU-5306 Gorgeous Sequence 解题报告","createdAt":"2016-04-09","tags":["acm","数据结构","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5306/"}},{"title":"51nod-1462 数据结构 -- 解题报告","createdAt":"2016-04-23","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/51nod/1462/"}},{"title":"百度之星 2016 解题报告","createdAt":"2016-06-03","tags":["acm","递推","状态压缩","动态规划","字典树","解题报告"],"fields":{"slug":"/post/acm/contest/baiduzhixing/2016/"}},{"title":"CCF 2015-09 最佳文章 解题报告","createdAt":"2016-06-26","tags":["acm","Aho-Corasick 自动机","矩阵快速幂","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/ccf/2015/09/E/"}},{"title":"HDU-5574 Colorful Tree 解题报告（原 2015-上海区域赛-C）","createdAt":"2016-04-12","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5574/"}}]}},"pageContext":{"id":"fcd952cf-3332-5fa5-aef3-b30a104a5254","contentType":"post","paginationUrl":"/posts","previousPostId":"0e4c7322-c020-50dc-8df9-706f1e1fa319","nextPostId":"cba60032-a8c8-5914-ac2c-08136eedbab7"}},"staticQueryHashes":[],"slicesMap":{}}