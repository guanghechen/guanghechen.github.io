{"componentChunkName":"component---src-layout-post-post-tsx","path":"/post/algorithm/graph/shortest-path/dijkstra/","result":{"data":{"content":{"title":"Dijkstra 算法","description":"Dijkstra 算法","createdAt":"May 29, 2021","updatedAt":null,"timeToRead":"8min 19s","frontmatter2":{"aplayer":null,"wechatThumbnail":null},"toc":{"children":[{"depth":2,"identifier":"heading-约定","contents":[{"type":"text","value":"约定"}],"children":[]},{"depth":2,"identifier":"heading-算法描述","contents":[{"type":"text","value":"算法描述"}],"children":[]},{"depth":2,"identifier":"heading-算法原理","contents":[{"type":"text","value":"算法原理"}],"children":[]},{"depth":2,"identifier":"heading-优化","contents":[{"type":"text","value":"优化"}],"children":[]},{"depth":2,"identifier":"heading-程序实现","contents":[{"type":"text","value":"程序实现"}],"children":[]},{"depth":2,"identifier":"heading-related","contents":[{"type":"text","value":"Related"}],"children":[]}]},"categories":[],"tags":["算法","最短路","单源最短路","dijkstra"],"ast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Dijkstra 算法适用于 "},{"type":"emphasis","children":[{"type":"strong","children":[{"type":"text","value":"所有边权为正"}]}]},{"type":"text","value":" 的图；它同时适用于有向图和无向图。"}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"约定"}],"identifier":"heading-约定"},{"type":"paragraph","children":[{"type":"text","value":"单元最短路径算法用于计算源点到图中所有点的最短距离。为方便表述，以下说明中进行如下约定："}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"记图 "},{"type":"inlineMath","value":"G"},{"type":"text","value":" 的点集为 "},{"type":"inlineMath","value":"V"},{"type":"text","value":"，边集为 "},{"type":"inlineMath","value":"E=\\Big\\lbrace (x,y) \\big\\vert x \\in V, y \\in V \\Big\\rbrace"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"记边权为 "},{"type":"inlineMath","value":"w_{x,y}"},{"type":"text","value":"（若存在多条从 "},{"type":"inlineMath","value":"x"},{"type":"text","value":" 连向 "},{"type":"inlineMath","value":"y"},{"type":"text","value":" 的边，取权值最小的那条）"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"记源点为 "},{"type":"inlineMath","value":"s, \\; (s  \\in V)"},{"type":"text","value":"，"},{"type":"inlineMath","value":"s"},{"type":"text","value":" 到 "},{"type":"inlineMath","value":"x"},{"type":"text","value":" 的 "},{"type":"emphasis","children":[{"type":"text","value":"真实最短距离"}]},{"type":"text","value":" 为 "},{"type":"inlineMath","value":"D_x, (x \\in V)"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"记 "},{"type":"inlineMath","value":"d_x"},{"type":"text","value":" 表示 "},{"type":"inlineMath","value":"s"},{"type":"text","value":" 到 "},{"type":"inlineMath","value":"x"},{"type":"text","value":" 的 "},{"type":"emphasis","children":[{"type":"text","value":"当前已知最短距离"}]},{"type":"text","value":"，故 "},{"type":"inlineMath","value":"D_x \\leqslant d_x"},{"type":"text","value":" 恒成立；"}]}]}]},{"type":"paragraph","children":[{"type":"text","value":"为方便描述，以下称在边 "},{"type":"inlineMath","value":"(x,y) \\in E"},{"type":"text","value":" 中，"},{"type":"inlineMath","value":"x"},{"type":"text","value":" 为 "},{"type":"inlineMath","value":"y"},{"type":"text","value":" 的父跳转点。"}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"算法描述"}],"identifier":"heading-算法描述"},{"type":"list","ordered":true,"orderType":"1","start":1,"marker":46,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"初始化 "},{"type":"inlineMath","value":"d_x"},{"type":"text","value":"，使得 "},{"type":"inlineMath","value":"\\displaystyle \\; d_x=\\left\\lbrace\\begin{aligned} &0, &x=s\\\\&+\\infty, &x \\neq s \\end{aligned}\\right. ,\\quad x \\in V"},{"type":"text","value":"，准备一个空集合 "},{"type":"inlineMath","value":"V'"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"在 "},{"type":"inlineMath","value":"V - V'"},{"type":"text","value":" 中选取点 "},{"type":"inlineMath","value":"x"},{"type":"text","value":" 满足 "},{"type":"inlineMath","value":"d_x = \\min \\Big\\lbrace d_z | z \\in V - V' \\Big\\rbrace"},{"type":"text","value":"，将 "},{"type":"inlineMath","value":"x"},{"type":"text","value":" 放入集合 "},{"type":"inlineMath","value":"V'"},{"type":"text","value":" 中"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"（"},{"type":"strong","children":[{"type":"text","value":"松弛操作"}]},{"type":"text","value":"）用上一步获得的 "},{"type":"inlineMath","value":"x"},{"type":"text","value":" 更新从 "},{"type":"inlineMath","value":"x"},{"type":"text","value":" 出发的边 "},{"type":"inlineMath","value":"(x, y)"},{"type":"text","value":"（实际上仅更新\n"},{"type":"inlineMath","value":"\\Big\\lbrace (x,y) \\big\\vert y\\in V-V' \\Big\\rbrace"},{"type":"text","value":" 中的边就可以了）：令 "},{"type":"inlineMath","value":"d_y = \\min \\Big\\lbrace d_y, d_x + w_{x,y} \\Big\\rbrace"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"重复第 2 步，直到 "},{"type":"inlineMath","value":"V=V'"}]}]}]},{"type":"paragraph","children":[{"type":"text","value":"算法结束后，有 "},{"type":"inlineMath","value":"V=\\Big\\lbrace x \\big\\vert d_x = D_x, x \\in V \\Big\\rbrace"}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"算法原理"}],"identifier":"heading-算法原理"},{"type":"paragraph","children":[{"type":"text","value":"不难发现，"},{"type":"inlineMath","value":"V'=\\Big\\lbrace x \\big\\vert d_x = D_x, x \\in V' \\Big\\rbrace"},{"type":"text","value":"  恒成立。这可以使用数学归纳法进行证明："}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"初始时，算法第 2 步取出的点必为 "},{"type":"inlineMath","value":"s"},{"type":"text","value":"，故此时结论成立。"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"不妨假设在算法运行中期时，结论仍成立，此时算法第 2 步取出的点为 "},{"type":"inlineMath","value":"x"},{"type":"text","value":"，由算法第\n3 步中的松弛操作可知，当前 "},{"type":"inlineMath","value":"\\Big\\lbrace d_z \\big\\vert d_z \\in V - V' \\Big\\rbrace"},{"type":"text","value":"\n是在点 "},{"type":"inlineMath","value":"z"},{"type":"text","value":" 尝试了以 "},{"type":"inlineMath","value":"\\Big\\lbrace y \\big\\vert y \\in V' \\Big\\rbrace"},{"type":"text","value":" 中的任意（所有）点 "},{"type":"inlineMath","value":"y"},{"type":"text","value":" 作为父跳转点（即最短路中使用了边 "},{"type":"inlineMath","value":"y \\rightarrow z"},{"type":"text","value":"）后计算出的值"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"若此时 "},{"type":"inlineMath","value":"d_x > D_x"},{"type":"text","value":"，则 "},{"type":"inlineMath","value":"x"},{"type":"text","value":" 必然只能选取 "},{"type":"inlineMath","value":"V-V'"},{"type":"text","value":" 中的点作为父跳转点才能得到最短路径，又因为 "},{"type":"inlineMath","value":"{d_x = \\min \\Big\\lbrace d_z | z \\in V - V' \\Big\\rbrace}"},{"type":"text","value":"，即如果这种情况真的成立，则必有 "},{"type":"inlineMath","value":"\\exists z_0 \\in V-V'"},{"type":"text","value":" 使得 "},{"type":"inlineMath","value":"D_{z_0}+w_{z_0,x} \\leqslant d_x"},{"type":"text","value":"，因为 dijkstra 处理的是正边权的图，故有 "},{"type":"inlineMath","value":"D_{z_0} < d_x"},{"type":"text","value":"，且 "},{"type":"inlineMath","value":"z_0"},{"type":"text","value":" 的父跳转点必不在 "},{"type":"inlineMath","value":"V'"},{"type":"text","value":" 中，否则此时 "},{"type":"inlineMath","value":"d_{z_0}=D_{z_0}"},{"type":"text","value":" （因为父跳转点在 "},{"type":"inlineMath","value":"N'"},{"type":"text","value":" 中意味着已求出从 "},{"type":"inlineMath","value":"s"},{"type":"text","value":" 到 "},{"type":"inlineMath","value":"z_0"},{"type":"text","value":" 父跳转点最短距离，则此时也就求出了 "},{"type":"inlineMath","value":"D_{z_0}"},{"type":"text","value":"），这与\n"},{"type":"inlineMath","value":"d_x \\leqslant d_{z_0} \\leqslant D_{z_0}"},{"type":"text","value":" 矛盾。"}]},{"type":"paragraph","children":[{"type":"text","value":"类似地可证明此时 "},{"type":"inlineMath","value":"z_0"},{"type":"text","value":" 的父跳转点的父跳转点也不在 "},{"type":"inlineMath","value":"V'"},{"type":"text","value":" 中，递归下去即整条从\n"},{"type":"inlineMath","value":"s"},{"type":"text","value":" 到达 "},{"type":"inlineMath","value":"z_0"},{"type":"text","value":" 的路径上都不存在 "},{"type":"inlineMath","value":"V'"},{"type":"text","value":" 中的点，但这是不可能的，因为 "},{"type":"inlineMath","value":"s"},{"type":"text","value":" 就在\n"},{"type":"inlineMath","value":"V'"},{"type":"text","value":" 中，故这样的 "},{"type":"inlineMath","value":"z_0"},{"type":"text","value":" 并不存在。"}]},{"type":"paragraph","children":[{"type":"text","value":"因此此时 "},{"type":"inlineMath","value":"d_x = D_x"},{"type":"text","value":"，即 "},{"type":"inlineMath","value":"x \\in V'"},{"type":"text","value":"."}]}]}]},{"type":"admonition","keyword":"info","title":[{"type":"text","value":"HINT"}],"children":[{"type":"paragraph","children":[{"type":"text","value":"由上述关于 "},{"type":"inlineMath","value":"D_{z_0}+w_{z_0,x} \\leqslant d_x"},{"type":"text","value":" 的假设可知，若存在非正边权，则无法推导出 "},{"type":"inlineMath","value":"D_{z_0} < d_x"},{"type":"text","value":" 的结论，此时算法将失效。具体地，参见下图的说明："}]},{"type":"paragraph","children":[{"type":"imageReference","identifier":"dijkstra-invalid-1","label":"dijkstra-invalid-1","referenceType":"collapsed","alt":"dijkstra-invalid-1","src":"/static/db1f84c3855d5245d5377b4070eaab66/0227d/dijkstra-1.png","srcSet":"/static/db1f84c3855d5245d5377b4070eaab66/fa83e/dijkstra-1.png 163w,\n/static/db1f84c3855d5245d5377b4070eaab66/f0ade/dijkstra-1.png 325w,\n/static/db1f84c3855d5245d5377b4070eaab66/0227d/dijkstra-1.png 650w,\n/static/db1f84c3855d5245d5377b4070eaab66/9c83c/dijkstra-1.png 975w,\n/static/db1f84c3855d5245d5377b4070eaab66/e4942/dijkstra-1.png 977w","sizes":"(max-width: 650px) 100vw, 650px","loading":"lazy","decoding":"async"}]}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"优化"}],"identifier":"heading-优化"},{"type":"paragraph","children":[{"type":"text","value":"不难发现，上述算法中总共迭代 "},{"type":"inlineMath","value":"\\Vert V \\Vert"},{"type":"text","value":" 次，每次又遍历 "},{"type":"inlineMath","value":"O(\\Vert V \\Vert)"},{"type":"text","value":" 次去寻找 "},{"type":"inlineMath","value":"x"},{"type":"text","value":"，故时间复杂度为 "},{"type":"inlineMath","value":"O(\\Vert V \\Vert^2)"},{"type":"text","value":"."}]},{"type":"paragraph","children":[{"type":"text","value":"如果采取邻接表来存储边，则最多累计进行 "},{"type":"inlineMath","value":"\\Vert E \\Vert"},{"type":"text","value":" 次松弛操作，此时算法瓶颈在于寻找满足 "},{"type":"inlineMath","value":"x, \\; \\left(d_x = \\min \\Big\\lbrace d_z | z \\in V - V' \\Big\\rbrace\\right)"},{"type":"text","value":"，可以使用优先队列（或小根堆）来维护 "},{"type":"inlineMath","value":"d"},{"type":"text","value":" 值，则可以在 "},{"type":"inlineMath","value":"O(\\log \\Vert V \\Vert)"},{"type":"text","value":" 的复杂度内找到 "},{"type":"inlineMath","value":"x"},{"type":"text","value":"。但是因为优先队列不支持修改值，所以，对于松弛成功点 "},{"type":"inlineMath","value":"y"},{"type":"text","value":"，需要将此时的 "},{"type":"inlineMath","value":"d_y"},{"type":"text","value":" 重新扔入优先队列中。这样一来需要增加一个额外的判断：即优先队列中弹出的元素 "},{"type":"inlineMath","value":"y"},{"type":"text","value":" 是否已属于 "},{"type":"inlineMath","value":"V'"},{"type":"text","value":"。若是，则跳过处理。时间复杂度为\n"},{"type":"inlineMath","value":"O(\\Vert E \\Vert \\log \\Vert V \\Vert)"},{"type":"text","value":"."}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"程序实现"}],"identifier":"heading-程序实现"},{"type":"paragraph","children":[{"type":"text","value":"为方便表述，约定如下变量含义："}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"N"},{"type":"text","value":" 表示图中点的个数，即 "},{"type":"inlineCode","value":"N"},{"type":"text","value":" "},{"type":"inlineMath","value":"= \\Vert V \\Vert"},{"type":"text","value":"，并假定图中所有点按\n"},{"type":"inlineMath","value":"[0,"},{"type":"text","value":" "},{"type":"inlineCode","value":"N"},{"type":"text","value":" "},{"type":"inlineMath","value":"-1]"},{"type":"text","value":" 进行标号"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"INF"},{"type":"text","value":" 表示一个超过最长路径长度的超大值"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"s"},{"type":"text","value":" 表示源点"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"w[x][y]"},{"type":"text","value":" 表示边 "},{"type":"inlineMath","value":"(x,y)"},{"type":"text","value":" 的边权，即 "},{"type":"inlineCode","value":"w[x][y]"},{"type":"text","value":" "},{"type":"inlineMath","value":"=w_{x,y}"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"d[x]"},{"type":"text","value":" 对应上文中提到的 "},{"type":"inlineMath","value":"d"},{"type":"text","value":" 数列，即 "},{"type":"inlineCode","value":"d[x]"},{"type":"text","value":" "},{"type":"inlineMath","value":"=d_x"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"visited[x]"},{"type":"text","value":" 表示点 "},{"type":"inlineMath","value":"x"},{"type":"text","value":" 是否在集合 "},{"type":"inlineMath","value":"V'"},{"type":"text","value":" 中，即 "},{"type":"inlineCode","value":"visited[x]"},{"type":"text","value":"\n"},{"type":"inlineMath","value":"\\displaystyle = \\left\\lbrace\\begin{aligned} &true, &x \\in V'\\\\ &false, &x \\in V-V' \\end{aligned}\\right."}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"朴素 dijkstra 算法 (C++)"}]},{"type":"code","lang":"cpp","meta":"sourcefile=\"./dijkstra.pure.cpp\" title=\"dijkstra.pure.cpp\" collapsed linenos","value":"const int INF = 0x3f3f3f3f;\n\nvoid dijkstra(int N, int s, int** w, int* d, bool* visited) {\n  // Initialize the `d` array.\n  for (int x = 0; x < N; ++x) {\n    d[x] = INF;\n    visited[x] = false;\n  }\n  d[s] = 0;\n\n  for (int u = 0; u < N; ++u) {\n    int x, m = INF;\n    for (int z = 0; z < N; ++z) {\n      if (visited[z]) continue;\n      if (d[z] <= m) m = d[x = z];\n    }\n\n    if (m == INF) break;\n\n    // Perform the relaxation operation.\n    visited[x] = true;\n    for (int y = 0; y < N; ++y) {\n      int v = d[x] + w[x][y];\n      if (d[y] > v) d[y] = v;\n    }\n  }\n}\n"}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"优先队列优化的 Dijkstra 算法 (Typescript)"}]},{"type":"code","lang":"typescript","meta":"sourcefile=\"./dijkstra.priority-queue.ts\" title=\"dijkstra.priority-queue.ts\" collapsed linenos","value":"import { PriorityQueue } from '@algorithm.ts/queue'\n\nexport interface DijkstraEdge<T extends number | bigint> {\n  /**\n   * The other end of the edge.\n   */\n  to: number\n  /**\n   * The cost of walking along this side.\n   */\n  cost: T\n}\n\nexport function dijkstra<T extends number | bigint>(\n  N: number,\n  source: number,\n  G: DijkstraEdge<T>[][],\n  ZERO: T,\n  INF: T,\n): T[] {\n  const dist: T[] = new Array(N).fill(INF)\n  const Q = new PriorityQueue<{ pos: number; cost: T }>({\n    compare: (x, y) => x.cost - y.cost,\n  })\n\n  // eslint-disable-next-line no-param-reassign\n  dist[source] = ZERO\n  Q.enqueue({ pos: source, cost: ZERO })\n\n  while (Q.size > 0) {\n    const { pos, cost } = Q.dequeue()!\n    if (dist[pos] < cost) continue\n    for (const e of G[pos]) {\n      const candidate: T = (dist[pos] as any) + e.cost\n      if (dist[e.to] > candidate) {\n        // eslint-disable-next-line no-param-reassign\n        dist[e.to] = candidate\n        Q.enqueue({ pos: e.to, cost: dist[e.to] })\n      }\n    }\n  }\n  return dist\n}\n"}]}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"Related"}],"identifier":"heading-related"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"link","url":"https://github.com/guanghechen/algorithm.ts/tree/main/packages/queue","children":[{"type":"text","value":"@algorithm.ts/queue"}]}]},{"type":"listItem","children":[{"type":"link","url":"https://github.com/guanghechen/algorithm.ts/tree/main/packages/dijkstra","children":[{"type":"text","value":"@algorithm.ts/dijkstra"}]}]}]}]},"ecmaImports":[],"definitionMap":{"dijkstra-invalid-1":{"type":"definition","identifier":"dijkstra-invalid-1","label":"dijkstra-invalid-1","url":"/static/db1f84c3855d5245d5377b4070eaab66/0227d/dijkstra-1.png"}},"footnoteDefinitionMap":{},"fields":{"slug":"/post/algorithm/graph/shortest-path/dijkstra/"}},"previous":{"title":"函数的极限","fields":{"slug":"/post/math/calculus/函数的极限/"}},"next":{"title":"最长上升子序列（LIS）","fields":{"slug":"/post/algorithm/lis/"}},"postItems":{"nodes":[{"title":"洗牌问题和 knuth-shuffle 算法","createdAt":"2021-07-22","tags":["shuffle","knuth-shuffle","约瑟夫环"],"fields":{"slug":"/post/algorithm/shuffle/"}},{"title":"编译原理-语法制导翻译实现计算器","createdAt":"2016-06-23","tags":["编译原理","语法制导翻译","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/exercise/"}},{"title":"编译原理-语法分析","createdAt":"2016-06-18","tags":["编译原理","语法分析","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/grammar/"}},{"title":"端口管理","createdAt":"2021-06-20","tags":["network","port","ssh","netstat"],"fields":{"slug":"/post/network/端口管理/"}},{"title":"防抖和节流","createdAt":"2021-09-03","tags":["coding","debounce","throttle"],"fields":{"slug":"/post/algorithm/debounce-and-throttle/"}},{"title":"精确覆盖问题和 DLX 算法","createdAt":"2021-07-24","tags":["算法","精确覆盖","DLX 算法"],"fields":{"slug":"/post/algorithm/dlx/"}},{"title":"背包九讲","createdAt":"2021-06-27","tags":["acm","算法","动态规划","背包问题"],"fields":{"slug":"/post/algorithm/knapsack/"}},{"title":"最长公共子序列（LCS）","createdAt":"2021-06-02","tags":["最长公共子序列","LCS"],"fields":{"slug":"/post/algorithm/lcs/"}},{"title":"最长上升子序列（LIS）","createdAt":"2021-06-02","tags":["最长上升子序列","LIS"],"fields":{"slug":"/post/algorithm/lis/"}},{"title":"当你想来一把数独","createdAt":"2021-08-01","tags":["game","sudoku"],"fields":{"slug":"/post/game/sudoku/"}},{"title":"函数的极限","createdAt":"2021-05-09","tags":["math","函数","极限"],"fields":{"slug":"/post/math/calculus/函数的极限/"}},{"title":"自然对数底数e","createdAt":"2021-08-07","tags":["math","函数","极限","自然对数"],"fields":{"slug":"/post/math/calculus/自然对数底数e/"}},{"title":"小球放盒模型","createdAt":"2016-04-22","tags":["math","组合数学"],"fields":{"slug":"/post/math/combinatorial/小球放盒模型/"}},{"title":"不修改数组找出重复的数字","createdAt":"2021-06-29","tags":["quiz","分治","追击"],"fields":{"slug":"/post/quiz/partition/find-duplicate-number/"}},{"title":"统计区间内的线段","createdAt":"2021-07-21","tags":["quiz","扫描线","前缀和","树状数组","线段树"],"fields":{"slug":"/post/quiz/scanning-line/segments/"}},{"title":"CSS 选择器","createdAt":"2020-11-02","tags":["web","frontend","css"],"fields":{"slug":"/post/web/css/selector/"}},{"title":"ECMA 2020 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2020/"}},{"title":"ECMA 2021 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2021/"}},{"title":"Javascript 踩坑记——继承和原型链","createdAt":"2021-09-05","tags":["studynote","javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/inherit/"}},{"title":"React Reconciliation","createdAt":"2021-06-26","tags":["react","react reconciliation"],"fields":{"slug":"/post/web/react/reconciliation/"}},{"title":"XSS 与 CSRF 的攻防","createdAt":"2021-08-19","tags":["web","web security","csrf"],"fields":{"slug":"/post/web/security/xss-csrf/"}},{"title":"二分图","createdAt":"2016-07-17","tags":["算法","图论","二分图","学习笔记"],"fields":{"slug":"/post/algorithm/graph/bipartite-graph/"}},{"title":"最长回文子串 Manacher 算法","createdAt":"2016-04-18","tags":["算法","字符串","回文串","manacher"],"fields":{"slug":"/post/algorithm/string/manacher/"}},{"title":"树链剖分","createdAt":"2016-04-23","tags":["acm","算法","树链剖分"],"fields":{"slug":"/post/algorithm/tree/tcs/"}},{"title":"伸展树专题","createdAt":"2016-07-03","tags":["acm","Splay","解题报告","专题训练"],"fields":{"slug":"/post/data-structure/bbst/splay/"}},{"title":"组合游戏基础之 SG 函数和 SG 定理","createdAt":"2016-09-04","tags":["组合数学","组合游戏","SG 定理"],"fields":{"slug":"/post/math/combinatorial/SG/"}},{"title":"快速傅里叶变换和雷德算法","createdAt":"2016-04-10","tags":["acm","大数乘法","fft","快速傅里叶变换"],"fields":{"slug":"/post/math/number-theory/fft/"}},{"title":"数论基础之筛法","createdAt":"2016-05-06","tags":["math","数论","素数","欧拉函数","线性筛"],"fields":{"slug":"/post/math/number-theory/sieve/"}},{"title":"数论基础之原根","createdAt":"2016-05-16","tags":["math","数论","原根"],"fields":{"slug":"/post/math/number-theory/原根/"}},{"title":"数论基础之欧拉函数","createdAt":"2016-05-10","tags":["math","数论","既约剩余系","欧拉函数"],"fields":{"slug":"/post/math/number-theory/欧拉函数/"}},{"title":"约瑟夫环问题","createdAt":"2021-07-16","tags":["quiz","经典问题","约瑟夫环"],"fields":{"slug":"/post/quiz/classical/Josephus-ring/"}},{"title":"扔鸡蛋问题","createdAt":"2021-06-20","tags":["quiz","动态规划"],"fields":{"slug":"/post/quiz/dp/egg-drop/"}},{"title":"在 excel 中启用正则表达式","createdAt":"2021-03-29","tags":["excel","tools"],"fields":{"slug":"/post/tool/excel/regex/"}},{"title":"百度之星 2016 解题报告","createdAt":"2016-06-03","tags":["acm","递推","状态压缩","动态规划","字典树","解题报告"],"fields":{"slug":"/post/acm/contest/baiduzhixing/2016/"}},{"title":"51nod-1462 数据结构 -- 解题报告","createdAt":"2016-04-23","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/51nod/1462/"}},{"title":"HDU-5306 Gorgeous Sequence 解题报告","createdAt":"2016-04-09","tags":["acm","数据结构","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5306/"}},{"title":"HDU-5574 Colorful Tree 解题报告（原 2015-上海区域赛-C）","createdAt":"2016-04-12","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5574/"}},{"title":"HDU-5576 Expection of String 解题报告（原 2015-上海区域赛-E)","createdAt":"2016-04-24","tags":["acm","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5576/"}},{"title":"剑指offer 解题报告","createdAt":"2021-07-15","tags":["专题训练","解题报告"],"fields":{"slug":"/post/acm/oj/nowcoder/jz-offer/"}},{"title":"POJ-1324 Holedox Moving 解题报告","createdAt":"2016-04-13","tags":["acm","bfs","图论","状态压缩","解题报告"],"fields":{"slug":"/post/acm/oj/poj/1324/"}},{"title":"网络流 24 题","createdAt":"2016-07-30","tags":["acm","算法","图论","网络流","二分图","解题报告","专题训练"],"fields":{"slug":"/post/algorithm/graph/network-flow/24-problems/"}},{"title":"网络流基础之最大权闭合图","createdAt":"2016-07-24","tags":["算法","图论","网络流","最大权闭合图"],"fields":{"slug":"/post/algorithm/graph/network-flow/最大权闭合图/"}},{"title":"Dijkstra 算法","createdAt":"2021-05-29","tags":["算法","最短路","单源最短路","dijkstra"],"fields":{"slug":"/post/algorithm/graph/shortest-path/dijkstra/"}},{"title":"Custom React Hooks","createdAt":"2020-10-29","tags":["react","react hooks"],"fields":{"slug":"/post/web/react/hooks/custom/"}},{"title":"2016 多校第 2 场","createdAt":"2016-07-22","tags":["acm","训练赛","数据结构","解题报告"],"fields":{"slug":"/post/acm/contest/multi-university-training/2016/2/"}},{"title":"CCF 2015-09 最佳文章 解题报告","createdAt":"2016-06-26","tags":["acm","Aho-Corasick 自动机","矩阵快速幂","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/ccf/2015/09/E/"}},{"title":"数论基础之模方程初步","createdAt":"2016-05-04","tags":["math","数论","扩展欧几里得算法","中国剩余定理","Baby Step Gaint Step"],"fields":{"slug":"/post/math/number-theory/模方程/basic/"}}]}},"pageContext":{"id":"75f19751-c005-518a-ac59-b66104d190e9","contentType":"post","paginationUrl":"/posts","previousPostId":"f2e7cd77-e003-575d-b17b-3d60e00b1d03","nextPostId":"a1ea98d2-ce3a-5d6f-92dc-d600c92fc658"}},"staticQueryHashes":[],"slicesMap":{}}