{"componentChunkName":"component---src-layout-post-post-tsx","path":"/post/algorithm/lcs/","result":{"data":{"content":{"title":"最长公共子序列（LCS）","description":"最长公共子序列（LCS）","createdAt":"June 02, 2021","updatedAt":null,"timeToRead":"6min 7s","frontmatter2":{"aplayer":null,"wechatThumbnail":null},"toc":{"children":[{"depth":2,"identifier":"heading-前言","contents":[{"type":"text","value":"前言"}],"children":[]},{"depth":2,"identifier":"heading-最长公共子序列的长度","contents":[{"type":"text","value":"最长公共子序列的长度"}],"children":[{"depth":3,"identifier":"heading-动态规划","contents":[{"type":"text","value":"动态规划"}],"children":[]},{"depth":3,"identifier":"heading-转成最长上升子序列问题","contents":[{"type":"text","value":"转成最长上升子序列问题"}],"children":[]}]},{"depth":2,"identifier":"heading-最小字典序最长公共子序列","contents":[{"type":"text","value":"最小字典序最长公共子序列"}],"children":[{"depth":3,"identifier":"heading-text-diff","contents":[{"type":"text","value":"Text Diff"}],"children":[]}]},{"depth":2,"identifier":"heading-related","contents":[{"type":"text","value":"Related"}],"children":[]}]},"categories":[],"tags":["最长公共子序列","LCS"],"ast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"前言"}],"identifier":"heading-前言"},{"type":"paragraph","children":[{"type":"text","value":"一些定义："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"公共子序列：对于给定数列 "},{"type":"inlineMath","value":"A=\\lbrace a_1,a_2,\\cdots,a_M \\rbrace"},{"type":"text","value":" 和\n"},{"type":"inlineMath","value":"B=\\lbrace b_1,b_2,\\cdots,b_N \\rbrace"},{"type":"text","value":"，若 "},{"type":"inlineMath","value":"C=\\lbrace c_1,c_2,\\cdots,c_K \\rbrace"},{"type":"text","value":" 既是 "},{"type":"inlineMath","value":"A"},{"type":"text","value":" 的子序列，又是 "},{"type":"inlineMath","value":"B"},{"type":"text","value":" 的子序列，则称 "},{"type":"inlineMath","value":"C"},{"type":"text","value":" 是 "},{"type":"inlineMath","value":"A"},{"type":"text","value":" 和 "},{"type":"inlineMath","value":"B"},{"type":"text","value":" 的公共子序列。"}]},{"type":"listItem","children":[{"type":"text","value":"最长公共子序列：公共子序列中元素个数最多的那个。"}]}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"最长公共子序列的长度"}],"identifier":"heading-最长公共子序列的长度"},{"type":"heading","depth":3,"children":[{"type":"text","value":"动态规划"}],"identifier":"heading-动态规划"},{"type":"paragraph","children":[{"type":"text","value":"记 "},{"type":"inlineMath","value":"dp(i,j)"},{"type":"text","value":" 表示 "},{"type":"inlineMath","value":"\\lbrace a_1, a_2, \\cdots, a_i \\rbrace"},{"type":"text","value":" 和\n"},{"type":"inlineMath","value":"\\lbrace b_1, b_2, \\cdots, b_j \\rbrace"},{"type":"text","value":" 的最长公共子序列的长度，不难得到转移方程："}]},{"type":"math","value":"dp(i,j) = \\max \\lbrace dp(i-1, j), \\; dp(i, j - 1), \\; dp(i-1, j-1) + f(i, j) \\rbrace\n"},{"type":"paragraph","children":[{"type":"text","value":"其中："}]},{"type":"math","value":"  f(i,j) = \\left\\lbrace\n    \\begin{aligned}\n      &1, &a_i=a_j\\\\\n      &0, &a_i \\neq a_j\\\\\n    \\end{aligned}\n  \\right.\n"},{"type":"admonition","keyword":"tip","title":[{"type":"text","value":"一个小优化"}],"children":[{"type":"paragraph","children":[{"type":"text","value":"注意到 "},{"type":"inlineMath","value":"a_i = a_j"},{"type":"text","value":" 时，"},{"type":"inlineMath","value":"dp(i-1, j-1) + 1 \\geqslant \\max \\lbrace dp(i, j-1), dp(i-1, j) \\rbrace"},{"type":"text","value":"，则转移方程可以写成："}]},{"type":"math","value":"  dp(i,j) = \\left\\lbrace\n    \\begin{aligned}  \n      &dp(i-1, j-1) + 1, &a_i = b_j \\\\\n      &\\max\\lbrace dp(i,j-1), dp(i-1, j) \\rbrace, &a_i \\neq b_j\\\\\n    \\end{aligned}  \n  \\right.\n"}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"时间复杂度： "},{"type":"inlineMath","value":"O(M \\cdot N)"}]},{"type":"listItem","children":[{"type":"text","value":"额外空间复杂度： "},{"type":"inlineMath","value":"O(M \\cdot N)"}]}]},{"type":"code","lang":"typescript","meta":"{21-23} title=\"./findLengthOfLCS.1.ts\" sourcefile=\"./findLengthOfLCS.1.ts\" linenos collapsed","value":"export function findLengthOfLCS(\n  N1: number,\n  N2: number,\n  isEqual: (i: number, j: number) => boolean,\n): number {\n  if (N1 <= 0 || N2 <= 0) return 0\n\n  const dp: number[][] = new Array(N1)\n  for (let i = 0; i < N1; ++i) dp[i] = new Array(N2)\n\n  dp[0][0] = isEqual(0, 0) ? 1 : 0\n  for (let i = 1; i < N1; ++i) {\n    dp[i][0] = dp[i - 1][0] | (isEqual(i, 0) ? 1 : 0)\n  }\n  for (let j = 1; j < N2; ++j) {\n    dp[0][j] = dp[0][j - 1] | (isEqual(0, j) ? 1 : 0)\n  }\n\n  for (let i = 1; i < N1; ++i) {\n    for (let j = 1; j < N2; ++j) {\n      dp[i][j] = isEqual(i, j) ? dp[i - 1][j - 1] + 1 : Math.max(dp[i][j - 1], dp[i - 1][j])\n    }\n  }\n\n  return dp[N1 - 1][N2 - 1]\n}\n"},{"type":"heading","depth":3,"children":[{"type":"text","value":"转成最长上升子序列问题"}],"identifier":"heading-转成最长上升子序列问题"},{"type":"admonition","keyword":"tip","title":[],"children":[{"type":"paragraph","children":[{"type":"text","value":"此算法当且仅当 "},{"type":"inlineMath","value":"A"},{"type":"text","value":" 或 "},{"type":"inlineMath","value":"B"},{"type":"text","value":" 中"},{"type":"emphasis","children":[{"type":"strong","children":[{"type":"text","value":"不存在重复元素时"}]}]},{"type":"text","value":"有效！"}]}]},{"type":"paragraph","children":[{"type":"text","value":"为方便表述，不妨记 "},{"type":"inlineMath","value":"A"},{"type":"text","value":" 中不存在重复元素。算法过程如下："}]},{"type":"list","ordered":true,"orderType":"1","start":1,"marker":46,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"用一个 TreeMap 或 HashMap 在 "},{"type":"inlineMath","value":"O(M)"},{"type":"text","value":" 或 "},{"type":"inlineMath","value":"O(M \\log M)"},{"type":"text","value":" 的复杂度下求出映射：\n"},{"type":"inlineMath","value":"f: a_i \\rightarrow i"},{"type":"text","value":"."}]},{"type":"code","lang":"typescript","meta":"title=\"calc-map.ts\"","value":"const f: Map<number, number> = new Map(A.length)\nfor (let i = 0; i < A.length; ++i) f.set(A[i], i)\n"}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"通过映射 "},{"type":"inlineMath","value":"f"},{"type":"text","value":" 将数组 "},{"type":"inlineMath","value":"B"},{"type":"text","value":" 中的元素映射成 "},{"type":"inlineMath","value":"B'"},{"type":"text","value":"，并过滤掉所有 "},{"type":"inlineMath","value":"A"},{"type":"text","value":" 中未出现的元素，这一步的复杂度和第一步相同，同为 "},{"type":"inlineMath","value":"O(M)"},{"type":"text","value":" 或 "},{"type":"inlineMath","value":"O(M \\log M)"},{"type":"text","value":"."}]},{"type":"code","lang":"typescript","meta":"title=\"calc-b-prime.ts\"","value":"const B2: number[] = []\nfor (const b of B) {\n  const idx = f.get(b)\n  if (idx !== undefined) B2.push(idx)\n}\n"},{"type":"paragraph","children":[{"type":"text","value":"举个栗子，不妨假设 "},{"type":"inlineMath","value":"A = \\lbrace 3, 2, 1, 7, 5 \\rbrace"},{"type":"text","value":"，\n"},{"type":"inlineMath","value":"B = \\lbrace 2, 1, 1, 3, 7, 8 \\rbrace"},{"type":"text","value":"；则可以求出映射 "},{"type":"inlineMath","value":"f"},{"type":"text","value":" 为："}]},{"type":"math","value":"f: \\lbrace 3, 2, 1, 7, 5 \\rbrace \\rightarrow \\lbrace 1, 2, 3, 4, 5 \\rbrace\n"},{"type":"paragraph","children":[{"type":"text","value":"接着，可以求出 "},{"type":"inlineMath","value":"B' = \\lbrace 2, 3, 3, 1, 4 \\rbrace"},{"type":"text","value":"，其中 "},{"type":"inlineMath","value":"B_6=8"},{"type":"text","value":" 未在 "},{"type":"inlineMath","value":"A"},{"type":"text","value":" 中出现，故直接过滤掉。"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"对 "},{"type":"inlineMath","value":"B'"},{"type":"text","value":" 求一次"},{"type":"linkReference","identifier":"lis","label":"lis","referenceType":"full","children":[{"type":"text","value":"最长上升子序列"}]},{"type":"text","value":"，得到的即为 "},{"type":"inlineMath","value":"A"},{"type":"text","value":" 和 "},{"type":"inlineMath","value":"B"},{"type":"text","value":" 的最长公共子序列，这一步的复杂度为 "},{"type":"inlineMath","value":"O(N \\log N)"},{"type":"text","value":"."}]},{"type":"code","lang":"typescript","meta":"title=\"do-lcs.ts\"","value":"return findLengthOfLIS(B2.length, (i, j) => B[i] - B[j])\n"}]}]},{"type":"paragraph","children":[{"type":"text","value":"综上，总复杂度为："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"时间复杂度："},{"type":"inlineMath","value":"O(M\\log M + M\\log M + N\\log N)"}]},{"type":"listItem","children":[{"type":"text","value":"空间复杂度为："},{"type":"inlineMath","value":"O(M+N)"}]}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"最小字典序最长公共子序列"}],"identifier":"heading-最小字典序最长公共子序列"},{"type":"paragraph","children":[{"type":"text","value":"沿着 "},{"type":"inlineCode","value":"dp[i][j] === dp[i-1][j-1] + 1"},{"type":"text","value":" 的路径可以找到一个最长公共子序列，如果从 "},{"type":"inlineMath","value":"0"},{"type":"text","value":" 开始枚举 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 或 "},{"type":"inlineMath","value":"j"},{"type":"text","value":"\n则可以分别找到以第一个序列为base和以第二个序列为base的最小字典序最长公共子序列。"}]},{"type":"code","lang":"typescript","meta":"title=\"./findMinLexicographicalLCS.ts\" sourcefile=\"./findMinLexicographicalLCS.ts\" linenos collapsed","value":"/**\n * Find the least lexicographical order of the longest common subsequences.\n */\nexport function findMinLexicographicalLCS(\n  N1: number,\n  N2: number,\n  isEqual: (x: number, y: number) => boolean,\n): number[] {\n  if (N1 <= 0 || N2 <= 0) return []\n\n  const dp: number[][] = new Array(N1)\n  for (let i = 0; i < N1; i += 1) dp[i] = new Array(N2)\n\n  dp[0][0] = isEqual(0, 0) ? 1 : 0\n  for (let i = 1; i < N1; i += 1) {\n    dp[i][0] = dp[i - 1][0] | (isEqual(i, 0) ? 1 : 0)\n  }\n  for (let j = 1; j < N2; j += 1) {\n    dp[0][j] = dp[0][j - 1] | (isEqual(0, j) ? 1 : 0)\n  }\n\n  for (let i = 1; i < N1; i += 1) {\n    for (let j = 1; j < N2; j += 1) {\n      dp[i][j] = isEqual(i, j) ? dp[i - 1][j - 1] + 1 : Math.max(dp[i][j - 1], dp[i - 1][j])\n    }\n  }\n\n  const paired: number[] = new Array(N2).fill(-1)\n  for (let len = dp[N1 - 1][N2 - 1], i = N1 - 1; len > 0; len -= 1) {\n    for (let j = 0; j < N2; j += 1) {\n      if (dp[i][j] === len) {\n        while (i >= 0 && dp[i][j] === len) i -= 1\n        paired[j] = i + 1\n        break\n      }\n    }\n  }\n  return paired\n}\n"},{"type":"heading","depth":3,"children":[{"type":"text","value":"Text Diff"}],"identifier":"heading-text-diff"},{"type":"paragraph","children":[{"type":"text","value":"实际上只需要求出一个最小字典序的最长公共子序列，在此基础上将原序列patch上去就可以了。"}]},{"type":"code","lang":"typescript","meta":null,"value":"// 核心代码\nimport { findMinLexicographicalLCS } from '@algorithm.ts/lcs'\n\n// For simplicity, we can assume that the token is of type string\ntype T = string\nconst lTokens: T[] = [] // Omit the definition of lTokens.\nconst rTokens: T[] = [] // Omit the definition of rTokens.\nconst isEqual = (x: number, y: number): boolean => lTokens[x] === rTokens[y]\n\nconst paired: number[] = findMinLexicographicalLCS(N1, N2, isEqual)\nconst pieces: Array<ITextDiffPiece<T>> = []\nfor (let i = 0, j = 0, k: number; j < N2; ) {\n  for (k = j; k < N2 && paired[k] === -1; ) k += 1\n  if (k < N2) {\n    for (; i < paired[k]; i += 1) {\n      pieces.push({ type: 'REMOVED', token: lTokens[i] })\n    }\n    for (; j < k; j += 1) {\n      pieces.push({ type: 'ADDED', token: rTokens[j] })\n    }\n    pieces.push({ type: 'COMMON', token: rTokens[k] })\n    i += 1\n    j += 1\n  } else {\n    for (; i < N1; i += 1) {\n      pieces.push({ type: 'REMOVED', token: lTokens[i] })\n    }\n    for (; j < N2; j += 1) {\n      pieces.push({ type: 'ADDED', token: rTokens[j] })\n    }\n    break\n  }\n}\n"},{"type":"paragraph","children":[{"type":"text","value":"之后只需要合并 pieces （相同类型的紧邻 token 合并在一起）就好了。需要注意的是，对于 lTokens 或 rTokens\n为空的情况需要做一个特判："}]},{"type":"code","lang":"typescript","meta":null,"value":"if (lTokens.length <= 0) return [{ type: 'ADDED', value: rTokens.join('') }]\nif (rTokens.length <= 0) return [{ type: 'REMOVED', value: rTokens.join('') }]\n"},{"type":"heading","depth":2,"children":[{"type":"text","value":"Related"}],"identifier":"heading-related"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"linkReference","identifier":"lis","label":"lis","referenceType":"full","children":[{"type":"text","value":"最长上升子序列（LIS） | guanghechen"}]}]},{"type":"listItem","children":[{"type":"link","url":"https://leetcode.com/problems/longest-common-subsequence/","children":[{"type":"text","value":"#1143. Longest Common Subsequence | leetcode"}]}]},{"type":"listItem","children":[{"type":"link","url":"https://github.com/guanghechen/algorithm.ts/tree/main/packages/lcs","children":[{"type":"text","value":"@algorithm.ts/lcs"}]}]},{"type":"listItem","children":[{"type":"link","url":"https://stackoverflow.com/a/1313218","children":[{"type":"text","value":"Diff Algorithm? | StackOverflow"}]}]},{"type":"listItem","children":[{"type":"link","url":"http://www.xmailserver.org/diff2.pdf","children":[{"type":"text","value":"An O(ND) Difference Algorithm and its Variations"}]}]}]}]},"ecmaImports":[],"definitionMap":{"lis":{"type":"definition","identifier":"lis","label":"lis","url":"../lis"}},"footnoteDefinitionMap":{},"fields":{"slug":"/post/algorithm/lcs/"}},"previous":{"title":"最长上升子序列（LIS）","fields":{"slug":"/post/algorithm/lis/"}},"next":{"title":"端口管理","fields":{"slug":"/post/network/端口管理/"}},"postItems":{"nodes":[{"title":"洗牌问题和 knuth-shuffle 算法","createdAt":"2021-07-22","tags":["shuffle","knuth-shuffle","约瑟夫环"],"fields":{"slug":"/post/algorithm/shuffle/"}},{"title":"编译原理-语法制导翻译实现计算器","createdAt":"2016-06-23","tags":["编译原理","语法制导翻译","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/exercise/"}},{"title":"编译原理-语法分析","createdAt":"2016-06-18","tags":["编译原理","语法分析","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/grammar/"}},{"title":"端口管理","createdAt":"2021-06-20","tags":["network","port","ssh","netstat"],"fields":{"slug":"/post/network/端口管理/"}},{"title":"防抖和节流","createdAt":"2021-09-03","tags":["coding","debounce","throttle"],"fields":{"slug":"/post/algorithm/debounce-and-throttle/"}},{"title":"精确覆盖问题和 DLX 算法","createdAt":"2021-07-24","tags":["算法","精确覆盖","DLX 算法"],"fields":{"slug":"/post/algorithm/dlx/"}},{"title":"背包九讲","createdAt":"2021-06-27","tags":["acm","算法","动态规划","背包问题"],"fields":{"slug":"/post/algorithm/knapsack/"}},{"title":"最长公共子序列（LCS）","createdAt":"2021-06-02","tags":["最长公共子序列","LCS"],"fields":{"slug":"/post/algorithm/lcs/"}},{"title":"最长上升子序列（LIS）","createdAt":"2021-06-02","tags":["最长上升子序列","LIS"],"fields":{"slug":"/post/algorithm/lis/"}},{"title":"当你想来一把数独","createdAt":"2021-08-01","tags":["game","sudoku"],"fields":{"slug":"/post/game/sudoku/"}},{"title":"函数的极限","createdAt":"2021-05-09","tags":["math","函数","极限"],"fields":{"slug":"/post/math/calculus/函数的极限/"}},{"title":"自然对数底数e","createdAt":"2021-08-07","tags":["math","函数","极限","自然对数"],"fields":{"slug":"/post/math/calculus/自然对数底数e/"}},{"title":"小球放盒模型","createdAt":"2016-04-22","tags":["math","组合数学"],"fields":{"slug":"/post/math/combinatorial/小球放盒模型/"}},{"title":"不修改数组找出重复的数字","createdAt":"2021-06-29","tags":["quiz","分治","追击"],"fields":{"slug":"/post/quiz/partition/find-duplicate-number/"}},{"title":"统计区间内的线段","createdAt":"2021-07-21","tags":["quiz","扫描线","前缀和","树状数组","线段树"],"fields":{"slug":"/post/quiz/scanning-line/segments/"}},{"title":"CSS 选择器","createdAt":"2020-11-02","tags":["web","frontend","css"],"fields":{"slug":"/post/web/css/selector/"}},{"title":"ECMA 2020 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2020/"}},{"title":"ECMA 2021 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2021/"}},{"title":"Javascript 踩坑记——继承和原型链","createdAt":"2021-09-05","tags":["studynote","javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/inherit/"}},{"title":"React Reconciliation","createdAt":"2021-06-26","tags":["react","react reconciliation"],"fields":{"slug":"/post/web/react/reconciliation/"}},{"title":"XSS 与 CSRF 的攻防","createdAt":"2021-08-19","tags":["web","web security","csrf"],"fields":{"slug":"/post/web/security/xss-csrf/"}},{"title":"二分图","createdAt":"2016-07-17","tags":["算法","图论","二分图","学习笔记"],"fields":{"slug":"/post/algorithm/graph/bipartite-graph/"}},{"title":"最长回文子串 Manacher 算法","createdAt":"2016-04-18","tags":["算法","字符串","回文串","manacher"],"fields":{"slug":"/post/algorithm/string/manacher/"}},{"title":"树链剖分","createdAt":"2016-04-23","tags":["acm","算法","树链剖分"],"fields":{"slug":"/post/algorithm/tree/tcs/"}},{"title":"伸展树专题","createdAt":"2016-07-03","tags":["acm","Splay","解题报告","专题训练"],"fields":{"slug":"/post/data-structure/bbst/splay/"}},{"title":"组合游戏基础之 SG 函数和 SG 定理","createdAt":"2016-09-04","tags":["组合数学","组合游戏","SG 定理"],"fields":{"slug":"/post/math/combinatorial/SG/"}},{"title":"快速傅里叶变换和雷德算法","createdAt":"2016-04-10","tags":["acm","大数乘法","fft","快速傅里叶变换"],"fields":{"slug":"/post/math/number-theory/fft/"}},{"title":"数论基础之筛法","createdAt":"2016-05-06","tags":["math","数论","素数","欧拉函数","线性筛"],"fields":{"slug":"/post/math/number-theory/sieve/"}},{"title":"数论基础之原根","createdAt":"2016-05-16","tags":["math","数论","原根"],"fields":{"slug":"/post/math/number-theory/原根/"}},{"title":"数论基础之欧拉函数","createdAt":"2016-05-10","tags":["math","数论","既约剩余系","欧拉函数"],"fields":{"slug":"/post/math/number-theory/欧拉函数/"}},{"title":"约瑟夫环问题","createdAt":"2021-07-16","tags":["quiz","经典问题","约瑟夫环"],"fields":{"slug":"/post/quiz/classical/Josephus-ring/"}},{"title":"扔鸡蛋问题","createdAt":"2021-06-20","tags":["quiz","动态规划"],"fields":{"slug":"/post/quiz/dp/egg-drop/"}},{"title":"在 excel 中启用正则表达式","createdAt":"2021-03-29","tags":["excel","tools"],"fields":{"slug":"/post/tool/excel/regex/"}},{"title":"百度之星 2016 解题报告","createdAt":"2016-06-03","tags":["acm","递推","状态压缩","动态规划","字典树","解题报告"],"fields":{"slug":"/post/acm/contest/baiduzhixing/2016/"}},{"title":"51nod-1462 数据结构 -- 解题报告","createdAt":"2016-04-23","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/51nod/1462/"}},{"title":"HDU-5306 Gorgeous Sequence 解题报告","createdAt":"2016-04-09","tags":["acm","数据结构","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5306/"}},{"title":"HDU-5574 Colorful Tree 解题报告（原 2015-上海区域赛-C）","createdAt":"2016-04-12","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5574/"}},{"title":"HDU-5576 Expection of String 解题报告（原 2015-上海区域赛-E)","createdAt":"2016-04-24","tags":["acm","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5576/"}},{"title":"剑指offer 解题报告","createdAt":"2021-07-15","tags":["专题训练","解题报告"],"fields":{"slug":"/post/acm/oj/nowcoder/jz-offer/"}},{"title":"POJ-1324 Holedox Moving 解题报告","createdAt":"2016-04-13","tags":["acm","bfs","图论","状态压缩","解题报告"],"fields":{"slug":"/post/acm/oj/poj/1324/"}},{"title":"网络流 24 题","createdAt":"2016-07-30","tags":["acm","算法","图论","网络流","二分图","解题报告","专题训练"],"fields":{"slug":"/post/algorithm/graph/network-flow/24-problems/"}},{"title":"网络流基础之最大权闭合图","createdAt":"2016-07-24","tags":["算法","图论","网络流","最大权闭合图"],"fields":{"slug":"/post/algorithm/graph/network-flow/最大权闭合图/"}},{"title":"Dijkstra 算法","createdAt":"2021-05-29","tags":["算法","最短路","单源最短路","dijkstra"],"fields":{"slug":"/post/algorithm/graph/shortest-path/dijkstra/"}},{"title":"Custom React Hooks","createdAt":"2020-10-29","tags":["react","react hooks"],"fields":{"slug":"/post/web/react/hooks/custom/"}},{"title":"2016 多校第 2 场","createdAt":"2016-07-22","tags":["acm","训练赛","数据结构","解题报告"],"fields":{"slug":"/post/acm/contest/multi-university-training/2016/2/"}},{"title":"CCF 2015-09 最佳文章 解题报告","createdAt":"2016-06-26","tags":["acm","Aho-Corasick 自动机","矩阵快速幂","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/ccf/2015/09/E/"}},{"title":"数论基础之模方程初步","createdAt":"2016-05-04","tags":["math","数论","扩展欧几里得算法","中国剩余定理","Baby Step Gaint Step"],"fields":{"slug":"/post/math/number-theory/模方程/basic/"}}]}},"pageContext":{"id":"43ea9321-941c-5cce-9234-a231b414d33f","contentType":"post","paginationUrl":"/posts","previousPostId":"a1ea98d2-ce3a-5d6f-92dc-d600c92fc658","nextPostId":"b56f7b68-3e29-530e-b4d8-e98dcbfeaf5c"}},"staticQueryHashes":[],"slicesMap":{}}