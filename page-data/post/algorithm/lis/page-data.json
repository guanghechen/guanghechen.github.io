{"componentChunkName":"component---src-layout-post-post-tsx","path":"/post/algorithm/lis/","result":{"data":{"content":{"title":"最长上升子序列（LIS）","description":"最长上升子序列（LIS）","createdAt":"June 02, 2021","updatedAt":null,"timeToRead":"10min 16s","frontmatter2":{"aplayer":null,"wechatThumbnail":null},"toc":{"children":[{"depth":2,"identifier":"heading-前言","contents":[{"type":"text","value":"前言"}],"children":[]},{"depth":2,"identifier":"heading-最长上升子序列的长度","contents":[{"type":"text","value":"最长上升子序列的长度"}],"children":[{"depth":3,"identifier":"heading-动态规划","contents":[{"type":"text","value":"动态规划"}],"children":[]},{"depth":3,"identifier":"heading-单调栈优化","contents":[{"type":"text","value":"单调栈优化"}],"children":[]}]},{"depth":2,"identifier":"heading-字典序最小的最长上升子序列","contents":[{"type":"text","value":"字典序最小的最长上升子序列"}],"children":[{"depth":3,"identifier":"heading-动态规划-2","contents":[{"type":"text","value":"动态规划"}],"children":[]},{"depth":3,"identifier":"heading-单调栈优化-2","contents":[{"type":"text","value":"单调栈优化"}],"children":[]}]},{"depth":2,"identifier":"heading-最长非严格递增子序列","contents":[{"type":"text","value":"最长非严格递增子序列"}],"children":[{"depth":3,"identifier":"heading-动态规划-3","contents":[{"type":"text","value":"动态规划"}],"children":[]},{"depth":3,"identifier":"heading-单调栈优化-3","contents":[{"type":"text","value":"单调栈优化"}],"children":[]}]},{"depth":2,"identifier":"heading-related","contents":[{"type":"text","value":"Related"}],"children":[]}]},"categories":[],"tags":["最长上升子序列","LIS"],"ast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"前言"}],"identifier":"heading-前言"},{"type":"paragraph","children":[{"type":"text","value":"最长上升子序列（LIS）是讲解动态规划算法的经典例题，使用朴素的动态规划算法可以在\n"},{"type":"inlineMath","value":"O(N^2)"},{"type":"text","value":" 复杂度内求解；使用单调栈优化可以进一步将复杂度优化到 "},{"type":"inlineMath","value":"O(N \\log N)"},{"type":"text","value":"。此外，不存在重复字符的最长公共子序列问题（LCS）可以转化成最长上升子序列问题进行求解，这使得部分 LCS 也可以在 "},{"type":"inlineMath","value":"O(N \\log N)"},{"type":"text","value":" 复杂度内求解，相关内容在\n"},{"type":"linkReference","identifier":"lcs","label":"lcs","referenceType":"full","children":[{"type":"text","value":"最长公共子序列（LCS）"}]},{"type":"text","value":" 中进行了讨论，此处不再赘述。"}]},{"type":"paragraph","children":[{"type":"text","value":"一些定义："}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"上升子序列：对于数列 "},{"type":"inlineMath","value":"A=\\lbrace a_1,a_2,\\cdots,a_N \\rbrace"},{"type":"text","value":"，若其某一子序列\n"},{"type":"inlineMath","value":"B=\\lbrace a_{b_1}, a_{b_2}, \\cdots, a_{b_M}\\rbrace"},{"type":"text","value":" 满足\n"},{"type":"inlineMath","value":"b_i < b_{i+1}"},{"type":"text","value":" 且 "},{"type":"inlineMath","value":"a_{b_i} < a_{b_{i+1}}"},{"type":"text","value":"，则称 "},{"type":"inlineMath","value":"B"},{"type":"text","value":" 为 "},{"type":"inlineMath","value":"A"},{"type":"text","value":" 的一个上升子序列。"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"最长上升子序列： 上升子序列中元素个数最多的那些。"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"字典序最小的最长上升子序列： 最长上升子序列中（不妨设元素个数为 "},{"type":"inlineMath","value":"M"},{"type":"text","value":"），元素下标组成的 "},{"type":"inlineMath","value":"M"},{"type":"text","value":" 维向量最小的那个。"}]}]}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"最长上升子序列的长度"}],"identifier":"heading-最长上升子序列的长度"},{"type":"heading","depth":3,"children":[{"type":"text","value":"动态规划"}],"identifier":"heading-动态规划"},{"type":"paragraph","children":[{"type":"text","value":"记 "},{"type":"inlineMath","value":"dp_{i}"},{"type":"text","value":" 表示前 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 个数中以第 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 个数结尾的最长上升子序列长度，则状态转移方程为："}]},{"type":"math","value":"dp_{i}=\\max \\lbrace dp_x | 1 \\leqslant x < i, a_x < a_{i} \\rbrace + 1\n"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"时间复杂度："},{"type":"inlineMath","value":"O(N^2)"}]},{"type":"listItem","children":[{"type":"text","value":"额外空间复杂度："},{"type":"inlineMath","value":"O(N)"}]}]},{"type":"code","lang":"typescript","meta":"{10-12} title=\"findLengthOfLIS.1.ts\" sourcefile=\"./findLengthOfLIS.1.ts\" linenos","value":"export function findLengthOfLIS(\n  N: number,\n  cmp: (i: number, j: number) => -1 | 0 | 1 | number,\n): number {\n  if (N <= 0) return 0\n\n  const dp: number[] = new Array(N)\n  for (let j = 0, i: number, count: number; j < N; ++j) {\n    for (i = 0, count = 0; i < j; ++i) {\n      if (cmp(i, j) < 0) {\n        if (count < dp[i]) count = dp[i]\n      }\n    }\n    dp[j] = count + 1\n  }\n  return dp[N - 1]\n}\n"},{"type":"heading","depth":3,"children":[{"type":"text","value":"单调栈优化"}],"identifier":"heading-单调栈优化"},{"type":"paragraph","children":[{"type":"text","value":"维护一个单调栈 "},{"type":"inlineMath","value":"S"},{"type":"text","value":"，扫描数列 "},{"type":"inlineMath","value":"A"},{"type":"text","value":"，若 "},{"type":"inlineMath","value":"a_i"},{"type":"text","value":" 大于栈顶元素，则压栈，否则替换掉 "},{"type":"inlineMath","value":"S"},{"type":"text","value":"\n中第一个大于等于 "},{"type":"inlineMath","value":"a_i"},{"type":"text","value":" 的元素 "},{"type":"inlineMath","value":"S_x"},{"type":"text","value":"。则扫描完毕后，"},{"type":"inlineMath","value":"S"},{"type":"text","value":" 长度即为 "},{"type":"inlineMath","value":"A"},{"type":"text","value":" 的最长上升子序列的长度。因为 "},{"type":"inlineMath","value":"S"},{"type":"text","value":" 是单调栈，所以可以使用二分搜索 ("},{"type":"inlineCode","value":"lower_bound"},{"type":"text","value":") 快速找到 "},{"type":"inlineMath","value":"S_x"},{"type":"text","value":"。"}]},{"type":"paragraph","children":[{"type":"text","value":"由于对数组进行了一次 "},{"type":"inlineMath","value":"O(N)"},{"type":"text","value":" 遍历，对于每个遍历到的元素都执行了一次二分查找和常数次比较、更新操作，因此："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"时间复杂度："},{"type":"inlineMath","value":"O(N \\log N)"}]},{"type":"listItem","children":[{"type":"text","value":"额外空间复杂度："},{"type":"inlineMath","value":"O(L)"},{"type":"text","value":"，"},{"type":"inlineMath","value":"L"},{"type":"text","value":" 为最长上升子序列的长度"}]}]},{"type":"code","lang":"typescript","meta":"{11,14-15} title=\"findLengthOfLIS.2.ts\" sourcefile=\"./findLengthOfLIS.2.ts\" linenos","value":"import { lowerBound } from '@algorithm.ts/binary-search'\nimport type { ICompare } from '@algorithm.ts/types'\n\nexport function findLengthOfLIS(N: number, cmp: ICompare<number>): number {\n  if (N <= 0) return 0\n\n  const stack: number[] = [0]\n  for (let i = 1; i < N; ++i) {\n    const idx: number = lowerBound(0, stack.length, x => cmp(stack[x], i))\n\n    // Update the monotonous stack.\n    if (idx < stack.length) stack[idx] = i\n    else stack.push(i)\n  }\n  return stack.length\n}\n"},{"type":"heading","depth":2,"children":[{"type":"text","value":"字典序最小的最长上升子序列"}],"identifier":"heading-字典序最小的最长上升子序列"},{"type":"paragraph","children":[{"type":"text","value":"在上一个问题中，我们可以获得以 "},{"type":"inlineMath","value":"a_i"},{"type":"text","value":" 结尾的最长上升子序列长度，在此基础上找到一个LIS 是简单的："}]},{"type":"list","ordered":true,"orderType":"1","start":1,"marker":46,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"令 "},{"type":"inlineMath","value":"i = dp(N)"}]},{"type":"listItem","children":[{"type":"text","value":"若 "},{"type":"inlineMath","value":"dp(i) = 1"},{"type":"text","value":"，则停止算法"}]},{"type":"listItem","children":[{"type":"text","value":"找到一个 "},{"type":"inlineMath","value":"j < i"},{"type":"text","value":" 满足 "},{"type":"inlineMath","value":"dp(i) = dp(j) + 1"},{"type":"text","value":" 且 "},{"type":"inlineMath","value":"a_j < a_i"}]},{"type":"listItem","children":[{"type":"text","value":"令 "},{"type":"inlineMath","value":"i = j"},{"type":"text","value":"，执行 2."}]}]},{"type":"paragraph","children":[{"type":"text","value":"不难证明，收集上述算法中所有出现过的 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 即可得到原数列一个 "},{"type":"inlineMath","value":"LIS"},{"type":"text","value":" （下标列表）。由于 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 总是在减少，所以算法复杂度为 "},{"type":"inlineMath","value":"O(N)"},{"type":"text","value":"。"}]},{"type":"thematicBreak"},{"type":"paragraph","children":[{"type":"text","value":"接下来考虑如何获得一个字典序最小的最长上升子序列。为方便叙述，不妨记字典序最小的最长上升子序列为 "},{"type":"inlineMath","value":"T_0"},{"type":"text","value":"，其长度为 "},{"type":"inlineMath","value":"l"},{"type":"text","value":"，并记构成它的元素在原数列中的下标依次为：\n"},{"type":"inlineMath","value":"T=t_1,t_2, \\cdots t_l"},{"type":"text","value":"。"}]},{"type":"paragraph","children":[{"type":"text","value":"不难想到，"},{"type":"inlineMath","value":"T"},{"type":"text","value":" 中最后一个元素必然是满足 "},{"type":"inlineMath","value":"dp(i) = l"},{"type":"text","value":" 的最小的 "},{"type":"inlineMath","value":"i"},{"type":"text","value":"，即 "},{"type":"inlineMath","value":"t_l=i"},{"type":"text","value":"。而\n"},{"type":"inlineMath","value":"t_{l-1}"},{"type":"text","value":" 为满足 "},{"type":"inlineMath","value":"dp(j) = l - 1"},{"type":"text","value":" 且 "},{"type":"inlineMath","value":"j < t_l"},{"type":"text","value":" 的最小的 "},{"type":"inlineMath","value":"j"},{"type":"text","value":"；以此类推。于是可以得到如下算法："}]},{"type":"list","ordered":true,"orderType":"1","start":1,"marker":46,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"维护一个长度为 "},{"type":"inlineMath","value":"l"},{"type":"text","value":" 的数列 "},{"type":"inlineMath","value":"R=\\lbrace r_1, r_2, \\cdots r_l \\rbrace"},{"type":"text","value":"，数列中所有元素的初始值均为 "},{"type":"inlineMath","value":"-1"},{"type":"text","value":"；"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"从 "},{"type":"inlineMath","value":"N"},{"type":"text","value":" 到 "},{"type":"inlineMath","value":"1"},{"type":"text","value":" 遍历 "},{"type":"inlineMath","value":"i"},{"type":"text","value":"，对于每个 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 均执行 3；"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"记 "},{"type":"inlineMath","value":"x = dp(i)"},{"type":"text","value":"，若 "},{"type":"inlineMath","value":"x=l"},{"type":"text","value":"，则直接将 "},{"type":"inlineMath","value":"R_x"},{"type":"text","value":" 更新为 "},{"type":"inlineMath","value":"i"},{"type":"text","value":"，因为它参与构成的最长上升子序列的字典序肯定比之前找到的 "},{"type":"inlineMath","value":"R_l"},{"type":"text","value":" 更优。否则，"},{"type":"inlineMath","value":"x<l"},{"type":"text","value":"，此时需要检查一下是否已经找到了一个合法的 "},{"type":"inlineMath","value":"R_{x+1}"},{"type":"text","value":"，即以 "},{"type":"inlineMath","value":"a_{R_{x+1}}"},{"type":"text","value":" 作为结尾的最长子序列长度为\n"},{"type":"inlineMath","value":"x+1"},{"type":"text","value":"："}]},{"type":"list","ordered":false,"marker":45,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"若存在且 "},{"type":"inlineMath","value":"a_i < a_{R_{x+1}}"},{"type":"text","value":"，则将 "},{"type":"inlineMath","value":"R_x"},{"type":"text","value":" 更新为 "},{"type":"inlineMath","value":"i"},{"type":"text","value":"，因为它肯定比之前找到的\n"},{"type":"inlineMath","value":"R_x"},{"type":"text","value":" 更优（从字典序上来看）；"}]},{"type":"listItem","children":[{"type":"text","value":"否则，抛弃 "},{"type":"inlineMath","value":"i"},{"type":"text","value":"，不做任何操作。"}]}]}]}]},{"type":"admonition","keyword":"tip","title":[{"type":"text","value":"ATTENTION"}],"children":[{"type":"paragraph","children":[{"type":"text","value":"综上所述，求最小字典序的最长上升子序列的算法为求最长上升子序列的长度的算法基础上加一次 "},{"type":"inlineMath","value":"O(N)"},{"type":"text","value":" 遍历，因此它们的总体复杂度相同"},{"type":"footnoteReference","label":"1","identifier":"footnote-1"},{"type":"text","value":"。"}]},{"type":"paragraph","children":[{"type":"text","value":"下面两个算法中给出的代码实现都是求 "},{"type":"inlineMath","value":"T"},{"type":"text","value":" 而非 "},{"type":"inlineMath","value":"T_0"},{"type":"text","value":"，即返回值为构成最小字典序的最长上升子序列的元素其在原数列中的下标列表。如需获得实际的元素，可以自行映射，如："}]},{"type":"code","lang":"typescript","meta":"{6} title=\"getMinimumLexicographicOrderLIS.ts\"","value":"function getMinimumLexicographicOrderLIS(nums: number[]): number[] {\n  const idx: number = findMinimumLexicographicOrderLIS(\n    nums, \n    (x, y) => x - y\n  )\n  return idx.map(id => nums[id])\n}\n"}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"动态规划"}],"identifier":"heading-动态规划-2"},{"type":"code","lang":"typescript","meta":"{17-24} title=\"findMinimumLexicographicOrderLIS.1.ts\" sourcefile=\"./findMinimumLexicographicOrderLIS.1.ts\"  linenos","value":"export function findMinimumLexicographicOrderLIS(\n  N: number,\n  cmp: (i: number, j: number) => -1 | 0 | 1 | number,\n): number[] {\n  if (N <= 0) return []\n\n  const dp: number[] = new Array(N)\n  for (let j = 0, i: number, count: number; j < N; ++j) {\n    for (i = 0, count = 0; i < j; ++i) {\n      if (cmp(i, j) < 0) {\n        if (count < dp[i]) count = dp[i]\n      }\n    }\n    dp[j] = count + 1\n  }\n\n  const results: number[] = new Array(dp[N - 1]).fill(-1)\n  for (let i = N - 1; i >= 0; --i) {\n    const idx = dp[i] - 1\n    if (idx + 1 < results.length) {\n      if (results[idx + 1] === -1 || cmp(i, results[idx + 1]) >= 0) continue\n    }\n    results[idx] = i\n  }\n  return results\n}\n"},{"type":"heading","depth":3,"children":[{"type":"text","value":"单调栈优化"}],"identifier":"heading-单调栈优化-2"},{"type":"paragraph","children":[{"type":"text","value":"需要额外维护一个数组（对应下面代码中的 "},{"type":"inlineCode","value":"rank"},{"type":"text","value":" 数组），其含义与前面动态规划解法的\n"},{"type":"inlineCode","value":"dp"},{"type":"text","value":" 数组类似："},{"type":"inlineMath","value":"rank(i)"},{"type":"text","value":" 表示前 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 个数中以第 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 个数结尾的最长上升子序列长度\n"},{"type":"inlineMath","value":"-1"},{"type":"text","value":"。"}]},{"type":"code","lang":"typescript","meta":"{13,20-27} title=\"findMinimumLexicographicOrderLIS.2.ts\" sourcefile=\"./findMinimumLexicographicOrderLIS.2.ts\"  linenos","value":"import { lowerBound } from '@algorithm.ts/binary-search'\nimport type { ICompare } from '@algorithm.ts/types'\n\nexport function findMinimumLexicographicOrderLIS(N: number, cmp: ICompare<number>): number[] {\n  if (N <= 0) return []\n\n  const rank: number[] = new Array(N)\n  const stack: number[] = []\n  for (let i = 0; i < N; ++i) {\n    const idx: number = lowerBound(0, stack.length, x => cmp(stack[x], i))\n    rank[i] = idx\n\n    // Update the monotonous stack.\n    if (idx < stack.length) stack[idx] = i\n    else stack.push(i)\n  }\n\n  stack.fill(-1)\n  for (let i = N - 1; i >= 0; --i) {\n    const idx = rank[i]\n    if (idx + 1 < stack.length) {\n      if (stack[idx + 1] === -1 || cmp(i, stack[idx + 1]) >= 0) continue\n    }\n    stack[idx] = i\n  }\n  return stack\n}\n"},{"type":"heading","depth":2,"children":[{"type":"text","value":"最长非严格递增子序列"}],"identifier":"heading-最长非严格递增子序列"},{"type":"paragraph","children":[{"type":"text","value":"和上升子序列相比只改变了一个条件，即目标序列中相邻元素不再是严格小于，而是小于等于。不难得到新的状态转移方程："}]},{"type":"math","value":"dp_{i}=\\max \\lbrace dp_x | 1 \\leqslant x < i, a_x \\leqslant a_{i} \\rbrace + 1\n"},{"type":"admonition","keyword":"tip","title":[],"children":[{"type":"paragraph","children":[{"type":"text","value":"观察转移方程的变化，不难想到可以通过修改 "},{"type":"inlineCode","value":"cmp"},{"type":"text","value":" 函数的定义（也就是把“小于等于”都视作小于）来支持上文提到的算法求解最长严格非递增子序列问题，如："}]},{"type":"code","lang":"typescript","meta":"title=\"findLengthOfLNIS.3.ts\" linenos","value":"export function findLengthOfLNIS(\n  N: number,\n  cmp: (i: number, j: number) => -1 | 0 | 1 | number,\n): number {\n  return findLengthOfLIS(nums, (i, j) => cmp(i, j) <= 0 ? -1 : 1) \n}\n"}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"动态规划"}],"identifier":"heading-动态规划-3"},{"type":"code","lang":"typescript","meta":"{10} title=\"findLengthOfLNIS.1.ts\" sourcefile=\"./findLengthOfLNIS.1.ts\"  linenos","value":"export function findLengthOfLNIS(\n  N: number,\n  cmp: (i: number, j: number) => -1 | 0 | 1 | number,\n): number {\n  if (N <= 0) return 0\n\n  const dp: number[] = new Array(N)\n  for (let j = 0, i: number, count: number; j < N; ++j) {\n    for (i = 0, count = 0; i < j; ++i) {\n      if (cmp(i, j) <= 0) {\n        if (count < dp[i]) count = dp[i]\n      }\n    }\n    dp[j] = count + 1\n  }\n  return dp[N - 1]\n}\n"},{"type":"heading","depth":3,"children":[{"type":"text","value":"单调栈优化"}],"identifier":"heading-单调栈优化-3"},{"type":"paragraph","children":[{"type":"text","value":"只要把 "},{"type":"inlineCode","value":"lowerBound"},{"type":"text","value":" 改成 "},{"type":"inlineCode","value":"upperBound"},{"type":"text","value":" 就好了。"}]},{"type":"code","lang":"typescript","meta":"{1,11} title=\"findLengthOfLNIS.2.ts\" sourcefile=\"findLengthOfLNIS.2.ts\"  linenos","value":"import { upperBound } from '@algorithm.ts/binary-search'\nimport type { ICompare } from '@algorithm.ts/types'\n\nexport function findLengthOfLNIS(N: number, cmp: ICompare<number>): number {\n  if (N <= 0) return 0\n\n  const stack: number[] = [0]\n  for (let i = 1; i < N; ++i) {\n    const idx: number = upperBound(0, stack.length, x => cmp(stack[x], i))\n\n    // Update the monotonous stack.\n    if (idx < stack.length) stack[idx] = i\n    else stack.push(i)\n  }\n  return stack.length\n}\n"},{"type":"heading","depth":2,"children":[{"type":"text","value":"Related"}],"identifier":"heading-related"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"linkReference","identifier":"@algorithm.ts/binary-search","label":"@algorithm.ts/binary-search","referenceType":"collapsed","children":[{"type":"text","value":"@algorithm.ts/binary-search"}]}]},{"type":"listItem","children":[{"type":"linkReference","identifier":"lcs","label":"lcs","referenceType":"full","children":[{"type":"text","value":"最长公共子序列（LCS） | guanghechen"}]}]},{"type":"listItem","children":[{"type":"link","url":"https://leetcode.com/problems/longest-increasing-subsequence/","children":[{"type":"text","value":"#300. Longest Increasing Subsequence | leetcode"}]}]}]}]},"ecmaImports":[],"definitionMap":{"lcs":{"type":"definition","identifier":"lcs","label":"lcs","url":"../lcs"},"@algorithm.ts/binary-search":{"type":"definition","identifier":"@algorithm.ts/binary-search","label":"@algorithm.ts/binary-search","url":"https://github.com/guanghechen/algorithm.ts/tree/main/packages/binary-search"}},"footnoteDefinitionMap":{"footnote-1":{"type":"footnoteDefinition","identifier":"footnote-1","label":"1","children":[{"type":"paragraph","children":[{"type":"text","value":"单调栈优化算法的额外空间复杂度退化为 "},{"type":"inlineMath","value":"O(N)"}]}]}},"fields":{"slug":"/post/algorithm/lis/"}},"previous":{"title":"Dijkstra 算法","fields":{"slug":"/post/algorithm/graph/shortest-path/dijkstra/"}},"next":{"title":"最长公共子序列（LCS）","fields":{"slug":"/post/algorithm/lcs/"}},"postItems":{"nodes":[{"title":"洗牌问题和 knuth-shuffle 算法","createdAt":"2021-07-22","tags":["shuffle","knuth-shuffle","约瑟夫环"],"fields":{"slug":"/post/algorithm/shuffle/"}},{"title":"编译原理-语法制导翻译实现计算器","createdAt":"2016-06-23","tags":["编译原理","语法制导翻译","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/exercise/"}},{"title":"编译原理-语法分析","createdAt":"2016-06-18","tags":["编译原理","语法分析","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/grammar/"}},{"title":"端口管理","createdAt":"2021-06-20","tags":["network","port","ssh","netstat"],"fields":{"slug":"/post/network/端口管理/"}},{"title":"防抖和节流","createdAt":"2021-09-03","tags":["coding","debounce","throttle"],"fields":{"slug":"/post/algorithm/debounce-and-throttle/"}},{"title":"精确覆盖问题和 DLX 算法","createdAt":"2021-07-24","tags":["算法","精确覆盖","DLX 算法"],"fields":{"slug":"/post/algorithm/dlx/"}},{"title":"背包九讲","createdAt":"2021-06-27","tags":["acm","算法","动态规划","背包问题"],"fields":{"slug":"/post/algorithm/knapsack/"}},{"title":"最长公共子序列（LCS）","createdAt":"2021-06-02","tags":["最长公共子序列","LCS"],"fields":{"slug":"/post/algorithm/lcs/"}},{"title":"最长上升子序列（LIS）","createdAt":"2021-06-02","tags":["最长上升子序列","LIS"],"fields":{"slug":"/post/algorithm/lis/"}},{"title":"当你想来一把数独","createdAt":"2021-08-01","tags":["game","sudoku"],"fields":{"slug":"/post/game/sudoku/"}},{"title":"函数的极限","createdAt":"2021-05-09","tags":["math","函数","极限"],"fields":{"slug":"/post/math/calculus/函数的极限/"}},{"title":"自然对数底数e","createdAt":"2021-08-07","tags":["math","函数","极限","自然对数"],"fields":{"slug":"/post/math/calculus/自然对数底数e/"}},{"title":"小球放盒模型","createdAt":"2016-04-22","tags":["math","组合数学"],"fields":{"slug":"/post/math/combinatorial/小球放盒模型/"}},{"title":"不修改数组找出重复的数字","createdAt":"2021-06-29","tags":["quiz","分治","追击"],"fields":{"slug":"/post/quiz/partition/find-duplicate-number/"}},{"title":"统计区间内的线段","createdAt":"2021-07-21","tags":["quiz","扫描线","前缀和","树状数组","线段树"],"fields":{"slug":"/post/quiz/scanning-line/segments/"}},{"title":"CSS 选择器","createdAt":"2020-11-02","tags":["web","frontend","css"],"fields":{"slug":"/post/web/css/selector/"}},{"title":"ECMA 2020 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2020/"}},{"title":"ECMA 2021 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2021/"}},{"title":"Javascript 踩坑记——继承和原型链","createdAt":"2021-09-05","tags":["studynote","javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/inherit/"}},{"title":"React Reconciliation","createdAt":"2021-06-26","tags":["react","react reconciliation"],"fields":{"slug":"/post/web/react/reconciliation/"}},{"title":"XSS 与 CSRF 的攻防","createdAt":"2021-08-19","tags":["web","web security","csrf"],"fields":{"slug":"/post/web/security/xss-csrf/"}},{"title":"二分图","createdAt":"2016-07-17","tags":["算法","图论","二分图","学习笔记"],"fields":{"slug":"/post/algorithm/graph/bipartite-graph/"}},{"title":"最长回文子串 Manacher 算法","createdAt":"2016-04-18","tags":["算法","字符串","回文串","manacher"],"fields":{"slug":"/post/algorithm/string/manacher/"}},{"title":"树链剖分","createdAt":"2016-04-23","tags":["acm","算法","树链剖分"],"fields":{"slug":"/post/algorithm/tree/tcs/"}},{"title":"伸展树专题","createdAt":"2016-07-03","tags":["acm","Splay","解题报告","专题训练"],"fields":{"slug":"/post/data-structure/bbst/splay/"}},{"title":"组合游戏基础之 SG 函数和 SG 定理","createdAt":"2016-09-04","tags":["组合数学","组合游戏","SG 定理"],"fields":{"slug":"/post/math/combinatorial/SG/"}},{"title":"快速傅里叶变换和雷德算法","createdAt":"2016-04-10","tags":["acm","大数乘法","fft","快速傅里叶变换"],"fields":{"slug":"/post/math/number-theory/fft/"}},{"title":"数论基础之筛法","createdAt":"2016-05-06","tags":["math","数论","素数","欧拉函数","线性筛"],"fields":{"slug":"/post/math/number-theory/sieve/"}},{"title":"数论基础之原根","createdAt":"2016-05-16","tags":["math","数论","原根"],"fields":{"slug":"/post/math/number-theory/原根/"}},{"title":"数论基础之欧拉函数","createdAt":"2016-05-10","tags":["math","数论","既约剩余系","欧拉函数"],"fields":{"slug":"/post/math/number-theory/欧拉函数/"}},{"title":"约瑟夫环问题","createdAt":"2021-07-16","tags":["quiz","经典问题","约瑟夫环"],"fields":{"slug":"/post/quiz/classical/Josephus-ring/"}},{"title":"扔鸡蛋问题","createdAt":"2021-06-20","tags":["quiz","动态规划"],"fields":{"slug":"/post/quiz/dp/egg-drop/"}},{"title":"在 excel 中启用正则表达式","createdAt":"2021-03-29","tags":["excel","tools"],"fields":{"slug":"/post/tool/excel/regex/"}},{"title":"百度之星 2016 解题报告","createdAt":"2016-06-03","tags":["acm","递推","状态压缩","动态规划","字典树","解题报告"],"fields":{"slug":"/post/acm/contest/baiduzhixing/2016/"}},{"title":"51nod-1462 数据结构 -- 解题报告","createdAt":"2016-04-23","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/51nod/1462/"}},{"title":"HDU-5306 Gorgeous Sequence 解题报告","createdAt":"2016-04-09","tags":["acm","数据结构","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5306/"}},{"title":"HDU-5574 Colorful Tree 解题报告（原 2015-上海区域赛-C）","createdAt":"2016-04-12","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5574/"}},{"title":"HDU-5576 Expection of String 解题报告（原 2015-上海区域赛-E)","createdAt":"2016-04-24","tags":["acm","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5576/"}},{"title":"剑指offer 解题报告","createdAt":"2021-07-15","tags":["专题训练","解题报告"],"fields":{"slug":"/post/acm/oj/nowcoder/jz-offer/"}},{"title":"POJ-1324 Holedox Moving 解题报告","createdAt":"2016-04-13","tags":["acm","bfs","图论","状态压缩","解题报告"],"fields":{"slug":"/post/acm/oj/poj/1324/"}},{"title":"网络流 24 题","createdAt":"2016-07-30","tags":["acm","算法","图论","网络流","二分图","解题报告","专题训练"],"fields":{"slug":"/post/algorithm/graph/network-flow/24-problems/"}},{"title":"网络流基础之最大权闭合图","createdAt":"2016-07-24","tags":["算法","图论","网络流","最大权闭合图"],"fields":{"slug":"/post/algorithm/graph/network-flow/最大权闭合图/"}},{"title":"Dijkstra 算法","createdAt":"2021-05-29","tags":["算法","最短路","单源最短路","dijkstra"],"fields":{"slug":"/post/algorithm/graph/shortest-path/dijkstra/"}},{"title":"Custom React Hooks","createdAt":"2020-10-29","tags":["react","react hooks"],"fields":{"slug":"/post/web/react/hooks/custom/"}},{"title":"2016 多校第 2 场","createdAt":"2016-07-22","tags":["acm","训练赛","数据结构","解题报告"],"fields":{"slug":"/post/acm/contest/multi-university-training/2016/2/"}},{"title":"CCF 2015-09 最佳文章 解题报告","createdAt":"2016-06-26","tags":["acm","Aho-Corasick 自动机","矩阵快速幂","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/ccf/2015/09/E/"}},{"title":"数论基础之模方程初步","createdAt":"2016-05-04","tags":["math","数论","扩展欧几里得算法","中国剩余定理","Baby Step Gaint Step"],"fields":{"slug":"/post/math/number-theory/模方程/basic/"}}]}},"pageContext":{"id":"a1ea98d2-ce3a-5d6f-92dc-d600c92fc658","contentType":"post","paginationUrl":"/posts","previousPostId":"75f19751-c005-518a-ac59-b66104d190e9","nextPostId":"43ea9321-941c-5cce-9234-a231b414d33f"}},"staticQueryHashes":[],"slicesMap":{}}