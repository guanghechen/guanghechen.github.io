{"componentChunkName":"component---src-layout-post-post-tsx","path":"/post/algorithm/string/manacher/","result":{"data":{"content":{"title":"最长回文子串 Manacher 算法","description":"最长回文子串 Manacher 算法","createdAt":"April 18, 2016","updatedAt":null,"timeToRead":"5min 25s","frontmatter2":{"aplayer":null,"wechatThumbnail":null},"toc":{"children":[{"depth":2,"identifier":"heading-前言","contents":[{"type":"text","value":"前言"}],"children":[]},{"depth":2,"identifier":"heading-算法原理","contents":[{"type":"text","value":"算法原理"}],"children":[]},{"depth":2,"identifier":"heading-算法实现","contents":[{"type":"text","value":"算法实现"}],"children":[]},{"depth":2,"identifier":"heading-复杂度分析","contents":[{"type":"text","value":"复杂度分析"}],"children":[]},{"depth":2,"identifier":"heading-小记","contents":[{"type":"text","value":"小记"}],"children":[]},{"depth":2,"identifier":"heading-related","contents":[{"type":"text","value":"Related"}],"children":[]}]},"categories":[],"tags":["算法","字符串","回文串","manacher"],"ast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"前言"}],"identifier":"heading-前言"},{"type":"paragraph","children":[{"type":"text","value":"Manacher 算法可在线性时间内求出一个字符串中所有以任意位置或相邻两个位置为中心的最长回文串。"}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"算法原理"}],"identifier":"heading-算法原理"},{"type":"paragraph","children":[{"type":"text","value":"记给定的字符串为 "},{"type":"inlineMath","value":"S"},{"type":"text","value":"，其长度为 "},{"type":"inlineMath","value":"N"},{"type":"text","value":"。为方便描述，在 "},{"type":"inlineMath","value":"S"},{"type":"text","value":" 中的任一对相邻字符间插入一个特殊字符 "},{"type":"inlineCode","value":"$"},{"type":"text","value":"，目的是保证新串中所有的回文子串长度都为奇数（只是为了方便讨论算法，实际实现时并不需要此操作）。设以 "},{"type":"inlineMath","value":"S_i"},{"type":"text","value":" 为中心的最长回文串长度为 "},{"type":"inlineMath","value":"2 r_i + 1"},{"type":"text","value":"。取 "},{"type":"inlineMath","value":"j < i"},{"type":"text","value":"，作 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 点关于 "},{"type":"inlineMath","value":"j"},{"type":"text","value":" 的对称点 "},{"type":"inlineMath","value":"i'"},{"type":"text","value":"："}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"若 "},{"type":"inlineMath","value":"j + r_j > i"},{"type":"text","value":"，根据对称性，不难 有 "},{"type":"inlineMath","value":"i' > j - r_j"},{"type":"text","value":"."}]},{"type":"paragraph","children":[{"type":"text","value":"接下来观察在 "},{"type":"inlineMath","value":"j + r_j > i"},{"type":"text","value":" 前提下，"},{"type":"inlineMath","value":"r_i"},{"type":"text","value":" 和此前已求出的 "},{"type":"inlineMath","value":"r_{i'}"},{"type":"text","value":" 及 "},{"type":"inlineMath","value":"r_j"},{"type":"text","value":" 之间的关系："}]},{"type":"list","ordered":false,"marker":45,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"情况一："},{"type":"inlineMath","value":"i' - r_{i'} > j - r_j"}]},{"type":"paragraph","children":[{"type":"text","value":"如下图所示，由对称性可以断言 "},{"type":"inlineMath","value":"r_i = r_{i'}"},{"type":"text","value":"。"}]},{"type":"paragraph","children":[{"type":"imageReference","identifier":"manacher-1.png","label":"manacher-1.png","referenceType":"collapsed","alt":"manacher-1.png","src":"/static/eb4b3a5754367014f1428628ee5ce236/0227d/Manacher1.png","srcSet":"/static/eb4b3a5754367014f1428628ee5ce236/fa83e/Manacher1.png 163w,\n/static/eb4b3a5754367014f1428628ee5ce236/f0ade/Manacher1.png 325w,\n/static/eb4b3a5754367014f1428628ee5ce236/0227d/Manacher1.png 650w,\n/static/eb4b3a5754367014f1428628ee5ce236/9c83c/Manacher1.png 975w,\n/static/eb4b3a5754367014f1428628ee5ce236/c5f89/Manacher1.png 1118w","sizes":"(max-width: 650px) 100vw, 650px","loading":"lazy","decoding":"async"}]},{"type":"paragraph","children":[{"type":"text","value":"事实上，假设 "},{"type":"inlineMath","value":"k' = i' - r_{i'} - 1 "},{"type":"text","value":" 关于 "},{"type":"inlineMath","value":"j"},{"type":"text","value":" 的对称点为 "},{"type":"inlineMath","value":"k"},{"type":"text","value":"; "},{"type":"inlineMath","value":"k"},{"type":"text","value":" 关于 "},{"type":"inlineMath","value":"i"},{"type":"text","value":"\n的对称点为 "},{"type":"inlineMath","value":"k_i"},{"type":"text","value":"；"},{"type":"inlineMath","value":"k_i"},{"type":"text","value":" 关于 "},{"type":"inlineMath","value":"j"},{"type":"text","value":" 的对称点为 "},{"type":"inlineMath","value":"k'_i"},{"type":"text","value":" 。如下图所示，显然有 "},{"type":"inlineMath","value":"S_k = S_{k'},\\; S_{k_i}=S_{k'_i}"},{"type":"text","value":"，且 "},{"type":"inlineMath","value":"S_{k'} \\neq S_{k'_i}"},{"type":"text","value":"；所以 "},{"type":"inlineMath","value":"S_k \\neq S_{k_i}"},{"type":"text","value":"，故 "},{"type":"inlineMath","value":"r_i=r_{i'}"},{"type":"text","value":"。"}]},{"type":"paragraph","children":[{"type":"imageReference","identifier":"manacher-2.png","label":"manacher-2.png","referenceType":"collapsed","alt":"manacher-2.png","src":"/static/6f8ec081ed0736e2822814d2607c59b1/0227d/Manacher2.png","srcSet":"/static/6f8ec081ed0736e2822814d2607c59b1/fa83e/Manacher2.png 163w,\n/static/6f8ec081ed0736e2822814d2607c59b1/f0ade/Manacher2.png 325w,\n/static/6f8ec081ed0736e2822814d2607c59b1/0227d/Manacher2.png 650w,\n/static/6f8ec081ed0736e2822814d2607c59b1/9c83c/Manacher2.png 975w,\n/static/6f8ec081ed0736e2822814d2607c59b1/071e9/Manacher2.png 1127w","sizes":"(max-width: 650px) 100vw, 650px","loading":"lazy","decoding":"async"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"情况二："},{"type":"inlineMath","value":"i' - r_{i'} < j - r_j"}]},{"type":"paragraph","children":[{"type":"text","value":"如下图所示，由对称性可以断言 "},{"type":"inlineMath","value":"i + r_i = j + r_j"},{"type":"text","value":"，即 "},{"type":"inlineMath","value":"r_i = j + r_j - i"},{"type":"text","value":"。"}]},{"type":"paragraph","children":[{"type":"imageReference","identifier":"manacher-3.png","label":"manacher-3.png","referenceType":"collapsed","alt":"manacher-3.png","src":"/static/b78d54dbd7af08943f2ca51a3b31f4bb/0227d/Manacher3.png","srcSet":"/static/b78d54dbd7af08943f2ca51a3b31f4bb/fa83e/Manacher3.png 163w,\n/static/b78d54dbd7af08943f2ca51a3b31f4bb/f0ade/Manacher3.png 325w,\n/static/b78d54dbd7af08943f2ca51a3b31f4bb/0227d/Manacher3.png 650w,\n/static/b78d54dbd7af08943f2ca51a3b31f4bb/9c83c/Manacher3.png 975w,\n/static/b78d54dbd7af08943f2ca51a3b31f4bb/57162/Manacher3.png 1120w","sizes":"(max-width: 650px) 100vw, 650px","loading":"lazy","decoding":"async"}]},{"type":"paragraph","children":[{"type":"text","value":"首先，根据对称性，显然有 "},{"type":"inlineMath","value":"i + r_i >= j + r_j"},{"type":"text","value":" 成立；其次，若 "},{"type":"inlineMath","value":"i + r_i > j + r_j"},{"type":"text","value":"，根据对称性则有 "},{"type":"inlineMath","value":"S_{j+r_j + 1} = S_{j-r_j - 1}"},{"type":"text","value":" 成立，这和 "},{"type":"inlineMath","value":"r_j"},{"type":"text","value":" 为以 "},{"type":"inlineMath","value":"j"},{"type":"text","value":" 为中心的最长回文串半径相冲突；故 "},{"type":"inlineMath","value":"i + r_i = j + r_j"},{"type":"text","value":"。"}]}]}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"否则，"},{"type":"inlineMath","value":"j + r_j \\leqslant i"},{"type":"text","value":"，此时不能做出更多的假设，只能暴力匹配。幸运地是，可以证明暴力匹配的次数为总字符数，即 "},{"type":"inlineMath","value":"O(N)"},{"type":"text","value":" 的。"}]}]}]},{"type":"paragraph","children":[{"type":"text","value":"剩下的问题是如何快速找到这样的 "},{"type":"inlineMath","value":"j"},{"type":"text","value":" 呢？注意到，其实我们只要获得 "},{"type":"inlineMath","value":"j+r_j"},{"type":"text","value":" 值最大的那个 "},{"type":"inlineMath","value":"j"},{"type":"text","value":" 就好了，这很容易在均摊 "},{"type":"inlineMath","value":"O(1)"},{"type":"text","value":" 的复杂度内做到（只要再扫描 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 时顺便更新\n"},{"type":"inlineMath","value":"j"},{"type":"text","value":" 就好了）。"}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"算法实现"}],"identifier":"heading-算法实现"},{"type":"paragraph","children":[{"type":"text","value":"上文中提到的的插入特殊字符是为了方便讲解，实现时可以将回文串 "},{"type":"inlineMath","value":"[l,r]"},{"type":"text","value":" 的长度存在\n"},{"type":"inlineMath","value":"r_{l+r}"},{"type":"text","value":" 中。不难发现，当回文串长度为偶数时，"},{"type":"inlineMath","value":"l+r \\equiv 1\\mod 2"},{"type":"text","value":"。"}]},{"type":"paragraph","children":[{"type":"text","value":"参考了《ACM国际大学生程序设计竞赛:算法与实现》的代码。高亮的那行代码展示了如何维护 "},{"type":"inlineMath","value":"j"}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"C++"}]},{"type":"code","lang":"cpp","meta":"{14} title=\"manacher.cpp\" linenos","value":"void manacher(char* S, int* R, int n) {\n  R[0] = 1;\n  int _size = (n << 1) - 1;\n  for (int i = 1, j = 0; i < _size; ++i) {\n    int l = i >> 1, r = i - l;\n    int rst = (j - 1 >> 1) + R[j];\n    R[i] = rst < r ? 0 : min(rst - r + 1, R[(j << 1) - i]);\n\n    while (\n      l - R[i] >= 0 && \n      r + R[i] < n && \n      S[l - R[i]] == S[r + R[i]]\n    ) ++R[i];\n    if (r + R[i] > rst) j = i;\n  }\n}\n"}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"Typescript （你也可以直接使用 "},{"type":"linkReference","identifier":"@algorithm.ts/manacher","label":"@algorithm.ts/manacher","referenceType":"collapsed","children":[{"type":"text","value":"@algorithm.ts/manacher"}]},{"type":"text","value":"）"}]},{"type":"code","lang":"typescript","meta":"{15} title=\"manacher.ts\" linenos","value":"function manacher(text: string): number[] {\n  const N = text.length\n  const _size = (N << 1) - 1 \n  const R: number[] = new Array(_size)\n\n  R[0] = 1\n  for (let i = 1, j = 0; i < _size; ++i) {\n    const p: number = i >> 1\n    const q: number = i - p\n    const r: number = ((j + 1) >> 1) + R[j] - 1\n\n    let L = r < q ? 0 : Math.min(r - q + 1, R[(j << 1) - i])\n    for (; p > L - 1 && q + L < N; ++L) {\n      if (text[p - L] !== text[q + L]) break\n    }\n    R[i] = L\n\n    if (q + L - 1 > r) j = i\n  }\n}\n"}]}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"复杂度分析"}],"identifier":"heading-复杂度分析"},{"type":"paragraph","children":[{"type":"text","value":"由于每一次只从未被匹配过的字符出发往右扩展，一共只有 "},{"type":"inlineMath","value":"O(N)"},{"type":"text","value":" 个字符，所以复杂度是线性的。"}]},{"type":"list","ordered":false,"marker":45,"spread":false,"children":[{"type":"listItem","children":[{"type":"inlineCode","value":"空间复杂度"},{"type":"text","value":" "},{"type":"inlineMath","value":"O(N)"}]},{"type":"listItem","children":[{"type":"inlineCode","value":"时间复杂度"},{"type":"text","value":" "},{"type":"inlineMath","value":"O(N)"}]}]},{"type":"paragraph","children":[{"type":"text","value":"核心代码："}]},{"type":"code","lang":"typescript","meta":"title=\"core.ts\"","value":"let L = r < q ? 0 : Math.min(r - q + 1, R[(j << 1) - i])\nif (q + L - 1 > r) j = i\n"},{"type":"heading","depth":2,"children":[{"type":"text","value":"小记"}],"identifier":"heading-小记"},{"type":"paragraph","children":[{"type":"text","value":"第一次接触这个算法是在 2016 年武大的校赛上；头一回没有抱大腿获奖;\n虽然奖品有点坑。。。"}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"Related"}],"identifier":"heading-related"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"《ACM国际大学生程序设计竞赛:算法与实现》 清华大学出版社 余勇主编"}]},{"type":"listItem","children":[{"type":"linkReference","identifier":"@algorithm.ts/manacher","label":"@algorithm.ts/manacher","referenceType":"collapsed","children":[{"type":"text","value":"@algorithm.ts/manacher"}]}]}]}]},"ecmaImports":[],"definitionMap":{"@algorithm.ts/manacher":{"type":"definition","identifier":"@algorithm.ts/manacher","label":"@algorithm.ts/manacher","url":"https://github.com/guanghechen/algorithm.ts/tree/main/packages/manacher"},"manacher-1.png":{"type":"definition","identifier":"manacher-1.png","label":"manacher-1.png","url":"/static/eb4b3a5754367014f1428628ee5ce236/0227d/Manacher1.png","title":"图1"},"manacher-2.png":{"type":"definition","identifier":"manacher-2.png","label":"manacher-2.png","url":"/static/6f8ec081ed0736e2822814d2607c59b1/0227d/Manacher2.png","title":"图2"},"manacher-3.png":{"type":"definition","identifier":"manacher-3.png","label":"manacher-3.png","url":"/static/b78d54dbd7af08943f2ca51a3b31f4bb/0227d/Manacher3.png","title":"图3"}},"footnoteDefinitionMap":{},"fields":{"slug":"/post/algorithm/string/manacher/"}},"previous":{"title":"POJ-1324 Holedox Moving 解题报告","fields":{"slug":"/post/acm/oj/poj/1324/"}},"next":{"title":"小球放盒模型","fields":{"slug":"/post/math/combinatorial/小球放盒模型/"}},"postItems":{"nodes":[{"title":"Custom React Hooks","createdAt":"2020-10-30","tags":["react","react hooks"],"fields":{"slug":"/post/web/react/hooks/custom/"}},{"title":"React Reconciliation","createdAt":"2021-06-27","tags":["react","react reconciliation"],"fields":{"slug":"/post/web/react/reconciliation/"}},{"title":"ECMA 2020 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2020/"}},{"title":"XSS 与 CSRF 的攻防","createdAt":"2021-08-19","tags":["web","web security","csrf"],"fields":{"slug":"/post/web/security/xss-csrf/"}},{"title":"Javascript 踩坑记——继承和原型链","createdAt":"2021-09-05","tags":["studynote","javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/inherit/"}},{"title":"CSS 选择器","createdAt":"2020-11-02","tags":["web","frontend","css"],"fields":{"slug":"/post/web/css/selector/"}},{"title":"ECMA 2021 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2021/"}},{"title":"在 excel 中启用正则表达式","createdAt":"2021-03-30","tags":["excel","tools"],"fields":{"slug":"/post/tool/excel/regex/"}},{"title":"统计区间内的线段","createdAt":"2021-07-21","tags":["quiz","扫描线","前缀和","树状数组","线段树"],"fields":{"slug":"/post/quiz/scanning-line/segments/"}},{"title":"约瑟夫环问题","createdAt":"2021-07-17","tags":["quiz","经典问题","约瑟夫环"],"fields":{"slug":"/post/quiz/classical/Josephus-ring/"}},{"title":"端口管理","createdAt":"2021-06-20","tags":["network","port","ssh","netstat"],"fields":{"slug":"/post/network/端口管理/"}},{"title":"数论基础之欧拉函数","createdAt":"2016-05-10","tags":["math","数论","既约剩余系","欧拉函数"],"fields":{"slug":"/post/math/number-theory/欧拉函数/"}},{"title":"扔鸡蛋问题","createdAt":"2021-06-20","tags":["quiz","动态规划"],"fields":{"slug":"/post/quiz/dp/egg-drop/"}},{"title":"数论基础之模方程初步","createdAt":"2016-05-04","tags":["math","数论","扩展欧几里得算法","中国剩余定理","Baby Step Gaint Step"],"fields":{"slug":"/post/math/number-theory/模方程/basic/"}},{"title":"不修改数组找出重复的数字","createdAt":"2021-06-29","tags":["quiz","分治","追击"],"fields":{"slug":"/post/quiz/partition/find-duplicate-number/"}},{"title":"数论基础之原根","createdAt":"2016-05-16","tags":["math","数论","原根"],"fields":{"slug":"/post/math/number-theory/原根/"}},{"title":"快速傅里叶变换和雷德算法","createdAt":"2016-04-10","tags":["acm","大数乘法","fft","快速傅里叶变换"],"fields":{"slug":"/post/math/number-theory/fft/"}},{"title":"小球放盒模型","createdAt":"2016-04-22","tags":["math","组合数学"],"fields":{"slug":"/post/math/combinatorial/小球放盒模型/"}},{"title":"组合游戏基础之 SG 函数和 SG 定理","createdAt":"2016-09-04","tags":["组合数学","组合游戏","SG 定理"],"fields":{"slug":"/post/math/combinatorial/SG/"}},{"title":"数论基础之筛法","createdAt":"2016-05-06","tags":["math","数论","素数","欧拉函数","线性筛"],"fields":{"slug":"/post/math/number-theory/sieve/"}},{"title":"函数的极限","createdAt":"2021-05-09","tags":["math","函数","极限"],"fields":{"slug":"/post/math/calculus/函数的极限/"}},{"title":"当你想来一把数独","createdAt":"2021-08-01","tags":["game","sudoku"],"fields":{"slug":"/post/game/sudoku/"}},{"title":"编译原理-语法制导翻译实现计算器","createdAt":"2016-06-23","tags":["编译原理","语法制导翻译","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/exercise/"}},{"title":"编译原理-语法分析","createdAt":"2016-06-18","tags":["编译原理","语法分析","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/grammar/"}},{"title":"伸展树专题","createdAt":"2016-07-03","tags":["acm","Splay","解题报告","专题训练"],"fields":{"slug":"/post/data-structure/bbst/splay/"}},{"title":"洗牌问题和 knuth-shuffle 算法","createdAt":"2021-07-22","tags":["shuffle","knuth-shuffle","约瑟夫环"],"fields":{"slug":"/post/algorithm/shuffle/"}},{"title":"自然对数底数e","createdAt":"2021-08-07","tags":["math","函数","极限","自然对数"],"fields":{"slug":"/post/math/calculus/自然对数底数e/"}},{"title":"树链剖分","createdAt":"2016-04-23","tags":["acm","算法","树链剖分"],"fields":{"slug":"/post/algorithm/tree/tcs/"}},{"title":"最长上升子序列（LIS）","createdAt":"2021-06-02","tags":["最长上升子序列","LIS"],"fields":{"slug":"/post/algorithm/lis/"}},{"title":"最长回文子串 Manacher 算法","createdAt":"2016-04-18","tags":["算法","字符串","回文串","manacher"],"fields":{"slug":"/post/algorithm/string/manacher/"}},{"title":"最长公共子序列（LCS）","createdAt":"2021-06-02","tags":["最长公共子序列","LCS"],"fields":{"slug":"/post/algorithm/lcs/"}},{"title":"背包九讲","createdAt":"2021-06-27","tags":["acm","算法","动态规划","背包问题"],"fields":{"slug":"/post/algorithm/knapsack/"}},{"title":"Dijkstra 算法","createdAt":"2021-05-29","tags":["算法","最短路","单源最短路","dijkstra"],"fields":{"slug":"/post/algorithm/graph/shortest-path/dijkstra/"}},{"title":"二分图","createdAt":"2016-07-17","tags":["算法","图论","二分图","学习笔记"],"fields":{"slug":"/post/algorithm/graph/bipartite-graph/"}},{"title":"防抖和节流","createdAt":"2021-09-03","tags":["coding","debounce","throttle"],"fields":{"slug":"/post/algorithm/debounce-and-throttle/"}},{"title":"精确覆盖问题和 DLX 算法","createdAt":"2021-07-24","tags":["算法","精确覆盖","DLX 算法"],"fields":{"slug":"/post/algorithm/dlx/"}},{"title":"POJ-1324 Holedox Moving 解题报告","createdAt":"2016-04-13","tags":["acm","bfs","图论","状态压缩","解题报告"],"fields":{"slug":"/post/acm/oj/poj/1324/"}},{"title":"网络流 24 题","createdAt":"2016-07-30","tags":["acm","算法","图论","网络流","二分图","解题报告","专题训练"],"fields":{"slug":"/post/algorithm/graph/network-flow/24-problems/"}},{"title":"网络流基础之最大权闭合图","createdAt":"2016-07-24","tags":["算法","图论","网络流","最大权闭合图"],"fields":{"slug":"/post/algorithm/graph/network-flow/最大权闭合图/"}},{"title":"HDU-5576 Expection of String 解题报告（原 2015-上海区域赛-E)","createdAt":"2016-04-24","tags":["acm","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5576/"}},{"title":"剑指offer 解题报告","createdAt":"2021-07-15","tags":["专题训练","解题报告"],"fields":{"slug":"/post/acm/oj/nowcoder/jz-offer/"}},{"title":"2016 多校第 2 场","createdAt":"2016-07-22","tags":["acm","训练赛","数据结构","解题报告"],"fields":{"slug":"/post/acm/contest/multi-university-training/2016/2/"}},{"title":"HDU-5306 Gorgeous Sequence 解题报告","createdAt":"2016-04-09","tags":["acm","数据结构","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5306/"}},{"title":"51nod-1462 数据结构 -- 解题报告","createdAt":"2016-04-23","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/51nod/1462/"}},{"title":"百度之星 2016 解题报告","createdAt":"2016-06-03","tags":["acm","递推","状态压缩","动态规划","字典树","解题报告"],"fields":{"slug":"/post/acm/contest/baiduzhixing/2016/"}},{"title":"CCF 2015-09 最佳文章 解题报告","createdAt":"2016-06-26","tags":["acm","Aho-Corasick 自动机","矩阵快速幂","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/ccf/2015/09/E/"}},{"title":"HDU-5574 Colorful Tree 解题报告（原 2015-上海区域赛-C）","createdAt":"2016-04-12","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5574/"}}]}},"pageContext":{"id":"daa861d7-34fa-5f7c-9cb1-fa165ca49425","contentType":"post","paginationUrl":"/posts","previousPostId":"1049a736-a6b6-58ba-8a67-0c5fdb63002d","nextPostId":"1db541cb-51aa-5d2f-806c-1d40296d6566"}},"staticQueryHashes":[],"slicesMap":{}}