{"componentChunkName":"component---src-layout-post-post-list-tsx","path":"/posts/2/","result":{"data":{"allMarkdownYozora":{"nodes":[{"title":"精确覆盖问题和 DLX 算法","description":"精确覆盖问题和 DLX 算法","createdAt":"2021-07-24","updatedAt":null,"timeToRead":"13min 9s","categories":[],"tags":["算法","精确覆盖","DLX 算法"],"ecmaImports":[{"type":"ecmaImport","moduleName":"@kyokuya/_demo/post/algorithm/dlx/sudoku-solver.tsx","namedImports":[{"src":"SudokuSolverComponent","alias":null}]},{"type":"ecmaImport","moduleName":"@kyokuya/_demo/util/sudoku.ts","namedImports":[{"src":"SudokuSolver","alias":null},{"src":"createSudokuBoardData","alias":null}]}],"definitionMap":{"dancing-link.png":{"type":"definition","identifier":"dancing-link.png","label":"dancing-link.png","url":"/static/906debbf150b5fffd06cfd7dee50449b/0227d/dancing-link.png"},"@algorithm.ts/dlx":{"type":"definition","identifier":"@algorithm.ts/dlx","label":"@algorithm.ts/dlx","url":"https://github.com/guanghechen/algorithm.ts/blob/main/packages/dlx/README.md"},"@algorithm.ts/sudoku":{"type":"definition","identifier":"@algorithm.ts/sudoku","label":"@algorithm.ts/sudoku","url":"https://github.com/guanghechen/algorithm.ts/blob/main/packages/sudoku/README-zh.md"}},"footnoteDefinitionMap":{"footnote-1":{"type":"footnoteDefinition","identifier":"footnote-1","label":"1","children":[{"type":"paragraph","children":[{"type":"text","value":"需要注意的是，此处并没有构成递归删除，因为只有被选择的行才需要删除行上的其余列，而删除这些列时所删除的其它行并未被选择（被选择行的此时均已被删除），也就不会进一步删除它们的列了。"}]}]},"footnote-2":{"type":"footnoteDefinition","identifier":"footnote-2","label":"2","children":[{"type":"paragraph","children":[{"type":"text","value":"每次删除时都是选择一个未被覆盖的列，然后枚举覆盖此列的行，之后删除该行上的其它列。即每次选取了一个集合 "},{"type":"inlineMath","value":"s"},{"type":"text","value":"，将目标集合中所有在 "},{"type":"inlineMath","value":"s"},{"type":"text","value":" 中出现的数字都删去，同时删除所有与 "},{"type":"inlineMath","value":"s"},{"type":"text","value":" 有非空交集的那些集合，也就是每次选择集合都保证了和之前已选择的集合间没有交集。而当目标集合为空时，说明所有数字都在已选择的集合中出现过了，也就是已选择的集合中无重叠、无遗漏的覆盖了目标集合中的所有数字。"}]}]},"footnote-3":{"type":"footnoteDefinition","identifier":"footnote-3","label":"3","children":[{"type":"paragraph","children":[{"type":"text","value":"这里指的是虚拟列，即相当于目标集合中的未被覆盖的元素，对应于下文中将提到的舞蹈链中中的列虚拟节点，所以即便所有行都被删除，列虚拟节点构成的链表仍可能不为空。"}]}]},"footnote-4":{"type":"footnoteDefinition","identifier":"footnote-4","label":"4","children":[{"type":"paragraph","children":[{"type":"text","value":"在使用数组模拟链表的实现中，虚拟节点用列号表示就行了。而舞蹈链的头指针有\n"},{"type":"inlineMath","value":"0"},{"type":"text","value":" 表示即可。需要注意的是，舞蹈链中所有列号均为正整数。"}]}]},"footnote-5":{"type":"footnoteDefinition","identifier":"footnote-5","label":"5","children":[{"type":"paragraph","children":[{"type":"text","value":"需要注意的是，"},{"type":"linkReference","identifier":"@algorithm.ts/sudoku","label":"@algorithm.ts/sudoku","referenceType":"collapsed","children":[{"type":"text","value":"@algorithm.ts/sudoku"}]},{"type":"text","value":" 中对于一个 "},{"type":"inlineMath","value":"x^2 \\times x^2"},{"type":"text","value":"\n的数独，使用 "},{"type":"inlineMath","value":"[-1, x^2)"},{"type":"text","value":" 之间的整数作为数独格子的值，其中 "},{"type":"inlineMath","value":"-1"},{"type":"text","value":" 代表对应格子未预置值"}]}]}},"excerptAst":{"type":"root","children":[{"type":"ecmaImport","moduleName":"@kyokuya/_demo/post/algorithm/dlx/sudoku-solver.tsx","namedImports":[{"src":"SudokuSolverComponent","alias":null}]},{"type":"ecmaImport","moduleName":"@kyokuya/_demo/util/sudoku.ts","namedImports":[{"src":"SudokuSolver","alias":null},{"src":"createSudokuBoardData","alias":null}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"前言"}],"identifier":"heading-前言"},{"type":"paragraph","children":[{"type":"text","value":"很早就想要补一下舞蹈链和精确覆盖算法，却一直各种拖延，趁着最近有空，又重新翻开了刘汝佳的书。大学的时候看过几次，甚至照着书里的思路手敲了一遍并通过了例题，但对于算法的原理一直有些不求甚解。很早以前，一位同学告诉我说“现在看不懂的东西不用勉强，以后慢慢就会懂了”，后来也真的在不断印证这句话；但我很担心随着年纪的增长，记忆力和学习能力不断退化之后，恐怕这个 flag 会逐渐倒下。所以趁着眼下尚能理解进去，尽量用自己的语言做一下记录。"}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"精确覆盖问题"}],"identifier":"heading-精确覆盖问题"},{"type":"paragraph","children":[{"type":"text","value":"有一些由整数 "},{"type":"inlineMath","value":"1 \\sim n"},{"type":"text","value":" 中的数字组成的集合 "},{"type":"inlineMath","value":"S_1, S_2, \\cdots, S_m"},{"type":"text","value":"，要求选择若干个集合 "},{"type":"inlineMath","value":"S_i"},{"type":"text","value":"，使得 "},{"type":"inlineMath","value":"1 \\sim n"},{"type":"text","value":" 中每个整数都在选出的集合中的某个出现且恰好仅出现一次。举个栗子："}]}]},"fields":{"slug":"/post/algorithm/dlx/"}},{"title":"洗牌问题和 knuth-shuffle 算法","description":"洗牌问题和 knuth-shuffle 算法","createdAt":"2021-07-22","updatedAt":null,"timeToRead":"3min 19s","categories":[],"tags":["shuffle","knuth-shuffle","约瑟夫环"],"ecmaImports":[],"definitionMap":{"不定步长约瑟夫环问题":{"type":"definition","identifier":"不定步长约瑟夫环问题","label":"不定步长约瑟夫环问题","url":"/post/quiz/classical/Josephus-ring/#heading-%E4%B8%8D%E5%AE%9A%E6%AD%A5%E9%95%BF%E7%9A%84%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98"}},"footnoteDefinitionMap":{},"excerptAst":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"对于给定的 "},{"type":"inlineMath","value":"N"},{"type":"text","value":" 个数，将其公平地随机打乱，使得每个位置上每个数出现的概率相等。"}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"约瑟夫环"}],"identifier":"heading-约瑟夫环"},{"type":"paragraph","children":[{"type":"text","value":"遍历位置 "},{"type":"inlineMath","value":"i"},{"type":"text","value":"，每次从剩余的数中随机取一个放到该位置上。由此可以将问题归约到\n"},{"type":"linkReference","identifier":"不定步长约瑟夫环问题","label":"不定步长约瑟夫环问题","referenceType":"collapsed","children":[{"type":"text","value":"不定步长约瑟夫环问题"}]},{"type":"text","value":"，即："},{"type":"inlineMath","value":"N"},{"type":"text","value":" 个人围坐一圈，从 "},{"type":"inlineMath","value":"1"},{"type":"text","value":" 开始报数，每次随机一个数 "},{"type":"inlineMath","value":"x"},{"type":"text","value":"，报到 "},{"type":"inlineMath","value":"x"},{"type":"text","value":" 的人从圈中离开，然后进入下一轮游戏。因为需要求离开的顺序，所以不能使用递推法，只能用树状数组+二分，复杂度为："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"时间复杂度： "},{"type":"inlineMath","value":"O(N \\cdot \\log^2 N)"}]},{"type":"listItem","children":[{"type":"text","value":"额外空间复杂度： "},{"type":"inlineMath","value":"O(N)"}]}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"knuth-shuffle"}],"identifier":"heading-knuth-shuffle"},{"type":"paragraph","children":[{"type":"text","value":"进一步考虑，在 shuffle 问题中，我们并不需要保证每个“人”的相对位置不变，也不必每次从上一个被踢的位置开始继续报数，而是只需要保证剩下的“人”被选出来的概率相同即可；如果能让剩下的人始终紧密地聚集到一起，那么利用数组的索引特性，每次 "}]}]},"fields":{"slug":"/post/algorithm/shuffle/"}},{"title":"统计区间内的线段","description":"统计区间内的线段","createdAt":"2021-07-21","updatedAt":null,"timeToRead":"11min 0s","categories":[],"tags":["quiz","扫描线","前缀和","树状数组","线段树"],"ecmaImports":[],"definitionMap":{},"footnoteDefinitionMap":{},"excerptAst":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"一维区间"}],"identifier":"heading-一维区间"},{"type":"heading","depth":3,"children":[{"type":"text","value":"问题简述"}],"identifier":"heading-问题简述"},{"type":"paragraph","children":[{"type":"text","value":"坐标轴上存在 "},{"type":"inlineMath","value":"N"},{"type":"text","value":" 条线段，有 "},{"type":"inlineMath","value":"Q"},{"type":"text","value":" 次查询，每次查询询问与给定区间 "},{"type":"inlineMath","value":"[a_q, b_q]"},{"type":"text","value":" 相交的线段数量。（相交指存在重叠的区域，包括"},{"type":"strong","children":[{"type":"text","value":"相互包含"}]},{"type":"text","value":"的情况）"}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"问题简析"}],"identifier":"heading-问题简析"},{"type":"paragraph","children":[{"type":"text","value":"先对线段进行排序：左端点小的排在前面，左端点相同时，右端点小的排在前面。"}]},{"type":"paragraph","children":[{"type":"text","value":"记 "},{"type":"inlineMath","value":"f(x)"},{"type":"text","value":" 为左端点在点 "},{"type":"inlineMath","value":"x"},{"type":"text","value":" 上的线段条数，"},{"type":"inlineMath","value":"g(x)"},{"type":"text","value":" 为右端点在 "},{"type":"inlineMath","value":"x"},{"type":"text","value":" 上的线段条数。计算 "},{"type":"inlineMath","value":"f(x)"},{"type":"text","value":" 和 "},{"type":"inlineMath","value":"g(x)"},{"type":"text","value":" 可以通过扫描排好序的线段，不妨记当前扫描到的线段为 "},{"type":"inlineMath","value":"[x1, x2]"},{"type":"text","value":"，并执行下述操作："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"inlineMath","value":"f(x1) = f(x1) + 1"}]},{"type":"listItem","children":[{"type":"inlineMath","value":"g(x2) = g(x2) + 1"}]}]},{"type":"paragraph","children":[{"type":"text","value":"在扫描的过程中，不难有："}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"区间左侧 "},{"type":"inlineMath","value":"[-\\infty, a_q-1]"},{"type":"text","value":" 与当前区间不相交的数量为线段右端点个数，即\n"},{"type":"inlineMath","value":"\\displaystyle \\sum_{x=-\\infty}^{a_q - 1} f(x)"}]}]}]}]},"fields":{"slug":"/post/quiz/scanning-line/segments/"}},{"title":"约瑟夫环问题","description":"约瑟夫环问题","createdAt":"2021-07-16","updatedAt":null,"timeToRead":"10min 13s","categories":[],"tags":["quiz","经典问题","约瑟夫环"],"ecmaImports":[],"definitionMap":{"经典-暴力法":{"type":"definition","identifier":"经典-暴力法","label":"经典-暴力法","url":"#heading-%E6%9A%B4%E5%8A%9B%E6%B3%95"},"经典-树状数组":{"type":"definition","identifier":"经典-树状数组","label":"经典-树状数组","url":"#heading-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84"},"经典-递推":{"type":"definition","identifier":"经典-递推","label":"经典-递推","url":"#heading-%E9%80%92%E6%8E%A8"}},"footnoteDefinitionMap":{"footnote-1":{"type":"footnoteDefinition","identifier":"footnote-1","label":"1","children":[{"type":"paragraph","children":[{"type":"text","value":"为了方便树状数组操作，处理时将所有人的编号 "},{"type":"inlineMath","value":"+1"},{"type":"text","value":"，在计算答案时再 "},{"type":"inlineMath","value":"-1"}]}]}},"excerptAst":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"经典约瑟夫环问题"}],"identifier":"heading-经典约瑟夫环问题"},{"type":"paragraph","children":[{"type":"text","value":"有 "},{"type":"inlineMath","value":"N"},{"type":"text","value":" 个人围坐成一圈，任选某个人将其编号为 "},{"type":"inlineMath","value":"0"},{"type":"text","value":"，其右手边的人编号为 "},{"type":"inlineMath","value":"1"},{"type":"text","value":"，以此类推，将全部 "},{"type":"inlineMath","value":"N"},{"type":"text","value":" 个人进行唯一编号。由编号为 "},{"type":"inlineMath","value":"0"},{"type":"text","value":" 的人从 "},{"type":"inlineMath","value":"1"},{"type":"text","value":" 开始报数，其右手边的人报下一个数，以此类推。报到 "},{"type":"inlineMath","value":"M"},{"type":"text","value":" 的人起身离开，TA 右手边的人又从 "},{"type":"inlineMath","value":"1"},{"type":"text","value":" 开始报数，直到所有人起身离开，求最后一个起身离开的人的编号。"}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"暴力法"}],"identifier":"heading-暴力法"},{"type":"paragraph","children":[{"type":"text","value":"使用链表进行模拟，起身离开的复杂度为 "},{"type":"inlineMath","value":"O(1)"},{"type":"text","value":"，报数的复杂度为 "},{"type":"inlineMath","value":"O(M)"},{"type":"text","value":"，故总复杂度为："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"时间复杂度： "},{"type":"inlineMath","value":"O(M \\cdot N)"}]},{"type":"listItem","children":[{"type":"text","value":"额外空间复杂度： "},{"type":"inlineMath","value":"O(N)"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"树状数组"}],"identifier":"heading-树状数组"},{"type":"paragraph","children":[{"type":"text","value":"用一个数组 "},{"type":"inlineMath","value":"A"},{"type":"text","value":" 表示这 "},{"type":"inlineMath","value":"N"},{"type":"text","value":" 个人当前的游戏状态："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"inlineMath","value":"A[i] = 1"},{"type":"text","value":": 编号为 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 的人还坐在那里"}]},{"type":"listItem","children":[{"type":"inlineMath","value":"A[i] = 0"},{"type":"text","value":": 编号为 "},{"type":"inlineMath","value":"0"},{"type":"text","value":" 的人已经起身离开"}]}]},{"type":"paragraph","children":[{"type":"text","value":"则可以使用树状数组维护前缀和"}]}]},"fields":{"slug":"/post/quiz/classical/Josephus-ring/"}},{"title":"剑指offer 解题报告","description":"剑指offer 解题报告","createdAt":"2021-07-15","updatedAt":null,"timeToRead":"27min 23s","categories":[],"tags":["专题训练","解题报告"],"ecmaImports":[],"definitionMap":{"heading-附录":{"type":"definition","identifier":"heading-附录","label":"heading-附录","url":"#heading-%E9%99%84%E5%BD%95"},"quiz-josephus-ring":{"type":"definition","identifier":"quiz-josephus-ring","label":"quiz-josephus-ring","url":"/post/quiz/classical/Josephus-ring/"},"problem-01":{"type":"definition","identifier":"problem-01","label":"problem-01","url":"https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e"},"problem-02":{"type":"definition","identifier":"problem-02","label":"problem-02","url":"https://www.nowcoder.com/practice/0e26e5551f2b489b9f58bc83aa4b6c68"},"problem-03":{"type":"definition","identifier":"problem-03","label":"problem-03","url":"https://www.nowcoder.com/practice/d0267f7f55b3412ba93bd35cfa8e8035"},"problem-04":{"type":"definition","identifier":"problem-04","label":"problem-04","url":"https://www.nowcoder.com/practice/8a19cbe657394eeaac2f6ea9b0f6fcf6"},"problem-05":{"type":"definition","identifier":"problem-05","label":"problem-05","url":"https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6"},"problem-06":{"type":"definition","identifier":"problem-06","label":"problem-06","url":"https://www.nowcoder.com/practice/9f3231a991af4f55b95579b44b7a01ba"},"problem-07":{"type":"definition","identifier":"problem-07","label":"problem-07","url":"https://www.nowcoder.com/practice/c6c7742f5ba7442aada113136ddea0c3"},"problem-08":{"type":"definition","identifier":"problem-08","label":"problem-08","url":"https://www.nowcoder.com/practice/8c82a5b80378478f9484d87d1c5f12a4"},"problem-09":{"type":"definition","identifier":"problem-09","label":"problem-09","url":"https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387"},"problem-10":{"type":"definition","identifier":"problem-10","label":"problem-10","url":"https://www.nowcoder.com/practice/72a5a919508a4251859fb2cfb987a0e6"},"problem-11":{"type":"definition","identifier":"problem-11","label":"problem-11","url":"https://www.nowcoder.com/practice/8ee967e43c2c4ec193b040ea7fbb10b8"},"problem-12":{"type":"definition","identifier":"problem-12","label":"problem-12","url":"https://www.nowcoder.com/practice/1a834e5e3e1a4b7ba251417554e07c00"},"problem-13":{"type":"definition","identifier":"problem-13","label":"problem-13","url":"https://www.nowcoder.com/practice/ef1f53ef31ca408cada5093c8780f44b"},"problem-14":{"type":"definition","identifier":"problem-14","label":"problem-14","url":"https://www.nowcoder.com/practice/886370fe658f41b498d40fb34ae76ff9"},"problem-15":{"type":"definition","identifier":"problem-15","label":"problem-15","url":"https://www.nowcoder.com/practice/75e878df47f24fdc9dc3e400ec6058ca"},"problem-16":{"type":"definition","identifier":"problem-16","label":"problem-16","url":"https://www.nowcoder.com/practice/d8b6b4358f774294a89de2a6ac4d9337"},"problem-17":{"type":"definition","identifier":"problem-17","label":"problem-17","url":"https://www.nowcoder.com/practice/6e196c44c7004d15b1610b9afca8bd88"},"problem-18":{"type":"definition","identifier":"problem-18","label":"problem-18","url":"https://www.nowcoder.com/practice/a9d0ecbacef9410ca97463e4a5c83be7"},"problem-19":{"type":"definition","identifier":"problem-19","label":"problem-19","url":"https://www.nowcoder.com/practice/9b4c81a02cd34f76be2659fa0d54342a"},"problem-20":{"type":"definition","identifier":"problem-20","label":"problem-20","url":"https://www.nowcoder.com/practice/4c776177d2c04c2494f2555c9fcc1e49"},"problem-21":{"type":"definition","identifier":"problem-21","label":"problem-21","url":"https://www.nowcoder.com/practice/d77d11405cc7470d82554cb392585106"},"problem-22":{"type":"definition","identifier":"problem-22","label":"problem-22","url":"https://www.nowcoder.com/practice/7fe2212963db4790b57431d9ed259701"},"problem-23":{"type":"definition","identifier":"problem-23","label":"problem-23","url":"https://www.nowcoder.com/practice/a861533d45854474ac791d90e447bafd"},"problem-24":{"type":"definition","identifier":"problem-24","label":"problem-24","url":"https://www.nowcoder.com/practice/b736e784e3e34731af99065031301bca"},"problem-25":{"type":"definition","identifier":"problem-25","label":"problem-25","url":"https://www.nowcoder.com/practice/f836b2c43afc4b35ad6adc41ec941dba"},"problem-26":{"type":"definition","identifier":"problem-26","label":"problem-26","url":"https://www.nowcoder.com/practice/947f6eb80d944a84850b0538bf0ec3a5"},"problem-27":{"type":"definition","identifier":"problem-27","label":"problem-27","url":"https://www.nowcoder.com/practice/fe6b651b66ae47d7acce78ffdd9a96c7"},"problem-28":{"type":"definition","identifier":"problem-28","label":"problem-28","url":"https://www.nowcoder.com/practice/e8a1b01a2df14cb2b228b30ee6a92163"},"problem-29":{"type":"definition","identifier":"problem-29","label":"problem-29","url":"https://www.nowcoder.com/practice/6a296eb82cf844ca8539b57c23e6e9bf"},"problem-30":{"type":"definition","identifier":"problem-30","label":"problem-30","url":"https://www.nowcoder.com/practice/459bd355da1549fa8a49e350bf3df484"},"problem-31":{"type":"definition","identifier":"problem-31","label":"problem-31","url":"https://www.nowcoder.com/practice/bd7f978302044eee894445e244c7eee6"},"problem-32":{"type":"definition","identifier":"problem-32","label":"problem-32","url":"https://www.nowcoder.com/practice/8fecd3f8ba334add803bf2a06af1b993"},"problem-33":{"type":"definition","identifier":"problem-33","label":"problem-33","url":"https://www.nowcoder.com/practice/6aa9e04fc3794f68acf8778237ba065b"},"problem-34":{"type":"definition","identifier":"problem-34","label":"problem-34","url":"https://www.nowcoder.com/practice/1c82e8cf713b4bbeb2a5b31cf5b0417c"},"problem-35":{"type":"definition","identifier":"problem-35","label":"problem-35","url":"https://www.nowcoder.com/practice/96bd6684e04a44eb80e6a68efc0ec6c5"},"problem-36":{"type":"definition","identifier":"problem-36","label":"problem-36","url":"https://www.nowcoder.com/practice/6ab1d9a29e88450685099d45c9e31e46"},"problem-37":{"type":"definition","identifier":"problem-37","label":"problem-37","url":"https://www.nowcoder.com/practice/70610bf967994b22bb1c26f9ae901fa2"},"problem-38":{"type":"definition","identifier":"problem-38","label":"problem-38","url":"https://www.nowcoder.com/practice/435fb86331474282a3499955f0a41e8b"},"problem-39":{"type":"definition","identifier":"problem-39","label":"problem-39","url":"https://www.nowcoder.com/practice/8b3b95850edb4115918ecebdf1b4d222"},"problem-40":{"type":"definition","identifier":"problem-40","label":"problem-40","url":"https://www.nowcoder.com/practice/389fc1c3d3be4479a154f63f495abff8"},"problem-41":{"type":"definition","identifier":"problem-41","label":"problem-41","url":"https://www.nowcoder.com/practice/c451a3fd84b64cb19485dad758a55ebe"},"problem-42":{"type":"definition","identifier":"problem-42","label":"problem-42","url":"https://www.nowcoder.com/practice/390da4f7a00f44bea7c2f3d19491311b"},"problem-43":{"type":"definition","identifier":"problem-43","label":"problem-43","url":"https://www.nowcoder.com/practice/12d959b108cb42b1ab72cef4d36af5ec"},"problem-44":{"type":"definition","identifier":"problem-44","label":"problem-44","url":"https://www.nowcoder.com/practice/3194a4f4cf814f63919d0790578d51f3"},"problem-45":{"type":"definition","identifier":"problem-45","label":"problem-45","url":"https://www.nowcoder.com/practice/762836f4d43d43ca9deb273b3de8e1f4"},"problem-46":{"type":"definition","identifier":"problem-46","label":"problem-46","url":"https://www.nowcoder.com/practice/f78a359491e64a50bce2d89cff857eb6"},"problem-47":{"type":"definition","identifier":"problem-47","label":"problem-47","url":"https://www.nowcoder.com/practice/7a0da8fc483247ff8800059e12d7caf1"},"problem-48":{"type":"definition","identifier":"problem-48","label":"problem-48","url":"https://www.nowcoder.com/practice/59ac416b4b944300b617d4f7f111b215"},"problem-49":{"type":"definition","identifier":"problem-49","label":"problem-49","url":"https://www.nowcoder.com/practice/1277c681251b4372bdef344468e4f26e"},"problem-50":{"type":"definition","identifier":"problem-50","label":"problem-50","url":"https://www.nowcoder.com/practice/6fe361ede7e54db1b84adc81d09d8524"},"problem-51":{"type":"definition","identifier":"problem-51","label":"problem-51","url":"https://www.nowcoder.com/practice/94a4d381a68b47b7a8bed86f2975db46"},"problem-52":{"type":"definition","identifier":"problem-52","label":"problem-52","url":"https://www.nowcoder.com/practice/28970c15befb4ff3a264189087b99ad4"},"problem-53":{"type":"definition","identifier":"problem-53","label":"problem-53","url":"https://www.nowcoder.com/practice/e69148f8528c4039ad89bb2546fd4ff8"},"problem-54":{"type":"definition","identifier":"problem-54","label":"problem-54","url":"https://www.nowcoder.com/practice/00de97733b8e4f97a3fb5c680ee10720"},"problem-55":{"type":"definition","identifier":"problem-55","label":"problem-55","url":"https://www.nowcoder.com/practice/253d2c59ec3e4bc68da16833f79a38e4"},"problem-56":{"type":"definition","identifier":"problem-56","label":"problem-56","url":"https://www.nowcoder.com/practice/fc533c45b73a41b0b44ccba763f866ef"},"problem-57":{"type":"definition","identifier":"problem-57","label":"problem-57","url":"https://www.nowcoder.com/practice/9023a0c988684a53960365b889ceaf5e"},"problem-58":{"type":"definition","identifier":"problem-58","label":"problem-58","url":"https://www.nowcoder.com/practice/ff05d44dfdb04e1d83bdbdab320efbcb"},"problem-59":{"type":"definition","identifier":"problem-59","label":"problem-59","url":"https://www.nowcoder.com/practice/91b69814117f4e8097390d107d2efbe0"},"problem-60":{"type":"definition","identifier":"problem-60","label":"problem-60","url":"https://www.nowcoder.com/practice/445c44d982d04483b04a54f298796288"},"problem-61":{"type":"definition","identifier":"problem-61","label":"problem-61","url":"https://www.nowcoder.com/practice/cf7e25aa97c04cc1a68c8f040e71fb84"},"problem-62":{"type":"definition","identifier":"problem-62","label":"problem-62","url":"https://www.nowcoder.com/practice/ef068f602dde4d28aab2b210e859150a"},"problem-63":{"type":"definition","identifier":"problem-63","label":"problem-63","url":"https://www.nowcoder.com/practice/9be0172896bd43948f8a32fb954e1be1"},"problem-64":{"type":"definition","identifier":"problem-64","label":"problem-64","url":"https://www.nowcoder.com/practice/1624bc35a45c42c0bc17d17fa0cba788"},"problem-65":{"type":"definition","identifier":"problem-65","label":"problem-65","url":"https://www.nowcoder.com/practice/2a49359695a544b8939c77358d29b7e6"},"problem-66":{"type":"definition","identifier":"problem-66","label":"problem-66","url":"https://www.nowcoder.com/practice/6e5207314b5241fb83f2329e89fdecc8"},"problem-67":{"type":"definition","identifier":"problem-67","label":"problem-67","url":"https://www.nowcoder.com/practice/57d85990ba5b440ab888fc72b0751bf8"}},"footnoteDefinitionMap":{},"excerptAst":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"前言"}],"identifier":"heading-前言"},{"type":"paragraph","children":[{"type":"text","value":"这两天奶奶做手术，我在医院里陪护，奶奶不会说普通话所以只好一直陪在旁边。实在有些闲得慌，正好在刷知乎的时候看到了《剑指offer》的推荐，搜了下发现有 OJ 收录了原书中的题目，于是开始尝试手机写代码23333（没有带电脑）。 强迫症晚期，一上手就非要做完不可，还好题目量少。使用低效率的方式做一件并不紧要的事情实在是太浪费生命了。（不过也有人说，生命就是用来浪费的2333"}]},{"type":"paragraph","children":[{"type":"text","value":"为了"},{"type":"delete","children":[{"type":"emphasis","children":[{"type":"text","value":"偷懒"}]}]},{"type":"text","value":"节约篇幅，将过于基础的题放在了 "},{"type":"linkReference","identifier":"heading-附录","label":"heading-附录","referenceType":"full","children":[{"type":"text","value":"附录"}]},{"type":"text","value":" 中。"}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"01 二维数组的查找"}],"identifier":"heading-01-二维数组的查找"},{"type":"paragraph","children":[{"type":"linkReference","identifier":"problem-01","label":"problem-01","referenceType":"full","children":[{"type":"text","value":"题目链接"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"题意简述"}],"identifier":"heading-题意简述"},{"type":"paragraph","children":[{"type":"text","value":"有一个 "},{"type":"inlineMath","value":"R \\times C"},{"type":"text","value":" 的矩阵，每行从左至右数值递增，每列从上至下数值递增，求矩阵中是否包含给定的数值。"}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"题目简析"}],"identifier":"heading-题目简析"},{"type":"paragraph","children":[{"type":"text","value":"注意到矩阵中任意一个子矩阵仍然满足此特性，则可以二分子矩阵，直到子矩阵的大小为\n"}]}]},"fields":{"slug":"/post/acm/oj/nowcoder/jz-offer/"}}]},"postItems":{"nodes":[{"title":"洗牌问题和 knuth-shuffle 算法","createdAt":"2021-07-22","tags":["shuffle","knuth-shuffle","约瑟夫环"],"fields":{"slug":"/post/algorithm/shuffle/"}},{"title":"编译原理-语法制导翻译实现计算器","createdAt":"2016-06-23","tags":["编译原理","语法制导翻译","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/exercise/"}},{"title":"编译原理-语法分析","createdAt":"2016-06-18","tags":["编译原理","语法分析","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/grammar/"}},{"title":"端口管理","createdAt":"2021-06-20","tags":["network","port","ssh","netstat"],"fields":{"slug":"/post/network/端口管理/"}},{"title":"防抖和节流","createdAt":"2021-09-03","tags":["coding","debounce","throttle"],"fields":{"slug":"/post/algorithm/debounce-and-throttle/"}},{"title":"精确覆盖问题和 DLX 算法","createdAt":"2021-07-24","tags":["算法","精确覆盖","DLX 算法"],"fields":{"slug":"/post/algorithm/dlx/"}},{"title":"背包九讲","createdAt":"2021-06-27","tags":["acm","算法","动态规划","背包问题"],"fields":{"slug":"/post/algorithm/knapsack/"}},{"title":"最长公共子序列（LCS）","createdAt":"2021-06-02","tags":["最长公共子序列","LCS"],"fields":{"slug":"/post/algorithm/lcs/"}},{"title":"最长上升子序列（LIS）","createdAt":"2021-06-02","tags":["最长上升子序列","LIS"],"fields":{"slug":"/post/algorithm/lis/"}},{"title":"当你想来一把数独","createdAt":"2021-08-01","tags":["game","sudoku"],"fields":{"slug":"/post/game/sudoku/"}},{"title":"函数的极限","createdAt":"2021-05-09","tags":["math","函数","极限"],"fields":{"slug":"/post/math/calculus/函数的极限/"}},{"title":"自然对数底数e","createdAt":"2021-08-07","tags":["math","函数","极限","自然对数"],"fields":{"slug":"/post/math/calculus/自然对数底数e/"}},{"title":"小球放盒模型","createdAt":"2016-04-22","tags":["math","组合数学"],"fields":{"slug":"/post/math/combinatorial/小球放盒模型/"}},{"title":"不修改数组找出重复的数字","createdAt":"2021-06-29","tags":["quiz","分治","追击"],"fields":{"slug":"/post/quiz/partition/find-duplicate-number/"}},{"title":"统计区间内的线段","createdAt":"2021-07-21","tags":["quiz","扫描线","前缀和","树状数组","线段树"],"fields":{"slug":"/post/quiz/scanning-line/segments/"}},{"title":"CSS 选择器","createdAt":"2020-11-02","tags":["web","frontend","css"],"fields":{"slug":"/post/web/css/selector/"}},{"title":"ECMA 2020 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2020/"}},{"title":"ECMA 2021 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2021/"}},{"title":"Javascript 踩坑记——继承和原型链","createdAt":"2021-09-05","tags":["studynote","javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/inherit/"}},{"title":"React Reconciliation","createdAt":"2021-06-26","tags":["react","react reconciliation"],"fields":{"slug":"/post/web/react/reconciliation/"}},{"title":"XSS 与 CSRF 的攻防","createdAt":"2021-08-19","tags":["web","web security","csrf"],"fields":{"slug":"/post/web/security/xss-csrf/"}},{"title":"二分图","createdAt":"2016-07-17","tags":["算法","图论","二分图","学习笔记"],"fields":{"slug":"/post/algorithm/graph/bipartite-graph/"}},{"title":"最长回文子串 Manacher 算法","createdAt":"2016-04-18","tags":["算法","字符串","回文串","manacher"],"fields":{"slug":"/post/algorithm/string/manacher/"}},{"title":"树链剖分","createdAt":"2016-04-23","tags":["acm","算法","树链剖分"],"fields":{"slug":"/post/algorithm/tree/tcs/"}},{"title":"伸展树专题","createdAt":"2016-07-03","tags":["acm","Splay","解题报告","专题训练"],"fields":{"slug":"/post/data-structure/bbst/splay/"}},{"title":"组合游戏基础之 SG 函数和 SG 定理","createdAt":"2016-09-04","tags":["组合数学","组合游戏","SG 定理"],"fields":{"slug":"/post/math/combinatorial/SG/"}},{"title":"快速傅里叶变换和雷德算法","createdAt":"2016-04-10","tags":["acm","大数乘法","fft","快速傅里叶变换"],"fields":{"slug":"/post/math/number-theory/fft/"}},{"title":"数论基础之筛法","createdAt":"2016-05-06","tags":["math","数论","素数","欧拉函数","线性筛"],"fields":{"slug":"/post/math/number-theory/sieve/"}},{"title":"数论基础之原根","createdAt":"2016-05-16","tags":["math","数论","原根"],"fields":{"slug":"/post/math/number-theory/原根/"}},{"title":"数论基础之欧拉函数","createdAt":"2016-05-10","tags":["math","数论","既约剩余系","欧拉函数"],"fields":{"slug":"/post/math/number-theory/欧拉函数/"}},{"title":"约瑟夫环问题","createdAt":"2021-07-16","tags":["quiz","经典问题","约瑟夫环"],"fields":{"slug":"/post/quiz/classical/Josephus-ring/"}},{"title":"扔鸡蛋问题","createdAt":"2021-06-20","tags":["quiz","动态规划"],"fields":{"slug":"/post/quiz/dp/egg-drop/"}},{"title":"在 excel 中启用正则表达式","createdAt":"2021-03-29","tags":["excel","tools"],"fields":{"slug":"/post/tool/excel/regex/"}},{"title":"百度之星 2016 解题报告","createdAt":"2016-06-03","tags":["acm","递推","状态压缩","动态规划","字典树","解题报告"],"fields":{"slug":"/post/acm/contest/baiduzhixing/2016/"}},{"title":"51nod-1462 数据结构 -- 解题报告","createdAt":"2016-04-23","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/51nod/1462/"}},{"title":"HDU-5306 Gorgeous Sequence 解题报告","createdAt":"2016-04-09","tags":["acm","数据结构","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5306/"}},{"title":"HDU-5574 Colorful Tree 解题报告（原 2015-上海区域赛-C）","createdAt":"2016-04-12","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5574/"}},{"title":"HDU-5576 Expection of String 解题报告（原 2015-上海区域赛-E)","createdAt":"2016-04-24","tags":["acm","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5576/"}},{"title":"剑指offer 解题报告","createdAt":"2021-07-15","tags":["专题训练","解题报告"],"fields":{"slug":"/post/acm/oj/nowcoder/jz-offer/"}},{"title":"POJ-1324 Holedox Moving 解题报告","createdAt":"2016-04-13","tags":["acm","bfs","图论","状态压缩","解题报告"],"fields":{"slug":"/post/acm/oj/poj/1324/"}},{"title":"网络流 24 题","createdAt":"2016-07-30","tags":["acm","算法","图论","网络流","二分图","解题报告","专题训练"],"fields":{"slug":"/post/algorithm/graph/network-flow/24-problems/"}},{"title":"网络流基础之最大权闭合图","createdAt":"2016-07-24","tags":["算法","图论","网络流","最大权闭合图"],"fields":{"slug":"/post/algorithm/graph/network-flow/最大权闭合图/"}},{"title":"Dijkstra 算法","createdAt":"2021-05-29","tags":["算法","最短路","单源最短路","dijkstra"],"fields":{"slug":"/post/algorithm/graph/shortest-path/dijkstra/"}},{"title":"Custom React Hooks","createdAt":"2020-10-29","tags":["react","react hooks"],"fields":{"slug":"/post/web/react/hooks/custom/"}},{"title":"2016 多校第 2 场","createdAt":"2016-07-22","tags":["acm","训练赛","数据结构","解题报告"],"fields":{"slug":"/post/acm/contest/multi-university-training/2016/2/"}},{"title":"CCF 2015-09 最佳文章 解题报告","createdAt":"2016-06-26","tags":["acm","Aho-Corasick 自动机","矩阵快速幂","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/ccf/2015/09/E/"}},{"title":"数论基础之模方程初步","createdAt":"2016-05-04","tags":["math","数论","扩展欧几里得算法","中国剩余定理","Baby Step Gaint Step"],"fields":{"slug":"/post/math/number-theory/模方程/basic/"}}]}},"pageContext":{"contentType":"post","paginationUrl":"/posts","urlPrefix":"/posts","pageTotal":10,"pageSize":5,"pageCurrent":2,"limit":5,"skip":5}},"staticQueryHashes":[],"slicesMap":{}}