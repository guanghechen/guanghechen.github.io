{"componentChunkName":"component---src-layout-post-post-list-tsx","path":"/posts/6/","result":{"data":{"allMarkdownYozora":{"nodes":[{"title":"网络流 24 题","description":"网络流 24 题","createdAt":"2016-07-30","updatedAt":null,"timeToRead":"18min 9s","categories":[],"tags":["acm","算法","图论","网络流","二分图","解题报告","专题训练"],"ecmaImports":[],"definitionMap":{"problem-01":{"type":"definition","identifier":"problem-01","label":"problem-01","url":"https://www.oj.swust.edu.cn/problem/show/1736"},"problem-02":{"type":"definition","identifier":"problem-02","label":"problem-02","url":"https://www.oj.swust.edu.cn/problem/show/1737"},"problem-03":{"type":"definition","identifier":"problem-03","label":"problem-03","url":"https://www.oj.swust.edu.cn/problem/show/1738"},"problem-04":{"type":"definition","identifier":"problem-04","label":"problem-04","url":"https://www.oj.swust.edu.cn/problem/show/1739"},"problem-05":{"type":"definition","identifier":"problem-05","label":"problem-05","url":"https://www.oj.swust.edu.cn/problem/show/1740"},"problem-06":{"type":"definition","identifier":"problem-06","label":"problem-06","url":"https://www.oj.swust.edu.cn/problem/show/1741"},"problem-07":{"type":"definition","identifier":"problem-07","label":"problem-07","url":"https://www.luogu.com.cn/problem/P2770"},"problem-08":{"type":"definition","identifier":"problem-08","label":"problem-08","url":"https://www.oj.swust.edu.cn/problem/show/1743"},"problem-09":{"type":"definition","identifier":"problem-09","label":"problem-09","url":"https://www.oj.swust.edu.cn/problem/show/1744"},"problem-10":{"type":"definition","identifier":"problem-10","label":"problem-10","url":"https://www.oj.swust.edu.cn/problem/show/1745"},"problem-11":{"type":"definition","identifier":"problem-11","label":"problem-11","url":"https://www.oj.swust.edu.cn/problem/show/1746"},"problem-12":{"type":"definition","identifier":"problem-12","label":"problem-12","url":"https://www.oj.swust.edu.cn/problem/show/1747"},"solution-01":{"type":"definition","identifier":"solution-01","label":"solution-01","url":"#heading-01-%E9%A3%9E%E8%A1%8C%E5%91%98%E9%85%8D%E5%AF%B9%E6%96%B9%E6%A1%88%E9%97%AE%E9%A2%98"},"solution-02":{"type":"definition","identifier":"solution-02","label":"solution-02","url":"#heading-02-%E5%A4%AA%E7%A9%BA%E9%A3%9E%E8%A1%8C%E8%AE%A1%E5%88%92%E9%97%AE%E9%A2%98"},"solution-03":{"type":"definition","identifier":"solution-03","label":"solution-03","url":"#heading-03-%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E8%A6%86%E7%9B%96%E9%97%AE%E9%A2%98"},"solution-04":{"type":"definition","identifier":"solution-04","label":"solution-04","url":"#heading-04-%E9%AD%94%E6%9C%AF%E7%90%83%E9%97%AE%E9%A2%98"},"solution-05":{"type":"definition","identifier":"solution-05","label":"solution-05","url":"#heading-05-%E5%9C%86%E6%A1%8C%E9%97%AE%E9%A2%98"},"solution-06":{"type":"definition","identifier":"solution-06","label":"solution-06","url":"#heading-06-%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98"},"solution-07":{"type":"definition","identifier":"solution-07","label":"solution-07","url":"#heading-07-%E8%AF%95%E9%A2%98%E5%BA%93"},"solution-08":{"type":"definition","identifier":"solution-08","label":"solution-08","url":"#heading-08-%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98"},"solution-09":{"type":"definition","identifier":"solution-09","label":"solution-09","url":"#heading-09-%E6%96%B9%E6%A0%BC%E5%8F%96%E6%95%B0%E9%97%AE%E9%A2%98"},"solution-10":{"type":"definition","identifier":"solution-10","label":"solution-10","url":"#heading-10-%E9%A4%90%E5%B7%BE%E8%AE%A1%E5%88%92%E9%97%AE%E9%A2%98"},"solution-11":{"type":"definition","identifier":"solution-11","label":"solution-11","url":"#heading-11-%E8%88%AA%E7%A9%BA%E8%B7%AF%E7%BA%BF%E9%97%AE%E9%A2%98"},"solution-12":{"type":"definition","identifier":"solution-12","label":"solution-12","url":"#heading-12-%E8%BD%AF%E4%BB%B6%E8%A1%A5%E4%B8%81%E9%97%AE%E9%A2%98"},"ghc-网络流基础之最大权闭合图":{"type":"definition","identifier":"ghc-网络流基础之最大权闭合图","label":"ghc-网络流基础之最大权闭合图","url":"../%E6%9C%80%E5%A4%A7%E6%9D%83%E9%97%AD%E5%90%88%E5%9B%BE"}},"footnoteDefinitionMap":{},"excerptAst":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Prepare"}],"identifier":"heading-prepare"},{"type":"paragraph","children":[{"type":"text","value":"由于网络流问题难点在于建模，网络流算法基本都是围绕增广路，且相关的文章网上已经有许多了，故此下文中将给出会多次使用到的模板代码，而且其具体的算法略去。"}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"ISAP"}]},{"type":"code","lang":"cpp","meta":"title=\"isap.hpp\" sourcefile=\"./isap.hpp\" maxlines=\"20\" collapsed linenos","value":"#include <cstring>\n#include <queue>\n#include <vector>\n\nnamespace ISAP {\n  static const int MAXN = 10000 + 10;\n  static const int INF = 0x3f3f3f3f;\n\n  struct Edge {\n    int from, to, cap, flow;\n    Edge(int from = 0, int to = 0, int cap = 0, int flow = 0)\n        : from(from), to(to), cap(cap), flow(flow) {\n    }\n  };\n\n  int s, t, n;\n  int cnt[MAXN];\n  int cur[MAXN];\n  int path[MAXN];\n  int dist[MAXN];\n  std::vector<Edge> edges;\n  std::vector<int> G[MAXN];\n  std::queue<int> Q;\n\n  void addedge(int from, int to, int cap) {\n    int siz = edges.size();\n    edges.push_back(Edge(from, to, cap, 0));\n    edges.push_back(Edge(to, from, 0, 0));\n    G[from].push_back(siz);\n    G[to].push_back(siz + 1);\n  }\n\n  void BFS() {\n    memset(dist, -1, sizeof dist);\n\n    Q.push(t);\n    dist[t] = 0;\n\n    while (!Q.empty()) {\n      int o = Q.front();\n      Q.pop();\n      for (int i = 0; i < G[o].size(); ++i) {\n        Edge& e = edges[G[o][i]];\n        if (dist[e.to] == -1 && e.cap == 0) {\n          dist[e.to] = dist[o] + 1;\n          Q.push(e.to);\n        }\n      }\n    }\n  }\n\n  int augment() {\n    int mif = INF;\n    for (int o = t; o != s;) {\n      Edge& e = edges[path[o]];\n      mif = std::min(mif, e.cap - e.flow);\n      o = e.from;\n    }\n    for (int o = t; o != s;) {\n      edges[path[o]].flow += mif;\n      edges[path[o] ^ 1].flow -= mif;\n      o = edges[path[o]].from;\n    }\n    return mif;\n  }\n\n  int maxflow() {\n    BFS();\n    memset(cur, 0, sizeof cur);\n    memset(cnt, 0, sizeof cnt);\n    for (int i = 0; i < n; ++i)\n      if (dist[i] < n) ++cnt[dist[i]];\n\n    int ans = 0;\n    for (int o = s; dist[o] < n;) {\n      if (o == t) ans += augment(), o = s;\n      bool ok = false;\n      for (int i = cur[o]; i < G[o].size(); ++i) {\n        Edge& e = edges[G[o][i]];\n        if (e.cap > e.flow && dist[o] == dist[e.to] + 1) {\n          ok = true;\n          cur[o] = i;\n          path[e.to] = G[o][i];\n          o = e.to;\n          break;\n        }\n      }\n      if (!ok) {\n        int d = n - 1;\n        for (int i = 0; i < G[o].size(); ++i) {\n          Edge& e = edges[G[o][i]];\n          if (e.cap > e.flow) d = std::min(d, dist[e.to]);\n        }\n        if (--cnt[dist[o]] == 0) break;\n        ++cnt[dist[o] = d + 1];\n        cur[o] = 0;\n        if (o != s) o = edges[path[o]].from;\n      }\n    }\n    return ans;\n  }\n\n  void solve();\n  void solve(int);\n  void solve(int, int);\n  void solve(int, int, int);\n};   // namespace ISAP\n"}]}]}]},"fields":{"slug":"/post/algorithm/graph/network-flow/24-problems/"}},{"title":"网络流基础之最大权闭合图","description":"网络流基础之最大权闭合图","createdAt":"2016-07-24","updatedAt":null,"timeToRead":"11min 52s","categories":[],"tags":["算法","图论","网络流","最大权闭合图"],"ecmaImports":[],"definitionMap":{"1.png":{"type":"definition","identifier":"1.png","label":"1.png","url":"/static/4fc3243c6d4f784bce1f1dda377a144e/08a64/1.png"},"2.png":{"type":"definition","identifier":"2.png","label":"2.png","url":"/static/d9c6043b5ead0c9d0e0e0364a203e3f8/0227d/2.png"},"引理1":{"type":"definition","identifier":"引理1","label":"引理1","url":"#heading-%E5%BC%95%E7%90%861"},"引理2":{"type":"definition","identifier":"引理2","label":"引理2","url":"#heading-%E5%BC%95%E7%90%862"},"引理3":{"type":"definition","identifier":"引理3","label":"引理3","url":"#heading-%E5%BC%95%E7%90%863"},"引理4":{"type":"definition","identifier":"引理4","label":"引理4","url":"#heading-%E5%BC%95%E7%90%864"}},"footnoteDefinitionMap":{},"excerptAst":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Terms"}],"identifier":"heading-terms"},{"type":"paragraph","children":[{"type":"text","value":"对于有向图 "},{"type":"inlineMath","value":"G=(V,E)"},{"type":"text","value":"，其中 "},{"type":"inlineMath","value":"V"},{"type":"text","value":" 为 "},{"type":"inlineMath","value":"G"},{"type":"text","value":" 的点集，"},{"type":"inlineMath","value":"E"},{"type":"text","value":" 为 "},{"type":"inlineMath","value":"G"},{"type":"text","value":" 的边集。"}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"割集"}]},{"type":"text","value":": 一个 "},{"type":"inlineMath","value":"s-t"},{"type":"text","value":" 割 "},{"type":"inlineMath","value":"[S,T]"},{"type":"text","value":" 是 "},{"type":"inlineMath","value":"V"},{"type":"text","value":" 的一种划分，使得 "},{"type":"inlineMath","value":"s\\in S"},{"type":"text","value":"、"},{"type":"inlineMath","value":"t\\in T"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"最小割"}]},{"type":"text","value":": 一个 "},{"type":"inlineMath","value":"s-t"},{"type":"text","value":" 割的容量是 "},{"type":"inlineMath","value":"\\displaystyle c(S,T) = \\sum_{(\\mu,\\nu) \\in (S\\times T)\\bigcap E} c(\\mu,\\nu)"},{"type":"text","value":"；容量最小的割集称为"},{"type":"strong","children":[{"type":"text","value":"最小割"}]}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"简单割"}]},{"type":"text","value":"：若一个 "},{"type":"inlineMath","value":"s-t"},{"type":"text","value":" 割满足割中的每条边都只与源点 "},{"type":"inlineMath","value":"s"},{"type":"text","value":" 或汇点 "},{"type":"inlineMath","value":"t"},{"type":"text","value":" 相连，则称该割为"},{"type":"strong","children":[{"type":"text","value":"简单割"}]}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"闭合图"}]},{"type":"text","value":"：若点集 "},{"type":"inlineMath","value":"V' \\in V"},{"type":"text","value":" 是一个闭合图，那么对于 "},{"type":"inlineMath","value":"\\forall \\left< \\mu, \\nu\\right > \\in E"},{"type":"text","value":"，若 "},{"type":"inlineMath","value":"\\mu \\in V'"},{"type":"text","value":" 则必有 "}]}]}]}]},"fields":{"slug":"/post/algorithm/graph/network-flow/最大权闭合图/"}},{"title":"2016 多校第 2 场","description":"2016 多校第 2 场","createdAt":"2016-07-22","updatedAt":null,"timeToRead":"2min 40s","categories":[],"tags":["acm","训练赛","数据结构","解题报告"],"ecmaImports":[],"definitionMap":{},"footnoteDefinitionMap":{},"excerptAst":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"1004 Differencia"}],"identifier":"heading-1004-differencia"},{"type":"heading","depth":3,"children":[{"type":"text","value":"题目描述"}],"identifier":"heading-题目描述"},{"type":"paragraph","children":[{"type":"text","value":"有两个序列："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"inlineMath","value":"\\big\\lbrace a_1, a_2, \\cdots, a_n \\big\\rbrace"}]},{"type":"listItem","children":[{"type":"inlineMath","value":"\\big\\lbrace b_1, b_2, \\cdots, b_n \\big\\rbrace"}]}]},{"type":"paragraph","children":[{"type":"text","value":"有两种操作："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"inlineMath","value":"+ \\; l \\;r \\; x"},{"type":"text","value":": 将所有的 "},{"type":"inlineMath","value":"a_i(l \\leqslant i\\leqslant r)"},{"type":"text","value":" 置为 "},{"type":"inlineMath","value":"x"}]},{"type":"listItem","children":[{"type":"inlineMath","value":"? \\; l \\;r"},{"type":"text","value":": 询问 "},{"type":"inlineMath","value":"l\\leqslant i\\leqslant r"},{"type":"text","value":" 中有多少个 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 满足 "},{"type":"inlineMath","value":"a_i \\geqslant b_i"}]}]},{"type":"paragraph","children":[{"type":"text","value":"数据范围："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"inlineMath","value":"1\\leqslant n\\leqslant 10^5"}]},{"type":"listItem","children":[{"type":"inlineMath","value":"3\\times 10^6"},{"type":"text","value":" 次询问，强制在线。"}]}]},{"type":"paragraph","children":[{"type":"link","url":"http://acm.hdu.edu.cn/showproblem.php?pid=5737","children":[{"type":"text","value":"题目链接"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"题目简析"}],"identifier":"heading-题目简析"},{"type":"paragraph","children":[{"type":"text","value":"将 "},{"type":"inlineMath","value":"B"},{"type":"text","value":" 数组建成归并树（用线段树实现即可），并预处理出初始的 "}]}]},"fields":{"slug":"/post/acm/contest/multi-university-training/2016/2/"}},{"title":"二分图","description":"二分图","createdAt":"2016-07-17","updatedAt":null,"timeToRead":"9min 15s","categories":[],"tags":["算法","图论","二分图","学习笔记"],"ecmaImports":[],"definitionMap":{},"footnoteDefinitionMap":{},"excerptAst":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Term"}],"identifier":"heading-term"},{"type":"heading","depth":3,"children":[{"type":"text","value":"点覆盖 (vertex covering)"}],"identifier":"heading-点覆盖-vertex-covering"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"点覆盖"}]},{"type":"text","value":"： 一个点集，满足所有边都至少有一个端点在集合中"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"极小点覆盖"}]},{"type":"text","value":"： 本身是一个点覆盖，但任意一个真子集都不是点覆盖"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"最小点覆盖"}]},{"type":"text","value":"： 点数最少的点覆盖"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"点覆盖数"}]},{"type":"text","value":"： 最小点覆盖的点数"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"边覆盖 (edge covering)"}],"identifier":"heading-边覆盖-edge-covering"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"边覆盖"}]},{"type":"text","value":"： 一个边集，满足所有顶点都是集合中至少一条边的一个端点"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"极小边覆盖"}]},{"type":"text","value":"： 本身是一个边覆盖，但任意一个真子集都不是边覆盖"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"最小边覆盖"}]},{"type":"text","value":"： 边数最少的边覆盖"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"边覆盖数"}]},{"type":"text","value":"： 最小边覆盖的边数"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"团 (clique)"}],"identifier":"heading-团-clique"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"团"}]},{"type":"text","value":"： 一个点集，满足集合中任意两点相邻"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"极大团"}]},{"type":"text","value":"： 本身是一个团，但再加入任意个点都不再是团"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"最大团"}]},{"type":"text","value":"： 点数最多的团"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"团数"}]},{"type":"text","value":"： 最大团的点数"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"独立集 (independent set)"}],"identifier":"heading-独立集-independent-set"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"独立集"}]},{"type":"text","value":"： 一个点集，满足集合中的任意两点都不相邻"}]}]}]},"fields":{"slug":"/post/algorithm/graph/bipartite-graph/"}},{"title":"伸展树专题","description":"伸展树专题","createdAt":"2016-07-03","updatedAt":null,"timeToRead":"7min 5s","categories":[],"tags":["acm","Splay","解题报告","专题训练"],"ecmaImports":[],"definitionMap":{"problem-hiho-coder-1329":{"type":"definition","identifier":"problem-hiho-coder-1329","label":"problem-hiho-coder-1329","url":"http://hihocoder.com/problemset/problem/1329"},"problem-hiho-coder-1333":{"type":"definition","identifier":"problem-hiho-coder-1333","label":"problem-hiho-coder-1333","url":"http://hihocoder.com/problemset/problem/1333"},"problem-hysbz-1269":{"type":"definition","identifier":"problem-hysbz-1269","label":"problem-hysbz-1269","url":"http://www.lydsy.com/JudgeOnline/problem.php?id=1269"},"problem-hysbz-1500":{"type":"definition","identifier":"problem-hysbz-1500","label":"problem-hysbz-1500","url":"http://www.lydsy.com/JudgeOnline/problem.php?id=1500"},"problem-hysbz-1503":{"type":"definition","identifier":"problem-hysbz-1503","label":"problem-hysbz-1503","url":"http://www.lydsy.com/JudgeOnline/problem.php?id=1503"},"problem-la-3961":{"type":"definition","identifier":"problem-la-3961","label":"problem-la-3961","url":"https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=1962"},"problem-poj-2828":{"type":"definition","identifier":"problem-poj-2828","label":"problem-poj-2828","url":"http://poj.org/problem?id=2828"},"problem-uva-11922":{"type":"definition","identifier":"problem-uva-11922","label":"problem-uva-11922","url":"https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=3073"},"problem-uva-11996":{"type":"definition","identifier":"problem-uva-11996","label":"problem-uva-11996","url":"https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=3147"},"solution-hiho-coder-1329":{"type":"definition","identifier":"solution-hiho-coder-1329","label":"solution-hiho-coder-1329","url":"#heading-hihocoder-1329"},"solution-hiho-coder-1333":{"type":"definition","identifier":"solution-hiho-coder-1333","label":"solution-hiho-coder-1333","url":"#heading-hihocoder-1333"},"solution-hysbz-1269":{"type":"definition","identifier":"solution-hysbz-1269","label":"solution-hysbz-1269","url":"#heading-hysbz-1269"},"solution-hysbz-1500":{"type":"definition","identifier":"solution-hysbz-1500","label":"solution-hysbz-1500","url":"#heading-hysbz-1500"},"solution-hysbz-1503":{"type":"definition","identifier":"solution-hysbz-1503","label":"solution-hysbz-1503","url":"#heading-hysbz-1503"},"solution-la-3961":{"type":"definition","identifier":"solution-la-3961","label":"solution-la-3961","url":"#heading-la-3961"},"solution-poj-2828":{"type":"definition","identifier":"solution-poj-2828","label":"solution-poj-2828","url":"#heading-poj-2828"},"solution-uva-11922":{"type":"definition","identifier":"solution-uva-11922","label":"solution-uva-11922","url":"#heading-uva-11922"},"solution-uva-11996":{"type":"definition","identifier":"solution-uva-11996","label":"solution-uva-11996","url":"#heading-uva-11996"},"code-hiho-coder-1329":{"type":"definition","identifier":"code-hiho-coder-1329","label":"code-hiho-coder-1329","url":"/static/0f84e678f80fd7d987847a9891ddeb26505d7ab4/hihocoder-1329.cpp"},"code-hiho-coder-1333":{"type":"definition","identifier":"code-hiho-coder-1333","label":"code-hiho-coder-1333","url":"/static/b998c55669910aa2343a55034d41b838331d9a2a/hihocoder-1333.cpp"},"code-hysbz-1269":{"type":"definition","identifier":"code-hysbz-1269","label":"code-hysbz-1269","url":"/static/0f9183ea1e77c3be8536416001dbd669d9a34b5a/hysbz-1269.cpp"},"code-hysbz-1500":{"type":"definition","identifier":"code-hysbz-1500","label":"code-hysbz-1500","url":"/static/c869f687aa7394b4101087a5e988820101c2681c/hysbz-1500.cpp"},"code-hysbz-1503":{"type":"definition","identifier":"code-hysbz-1503","label":"code-hysbz-1503","url":"/static/a06c653991f52dc999299f28aa34b47c6df0110f/hysbz-1503.cpp"},"code-la-3961":{"type":"definition","identifier":"code-la-3961","label":"code-la-3961","url":"/static/8048263f16addac05ea1b6298f733edbf5fd2b27/LA-3961.cpp"},"code-la-3961_2":{"type":"definition","identifier":"code-la-3961_2","label":"code-la-3961_2","url":"/static/b87f85c9915c24f9acfb30850c026b3330564e36/LA-3961_2.cpp"},"code-poj-2828":{"type":"definition","identifier":"code-poj-2828","label":"code-poj-2828","url":"/static/d6578f538b312cf6f936a5b0bdfe527512782d25/poj-2828.cpp"},"code-poj-2828_2":{"type":"definition","identifier":"code-poj-2828_2","label":"code-poj-2828_2","url":"/static/4dc7a2d54d1d471647590118ce4ab74c5d854f35/poj-2828_2.cpp"},"code-uva-11922":{"type":"definition","identifier":"code-uva-11922","label":"code-uva-11922","url":"/static/b30c9611e8b4cb59e5bae015c30641dda0c1cff9/uva-11922.cpp"},"code-uva-11996":{"type":"definition","identifier":"code-uva-11996","label":"code-uva-11996","url":"/static/6fb19d2637fa89a33b90187dfadd2abf22e0fcbe/uva-11996.cpp"}},"footnoteDefinitionMap":{},"excerptAst":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"题目"}],"identifier":"heading-题目"},{"type":"heading","depth":3,"children":[{"type":"text","value":"hihoCoder/1329"}],"identifier":"heading-hihocoder-1329"},{"type":"paragraph","children":[{"type":"text","value":"题目链接： "},{"type":"linkReference","identifier":"problem-hiho-coder-1329","label":"problem-hiho-coder-1329","referenceType":"full","children":[{"type":"text","value":"hihoCoder/1329 平衡树 Splay"}]}]},{"type":"paragraph","children":[{"type":"text","value":"基础题。"}]},{"type":"code","lang":"cpp","meta":"title=\"hihocoder-1329.cpp\" sourcefile=\"./hihocoder-1329.cpp\" maxlines=\"20\" collapsed linenos","value":"#include <bits/stdc++.h>\n\ntypedef long long LL;\n\nstruct node {\n  int key;\n  int siz;\n  node* lson;\n  node* rson;\n\n  int cmp(int x) {\n    int cnt = lson->siz + 1;\n    if (x == cnt) return -1;\n    return x < cnt ? 0 : 1;\n  }\n  void maintain() {\n    siz = lson->siz + 1 + rson->siz;\n  }\n};\n\ntypedef node* root;\ntypedef std::pair<node*, node*> droot;\nconst int MAX_NODES = 200000 + 10;\n\nnode* null;\nnode* nodetop;\nnode nodepool[MAX_NODES];\n\ninline root newnode(int key = 0) {\n  nodetop->key = key;\n  nodetop->siz = 1;\n  nodetop->lson = null;\n  nodetop->rson = null;\n  return nodetop++;\n}\n\ninline void zag(root& o) {\n  root k = o->rson;\n  o->rson = k->lson;\n  k->lson = o;\n  o = k;\n}\ninline void zig(root& o) {\n  root k = o->lson;\n  o->lson = k->rson;\n  k->rson = o;\n  o = k;\n}\ninline void rotate(root& o, int d) {\n  d ? zig(o) : zag(o);\n  d ? o->rson->maintain() : o->lson->maintain();\n  o->maintain();\n}\n\ninline void splay(root& o, int k) {\n  int d = o->cmp(k);\n  if (d == 1) k -= o->lson->siz + 1;\n  if (d != -1) {\n    root& p = d ? o->rson : o->lson;\n    int d2 = p->cmp(k);\n    if (d2 == 1) k -= p->lson->siz + 1;\n    if (d2 != -1) {\n      splay((d2 ? p->rson : p->lson), k);\n      if (d == d2)\n        rotate(o, d ^ 1);\n      else\n        rotate(p, d);\n    }\n    rotate(o, d ^ 1);\n  }\n}\n\ninline void split(root o, int k, root& left, root& right) {\n  splay(o, k);\n  left = o;\n  right = o->rson;\n  o->rson = null;\n  o->maintain();\n}\n\ninline root merge(root left, root right) {\n  splay(left, left->siz);\n  left->rson = right;\n  left->maintain();\n  return left;\n}\n\ninline int rank(root o, int key) {\n  if (o == null) return 0;\n  if (key == o->key) return o->lson->siz;\n  if (key < o->key) return rank(o->lson, key);\n  return o->lson->siz + 1 + rank(o->rson, key);\n}\n\ninline void insert(root& o, int id) {\n  int k = rank(o, id);\n  root left, right;\n  root middle = newnode(id);\n  split(o, k, left, right);\n  o = merge(merge(left, middle), right);\n}\n\ninline void remove(root& o, int id1, int id2) {\n  int k1 = rank(o, id1);\n  int k2 = rank(o, id2 + 1);\n  if (k1 >= k2) return;\n\n  root left, middle, right;\n  split(o, k1, left, right);\n  split(right, k2 - k1, middle, right);\n  o = merge(left, right);\n}\n\ninline int query(root& o, int key) {\n  if (o == null) return 0;\n  if (key < o->key) return query(o->lson, key);\n  return std::max(o->key, query(o->rson, key));\n}\n\nroot rt;\nvoid Init() {\n  null = new node();\n  null->key = 0;\n  null->siz = 0;\n  null->lson = NULL;\n  null->rson = NULL;\n\n  nodetop = nodepool;\n  rt = newnode(0);\n  rt->rson = newnode(1000000001);\n}\n\nint N, arg1, arg2, arg3;\nchar cmd[20];\ninline int read() {\n  bool positive = true;\n  char c = getchar();\n  int s = 0;\n  for (; c < '0' || c > '9'; c = getchar())\n    if (c == '-') positive = false;\n  for (; c >= '0' && c <= '9'; c = getchar()) s = s * 10 + c - '0';\n  return positive ? s : -s;\n}\n\nint main() {\n  Init();\n  N = read();\n  for (int i = 1; i <= N; ++i) {\n    scanf(\"%s\", cmd);\n    arg1 = std::min(std::max(read(), 1), 1000000000);\n    if (cmd[0] == 'D') arg2 = std::min(std::max(read(), 1), 1000000000);\n\n    switch (cmd[0]) {\n    case 'I':\n      insert(rt, arg1);\n      break;\n    case 'Q':\n      printf(\"%lld\\n\", query(rt, arg1));\n      break;\n    case 'D':\n      remove(rt, arg1, arg2);\n      break;\n    }\n  }\n  return 0;\n}\n"}]},"fields":{"slug":"/post/data-structure/bbst/splay/"}}]},"postItems":{"nodes":[{"title":"洗牌问题和 knuth-shuffle 算法","createdAt":"2021-07-22","tags":["shuffle","knuth-shuffle","约瑟夫环"],"fields":{"slug":"/post/algorithm/shuffle/"}},{"title":"编译原理-语法制导翻译实现计算器","createdAt":"2016-06-23","tags":["编译原理","语法制导翻译","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/exercise/"}},{"title":"编译原理-语法分析","createdAt":"2016-06-18","tags":["编译原理","语法分析","计算机"],"fields":{"slug":"/post/fundamentals-of-compiling/grammar/"}},{"title":"端口管理","createdAt":"2021-06-20","tags":["network","port","ssh","netstat"],"fields":{"slug":"/post/network/端口管理/"}},{"title":"防抖和节流","createdAt":"2021-09-03","tags":["coding","debounce","throttle"],"fields":{"slug":"/post/algorithm/debounce-and-throttle/"}},{"title":"精确覆盖问题和 DLX 算法","createdAt":"2021-07-24","tags":["算法","精确覆盖","DLX 算法"],"fields":{"slug":"/post/algorithm/dlx/"}},{"title":"背包九讲","createdAt":"2021-06-27","tags":["acm","算法","动态规划","背包问题"],"fields":{"slug":"/post/algorithm/knapsack/"}},{"title":"最长公共子序列（LCS）","createdAt":"2021-06-02","tags":["最长公共子序列","LCS"],"fields":{"slug":"/post/algorithm/lcs/"}},{"title":"最长上升子序列（LIS）","createdAt":"2021-06-02","tags":["最长上升子序列","LIS"],"fields":{"slug":"/post/algorithm/lis/"}},{"title":"当你想来一把数独","createdAt":"2021-08-01","tags":["game","sudoku"],"fields":{"slug":"/post/game/sudoku/"}},{"title":"函数的极限","createdAt":"2021-05-09","tags":["math","函数","极限"],"fields":{"slug":"/post/math/calculus/函数的极限/"}},{"title":"自然对数底数e","createdAt":"2021-08-07","tags":["math","函数","极限","自然对数"],"fields":{"slug":"/post/math/calculus/自然对数底数e/"}},{"title":"小球放盒模型","createdAt":"2016-04-22","tags":["math","组合数学"],"fields":{"slug":"/post/math/combinatorial/小球放盒模型/"}},{"title":"不修改数组找出重复的数字","createdAt":"2021-06-29","tags":["quiz","分治","追击"],"fields":{"slug":"/post/quiz/partition/find-duplicate-number/"}},{"title":"统计区间内的线段","createdAt":"2021-07-21","tags":["quiz","扫描线","前缀和","树状数组","线段树"],"fields":{"slug":"/post/quiz/scanning-line/segments/"}},{"title":"CSS 选择器","createdAt":"2020-11-02","tags":["web","frontend","css"],"fields":{"slug":"/post/web/css/selector/"}},{"title":"ECMA 2020 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2020/"}},{"title":"ECMA 2021 新特性","createdAt":"2021-04-05","tags":["javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/2021/"}},{"title":"Javascript 踩坑记——继承和原型链","createdAt":"2021-09-05","tags":["studynote","javascript","ecmascript"],"fields":{"slug":"/post/web/javascript/inherit/"}},{"title":"React Reconciliation","createdAt":"2021-06-26","tags":["react","react reconciliation"],"fields":{"slug":"/post/web/react/reconciliation/"}},{"title":"XSS 与 CSRF 的攻防","createdAt":"2021-08-19","tags":["web","web security","csrf"],"fields":{"slug":"/post/web/security/xss-csrf/"}},{"title":"二分图","createdAt":"2016-07-17","tags":["算法","图论","二分图","学习笔记"],"fields":{"slug":"/post/algorithm/graph/bipartite-graph/"}},{"title":"最长回文子串 Manacher 算法","createdAt":"2016-04-18","tags":["算法","字符串","回文串","manacher"],"fields":{"slug":"/post/algorithm/string/manacher/"}},{"title":"树链剖分","createdAt":"2016-04-23","tags":["acm","算法","树链剖分"],"fields":{"slug":"/post/algorithm/tree/tcs/"}},{"title":"伸展树专题","createdAt":"2016-07-03","tags":["acm","Splay","解题报告","专题训练"],"fields":{"slug":"/post/data-structure/bbst/splay/"}},{"title":"组合游戏基础之 SG 函数和 SG 定理","createdAt":"2016-09-04","tags":["组合数学","组合游戏","SG 定理"],"fields":{"slug":"/post/math/combinatorial/SG/"}},{"title":"快速傅里叶变换和雷德算法","createdAt":"2016-04-10","tags":["acm","大数乘法","fft","快速傅里叶变换"],"fields":{"slug":"/post/math/number-theory/fft/"}},{"title":"数论基础之筛法","createdAt":"2016-05-06","tags":["math","数论","素数","欧拉函数","线性筛"],"fields":{"slug":"/post/math/number-theory/sieve/"}},{"title":"数论基础之原根","createdAt":"2016-05-16","tags":["math","数论","原根"],"fields":{"slug":"/post/math/number-theory/原根/"}},{"title":"数论基础之欧拉函数","createdAt":"2016-05-10","tags":["math","数论","既约剩余系","欧拉函数"],"fields":{"slug":"/post/math/number-theory/欧拉函数/"}},{"title":"约瑟夫环问题","createdAt":"2021-07-16","tags":["quiz","经典问题","约瑟夫环"],"fields":{"slug":"/post/quiz/classical/Josephus-ring/"}},{"title":"扔鸡蛋问题","createdAt":"2021-06-20","tags":["quiz","动态规划"],"fields":{"slug":"/post/quiz/dp/egg-drop/"}},{"title":"在 excel 中启用正则表达式","createdAt":"2021-03-29","tags":["excel","tools"],"fields":{"slug":"/post/tool/excel/regex/"}},{"title":"百度之星 2016 解题报告","createdAt":"2016-06-03","tags":["acm","递推","状态压缩","动态规划","字典树","解题报告"],"fields":{"slug":"/post/acm/contest/baiduzhixing/2016/"}},{"title":"51nod-1462 数据结构 -- 解题报告","createdAt":"2016-04-23","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/51nod/1462/"}},{"title":"HDU-5306 Gorgeous Sequence 解题报告","createdAt":"2016-04-09","tags":["acm","数据结构","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5306/"}},{"title":"HDU-5574 Colorful Tree 解题报告（原 2015-上海区域赛-C）","createdAt":"2016-04-12","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5574/"}},{"title":"HDU-5576 Expection of String 解题报告（原 2015-上海区域赛-E)","createdAt":"2016-04-24","tags":["acm","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/hdu/5576/"}},{"title":"剑指offer 解题报告","createdAt":"2021-07-15","tags":["专题训练","解题报告"],"fields":{"slug":"/post/acm/oj/nowcoder/jz-offer/"}},{"title":"POJ-1324 Holedox Moving 解题报告","createdAt":"2016-04-13","tags":["acm","bfs","图论","状态压缩","解题报告"],"fields":{"slug":"/post/acm/oj/poj/1324/"}},{"title":"网络流 24 题","createdAt":"2016-07-30","tags":["acm","算法","图论","网络流","二分图","解题报告","专题训练"],"fields":{"slug":"/post/algorithm/graph/network-flow/24-problems/"}},{"title":"网络流基础之最大权闭合图","createdAt":"2016-07-24","tags":["算法","图论","网络流","最大权闭合图"],"fields":{"slug":"/post/algorithm/graph/network-flow/最大权闭合图/"}},{"title":"Dijkstra 算法","createdAt":"2021-05-29","tags":["算法","最短路","单源最短路","dijkstra"],"fields":{"slug":"/post/algorithm/graph/shortest-path/dijkstra/"}},{"title":"Custom React Hooks","createdAt":"2020-10-29","tags":["react","react hooks"],"fields":{"slug":"/post/web/react/hooks/custom/"}},{"title":"2016 多校第 2 场","createdAt":"2016-07-22","tags":["acm","训练赛","数据结构","解题报告"],"fields":{"slug":"/post/acm/contest/multi-university-training/2016/2/"}},{"title":"CCF 2015-09 最佳文章 解题报告","createdAt":"2016-06-26","tags":["acm","Aho-Corasick 自动机","矩阵快速幂","动态规划","解题报告"],"fields":{"slug":"/post/acm/oj/ccf/2015/09/E/"}},{"title":"数论基础之模方程初步","createdAt":"2016-05-04","tags":["math","数论","扩展欧几里得算法","中国剩余定理","Baby Step Gaint Step"],"fields":{"slug":"/post/math/number-theory/模方程/basic/"}}]}},"pageContext":{"contentType":"post","paginationUrl":"/posts","urlPrefix":"/posts","pageTotal":10,"pageSize":5,"pageCurrent":6,"limit":5,"skip":25}},"staticQueryHashes":[],"slicesMap":{}}