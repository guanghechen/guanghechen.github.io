3:I[5613,[],""]
5:I[31778,[],""]
7:I[79286,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","800","static/chunks/800-4848173b49d8d689.js","185","static/chunks/app/layout-b711fdca504bb2b1.js"],"SiteProvider"]
8:I[54110,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","800","static/chunks/800-4848173b49d8d689.js","185","static/chunks/app/layout-b711fdca504bb2b1.js"],""]
9:I[74117,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","800","static/chunks/800-4848173b49d8d689.js","185","static/chunks/app/layout-b711fdca504bb2b1.js"],"MaterialThemeProvider"]
a:I[55153,["74","static/chunks/74-31f764c22632bceb.js","800","static/chunks/800-4848173b49d8d689.js","160","static/chunks/app/not-found-79f3557760569a3b.js"],"NotFoundView"]
4:["slug","acm/oj/poj/1324","c"]
0:["9fGftGlHDOVXOVnlBCAfv",[[["",{"children":["(post)",{"children":["post",{"children":[["slug","acm/oj/poj/1324","c"],{"children":["__PAGE__?{\"slug\":[\"acm\",\"oj\",\"poj\",\"1324\"]}",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["(post)",{"children":["post",{"children":[["slug","acm/oj/poj/1324","c"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(post)","children","post","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(post)","children","post","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,"$L6",null]]},[null,["$","html",null,{"lang":"en","className":"__className_324942","children":[["$","head",null,{"children":[["$","meta",null,{"charSet":"utf8"}],["$","meta","viewport",{"name":"viewport","content":"initial-scale=1.0, width=device-width"}],["$","meta",null,{"name":"application-name","content":"guanghechen"}],["$","meta",null,{"name":"apple-mobile-web-app-title","content":"光和尘"}],["$","meta",null,{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta",null,{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta",null,{"name":"description","content":"Guanghechen's personal site"}],["$","meta",null,{"name":"format-detection","content":"telephone=no"}],["$","meta",null,{"name":"mobile-web-app-capable","content":"yes"}],["$","meta",null,{"name":"msapplication-config","content":"/icons/browserconfig.xml"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#2B5797"}],["$","meta",null,{"name":"msapplication-tap-highlight","content":"no"}],["$","meta",null,{"name":"theme-color","content":"#a2466c"}],["$","meta",null,{"property":"og:type","content":"website"}],["$","meta",null,{"property":"og:title","content":"光和尘"}],["$","meta",null,{"property":"og:description","content":"光和尘的个人站点"}],["$","meta",null,{"property":"og:site_name","content":"guanghechen"}],["$","meta",null,{"property":"og:url","content":"https://me.guanghechen.com"}],["$","link",null,{"rel":"manifest","href":"/manifest.json"}],["$","link",null,{"rel":"shortcut icon","href":"/favicon.png"}]]}],["$","body",null,{"children":["$","$L7",null,{"children":["$","$L8",null,{"children":["$","$L9",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","$La",null,{}],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/2159a4b672631e08.css","precedence":"next","crossOrigin":""}]]}]}]}]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f2ccec9f31141b1c.css","precedence":"next","crossOrigin":""}]],"$Lb"]]]]
c:I[56057,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","4","static/chunks/4-1f47c029a7fba46f.js","810","static/chunks/810-8ebda3a4770496e8.js","659","static/chunks/659-7f246e0fb997ad2e.js","714","static/chunks/714-13c64a7806ea4ae0.js","800","static/chunks/800-4848173b49d8d689.js","448","static/chunks/448-62c186fb5283557d.js","422","static/chunks/app/(post)/layout-dfa2e09a2a72ad66.js"],"YozoraThemeProvider"]
d:I[20593,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","4","static/chunks/4-1f47c029a7fba46f.js","810","static/chunks/810-8ebda3a4770496e8.js","659","static/chunks/659-7f246e0fb997ad2e.js","714","static/chunks/714-13c64a7806ea4ae0.js","800","static/chunks/800-4848173b49d8d689.js","448","static/chunks/448-62c186fb5283557d.js","422","static/chunks/app/(post)/layout-dfa2e09a2a72ad66.js"],"PostLayoutView"]
e:I[59627,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","4","static/chunks/4-1f47c029a7fba46f.js","810","static/chunks/810-8ebda3a4770496e8.js","659","static/chunks/659-7f246e0fb997ad2e.js","714","static/chunks/714-13c64a7806ea4ae0.js","595","static/chunks/595-60215c9a9c19277d.js","551","static/chunks/551-68df0022cc950ef8.js","800","static/chunks/800-4848173b49d8d689.js","448","static/chunks/448-62c186fb5283557d.js","918","static/chunks/app/(post)/post/%5B...slug%5D/page-80cd6d5787edd594.js"],"PostDetailPageView"]
6:["$","$Lc",null,{"children":["$","$Ld",null,{"data":{"postItems":[{"title":"Javascript 踩坑记——继承和原型链","slug":"/post/web/javascript/inherit","tags":["studynote","javascript","ecmascript"],"createdAt":"Sep 05, 2021"},{"title":"防抖和节流","slug":"/post/algorithm/debounce-and-throttle","tags":["coding","debounce","throttle"],"createdAt":"Sep 03, 2021"},{"title":"XSS 与 CSRF 的攻防","slug":"/post/web/security/xss-csrf","tags":["web","web security","csrf"],"createdAt":"Aug 19, 2021"},{"title":"自然对数底数 e","slug":"/post/math/calculus/自然对数底数e","tags":["math","函数","极限","自然对数"],"createdAt":"Aug 07, 2021"},{"title":"当你想来一把数独","slug":"/post/game/sudoku","tags":["game","sudoku"],"createdAt":"Aug 01, 2021"},{"title":"精确覆盖问题和 DLX 算法","slug":"/post/algorithm/dlx","tags":["算法","精确覆盖","DLX 算法"],"createdAt":"Jul 24, 2021"},{"title":"洗牌问题和 knuth-shuffle 算法","slug":"/post/algorithm/shuffle","tags":["shuffle","knuth-shuffle","约瑟夫环"],"createdAt":"Jul 22, 2021"},{"title":"统计区间内的线段","slug":"/post/quiz/scanning-line/segments","tags":["quiz","扫描线","前缀和","树状数组","线段树"],"createdAt":"Jul 21, 2021"},{"title":"约瑟夫环问题","slug":"/post/quiz/classical/Josephus-ring","tags":["quiz","经典问题","约瑟夫环"],"createdAt":"Jul 16, 2021"},{"title":"剑指offer 解题报告","slug":"/post/acm/oj/nowcoder/jz-offer","tags":["专题训练","解题报告"],"createdAt":"Jul 15, 2021"},{"title":"不修改数组找出重复的数字","slug":"/post/quiz/partition/find-duplicate-number","tags":["quiz","分治","追击"],"createdAt":"Jun 29, 2021"},{"title":"背包九讲","slug":"/post/algorithm/knapsack","tags":["acm","算法","动态规划","背包问题"],"createdAt":"Jun 27, 2021"},{"title":"React Reconciliation","slug":"/post/web/react/reconciliation","tags":["react","react reconciliation"],"createdAt":"Jun 26, 2021"},{"title":"扔鸡蛋问题","slug":"/post/quiz/dp/egg-drop","tags":["quiz","动态规划"],"createdAt":"Jun 20, 2021"},{"title":"端口管理","slug":"/post/network/端口管理","tags":["network","port","ssh","netstat"],"createdAt":"Jun 20, 2021"},{"title":"最长公共子序列（LCS）","slug":"/post/algorithm/lcs","tags":["最长公共子序列","LCS"],"createdAt":"Jun 02, 2021"},{"title":"最长上升子序列（LIS）","slug":"/post/algorithm/lis","tags":["最长上升子序列","LIS"],"createdAt":"Jun 02, 2021"},{"title":"Dijkstra 算法","slug":"/post/algorithm/graph/shortest-path/dijkstra","tags":["算法","最短路","单源最短路","dijkstra"],"createdAt":"May 29, 2021"},{"title":"函数的极限","slug":"/post/math/calculus/函数的极限","tags":["math","函数","极限"],"createdAt":"May 09, 2021"},{"title":"ECMA 2020 新特性","slug":"/post/web/javascript/2020","tags":["javascript","ecmascript"],"createdAt":"Apr 05, 2021"},{"title":"ECMA 2021 新特性","slug":"/post/web/javascript/2021","tags":["javascript","ecmascript"],"createdAt":"Apr 05, 2021"},{"title":"在 excel 中启用正则表达式","slug":"/post/tool/excel/regex","tags":["excel","tools"],"createdAt":"Mar 29, 2021"},{"title":"CSS 选择器","slug":"/post/web/css/selector","tags":["web","frontend","css"],"createdAt":"Nov 02, 2020"},{"title":"Custom React Hooks","slug":"/post/web/react/hooks/custom","tags":["react","react hooks"],"createdAt":"Oct 29, 2020"},{"title":"组合游戏基础之 SG 函数和 SG 定理","slug":"/post/math/combinatorial/SG","tags":["组合数学","组合游戏","SG 定理"],"createdAt":"Sep 04, 2016"},{"title":"网络流 24 题","slug":"/post/algorithm/graph/network-flow/24-problems","tags":["acm","算法","图论","网络流","二分图","解题报告","专题训练"],"createdAt":"Jul 30, 2016"},{"title":"网络流基础之最大权闭合图","slug":"/post/algorithm/graph/network-flow/最大权闭合图","tags":["算法","图论","网络流","最大权闭合图"],"createdAt":"Jul 24, 2016"},{"title":"2016 多校第 2 场","slug":"/post/acm/contest/multi-university-training/2016/2","tags":["acm","训练赛","数据结构","解题报告"],"createdAt":"Jul 22, 2016"},{"title":"二分图","slug":"/post/algorithm/graph/bipartite-graph","tags":["算法","图论","二分图","学习笔记"],"createdAt":"Jul 17, 2016"},{"title":"伸展树专题","slug":"/post/data-structure/bbst/splay","tags":["acm","Splay","解题报告","专题训练"],"createdAt":"Jul 03, 2016"},{"title":"CCF 2015-09 最佳文章 解题报告","slug":"/post/acm/oj/ccf/2015/09/E","tags":["acm","Aho-Corasick 自动机","矩阵快速幂","动态规划","解题报告"],"createdAt":"Jun 26, 2016"},{"title":"编译原理-语法制导翻译实现计算器","slug":"/post/fundamentals-of-compiling/exercise","tags":["编译原理","语法制导翻译","计算机"],"createdAt":"Jun 23, 2016"},{"title":"编译原理-语法分析","slug":"/post/fundamentals-of-compiling/grammar","tags":["编译原理","语法分析","计算机"],"createdAt":"Jun 18, 2016"},{"title":"百度之星 2016 解题报告","slug":"/post/acm/contest/baiduzhixing/2016","tags":["acm","递推","状态压缩","动态规划","字典树","解题报告"],"createdAt":"Jun 03, 2016"},{"title":"数论基础之原根","slug":"/post/math/number-theory/原根","tags":["math","数论","原根"],"createdAt":"May 16, 2016"},{"title":"数论基础之欧拉函数","slug":"/post/math/number-theory/欧拉函数","tags":["math","数论","既约剩余系","欧拉函数"],"createdAt":"May 10, 2016"},{"title":"数论基础之筛法","slug":"/post/math/number-theory/sieve","tags":["math","数论","素数","欧拉函数","线性筛"],"createdAt":"May 06, 2016"},{"title":"数论基础之模方程初步","slug":"/post/math/number-theory/模方程/basic","tags":["math","数论","扩展欧几里得算法","中国剩余定理","Baby Step Gaint Step"],"createdAt":"May 04, 2016"},{"title":"HDU-5576 Expection of String 解题报告（原 2015-上海区域赛-E)","slug":"/post/acm/oj/hdu/5576","tags":["acm","动态规划","解题报告"],"createdAt":"Apr 24, 2016"},{"title":"树链剖分","slug":"/post/algorithm/tree/tcs","tags":["acm","算法","树链剖分"],"createdAt":"Apr 23, 2016"},{"title":"51nod-1462 数据结构 -- 解题报告","slug":"/post/acm/oj/51nod/1462","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"createdAt":"Apr 23, 2016"},{"title":"小球放盒模型","slug":"/post/math/combinatorial/小球放盒模型","tags":["math","组合数学"],"createdAt":"Apr 22, 2016"},{"title":"最长回文子串 Manacher 算法","slug":"/post/algorithm/string/manacher","tags":["算法","字符串","回文串","manacher"],"createdAt":"Apr 18, 2016"},{"title":"POJ-1324 Holedox Moving 解题报告","slug":"/post/acm/oj/poj/1324","tags":["acm","bfs","图论","状态压缩","解题报告"],"createdAt":"Apr 13, 2016"},{"title":"HDU-5574 Colorful Tree 解题报告（原 2015-上海区域赛-C）","slug":"/post/acm/oj/hdu/5574","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"createdAt":"Apr 12, 2016"},{"title":"快速傅里叶变换和雷德算法","slug":"/post/math/number-theory/fft","tags":["acm","大数乘法","fft","快速傅里叶变换"],"createdAt":"Apr 10, 2016"},{"title":"HDU-5306 Gorgeous Sequence 解题报告","slug":"/post/acm/oj/hdu/5306","tags":["acm","数据结构","线段树","解题报告"],"createdAt":"Apr 09, 2016"}]},"storageKey":"@kyokuya/react-layout-post/#page","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(post)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}]}]
f:["acm","bfs","图论","状态压缩","解题报告"]
10:T82d,#include <algorithm>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <queue>
using namespace std;

const int nx[] = { -1, 0, 1, 0 };
const int ny[] = { 0, 1, 0, -1 };

int T_T, N, M, L, B, bit, sx, sy, sd;
bool vis[21][21][1 << 14 | 1], blank[21][21];

struct node {
  int x, y, d, s;
  node(int x = 0, int y = 0, int d = 0, int s = 0) : x(x), y(y), d(d), s(s) {
  }
  bool block(int x, int y) {
    if (x >= 1 && y >= 1 && x <= N && y <= M && blank[x][y]) {
      int mx = this->x;
      int my = this->y;
      int md = this->d;
      for (int i = 1; i < L; ++i) {
        int d = md & 3;
        mx += nx[d];
        my += ny[d];
        md >>= 2;
        if (mx == x && my == y) return true;
      }
      return false;
    }
    return true;
  }
};

queue<node> Q;

int bfs() {
  while (!Q.empty()) Q.pop();
  Q.push(node(sx, sy, sd));
  vis[sx][sy][sd] = true;

  while (!Q.empty()) {
    node now = Q.front();
    Q.pop();

    if (now.x == 1 && now.y == 1) return now.s;
    for (int d = 0; d < 4; ++d) {
      int mx = now.x + nx[d];
      int my = now.y + ny[d];
      if (!now.block(mx, my)) {
        int md = ((now.d << 2) & bit) | (d ^ 2);
        if (vis[mx][my][md]) continue;
        vis[mx][my][md] = true;
        Q.push(node(mx, my, md, now.s + 1));
      }
    }
  }

  return -1;
}

void work() {
  while (scanf("%d%d%d", &N, &M, &L) == 3 && N && M && L) {
    bit = (1 << (L - 1 << 1)) - 1;
    for (int n = 1; n <= N; ++n)
      for (int m = 1; m <= M; ++m) memset(vis[n][m], 0, bit + 1);
    memset(blank, 1, sizeof blank);

    scanf("%d%d", &sx, &sy);
    sd = 0;
    int mx = sx, my = sy, mu, mv;
    for (int i = 0; i < L - 1; ++i) {
      scanf("%d%d", &mu, &mv);
      for (int d = 0; d < 4; ++d)
        if (mx + nx[d] == mu && my + ny[d] == mv) {
          sd |= d << (i << 1);
          mx = mu;
          my = mv;
          break;
        }
    }
    scanf("%d", &B);
    while (B--) {
      scanf("%d%d", &mu, &mv);
      blank[mu][mv] = false;
    }

    printf("Case %d: %d\n", ++T_T, bfs());
  }
}

int main() {
  work();
  return 0;
}
2:["$","$Le",null,{"data":{"title":"POJ-1324 Holedox Moving 解题报告","titleAst":{"type":"paragraph","children":[{"type":"text","value":"POJ-1324 Holedox Moving 解题报告"}]},"slug":"/post/acm/oj/poj/1324","createdAt":"Apr 13, 2016","updatedAt":"Nov 03, 2021","timeToRead":"03min 51s","tags":"$f","categories":[],"ast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"题意简述"}],"identifier":"heading-题意简述"},{"type":"paragraph","children":[{"type":"text","value":"在一个 "},{"type":"inlineMath","value":"N\\times M"},{"type":"text","value":" 的矩形方格地图中，有一条长度为 "},{"type":"inlineMath","value":"L"},{"type":"text","value":" 的贪吃蛇。地图的 "},{"type":"inlineMath","value":"(1,1)"},{"type":"text","value":" 位置是一个出口，如果贪吃蛇能移动到出口，输出最短步数（头到达出口的步数）；否则输出 "},{"type":"inlineMath","value":"-1"},{"type":"text","value":"。"}]},{"type":"paragraph","children":[{"type":"text","value":"贪吃蛇的移动规则如下："}]},{"type":"list","ordered":false,"marker":45,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"只能朝边相邻的格子移动"}]},{"type":"listItem","children":[{"type":"text","value":"不能朝障碍物移动（身体及四周墙壁都视作障碍物）"}]}]},{"type":"paragraph","children":[{"type":"text","value":"数据范围： "},{"type":"inlineMath","value":"1\\leqslant N, M\\leqslant 8"},{"type":"text","value":"，"},{"type":"inlineMath","value":"2\\leqslant L\\leqslant 8"},{"type":"text","value":"。"}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"题目简析"}],"identifier":"heading-题目简析"},{"type":"paragraph","children":[{"type":"text","value":"为方便叙述，对贪吃蛇的身体进行编号：蛇头为 "},{"type":"inlineMath","value":"-1"},{"type":"text","value":" 号，蛇尾为 "},{"type":"inlineMath","value":"L-2"},{"type":"text","value":" 号，以此类推。因为贪吃蛇的身体是紧邻的。所以，当我们确定了蛇头的位置，对于身体的其它任一部分\n"},{"type":"inlineMath","value":"i"},{"type":"text","value":"，我们仅需知道 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 相对与 "},{"type":"inlineMath","value":"i-1"},{"type":"text","value":" 的方向即可。于是可用链表的思想来存储贪吃蛇："}]},{"type":"list","ordered":false,"marker":45,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"蛇头用一个二元组 "},{"type":"inlineMath","value":"(x,y)"},{"type":"text","value":" 表示其位置"}]},{"type":"listItem","children":[{"type":"text","value":"身体其它部分 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 用一个整数 "},{"type":"inlineMath","value":"dir(i)\\in\\lbrace 0, 1, 2, 3 \\rbrace"},{"type":"text","value":" 来表示它相对\n"},{"type":"inlineMath","value":"i-1"},{"type":"text","value":" 的方向。"}]}]},{"type":"paragraph","children":[{"type":"text","value":"注意到方向只有 "},{"type":"inlineMath","value":"4"},{"type":"text","value":" 个数，且蛇的长度 "},{"type":"inlineMath","value":"L\\leqslant 8"},{"type":"text","value":"。不难想到状态压缩，则用一个\n"},{"type":"inlineMath","value":"28"},{"type":"text","value":" 位 bit 的整数表示蛇身就够了："}]},{"type":"list","ordered":false,"marker":45,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"约定第 "},{"type":"inlineMath","value":"2i,2i+1"},{"type":"text","value":" 两位 bit 表示蛇身第 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 号部分相对于 "},{"type":"inlineMath","value":"i-1"},{"type":"text","value":" 号部分的方向。"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"当蛇头朝某一合法位置移动后，"},{"type":"inlineMath","value":"\\displaystyle dir'(i)=\\frac{dir(i-1)}{4} \\times 4 = c"},{"type":"text","value":"\n其中，"},{"type":"inlineMath","value":"dir'"},{"type":"text","value":" 表示移动后的蛇身位置关系，"},{"type":"inlineMath","value":"c"},{"type":"text","value":" 为此次蛇头移动的方向\n"},{"type":"footnoteReference","label":"1","identifier":"footnote-1"},{"type":"text","value":"。"}]}]}]},{"type":"paragraph","children":[{"type":"text","value":"所以，当贪吃蛇移动一步后，我们仅需将方向变量：左移两位，再右移两位，再或上蛇头移动的方向。剩下的问题就是宽度优先搜索了。"}]},{"type":"admonition","keyword":"tip","title":[],"children":[{"type":"paragraph","children":[{"type":"text","value":"问题的难点在于记录移动的状态。"}]}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"复杂度分析"}],"identifier":"heading-复杂度分析"},{"type":"paragraph","children":[{"type":"text","value":"由于移动操作仅需 "},{"type":"inlineMath","value":"O(1)"},{"type":"text","value":" 就可以完成了；但是，判断下一步是否为蛇的身体将需要\n"},{"type":"inlineMath","value":"O(L)"},{"type":"text","value":" 的时间完成。一共有 "},{"type":"inlineMath","value":"O(N\\times M\\times 2^{2L-2})"},{"type":"text","value":" 个状态。"}]},{"type":"list","ordered":false,"marker":45,"spread":false,"children":[{"type":"listItem","children":[{"type":"inlineCode","value":"空间复杂度"},{"type":"text","value":" "},{"type":"inlineMath","value":"O(N\\times M\\times 2^{2L-2})"}]},{"type":"listItem","children":[{"type":"inlineCode","value":"时间复杂度"},{"type":"text","value":" "},{"type":"inlineMath","value":"O(N\\times M\\times L\\times 2^{2L-2})"}]}]},{"type":"paragraph","children":[{"type":"text","value":"AC 代码："}]},{"type":"code","lang":"cpp","meta":"title=\"poj.1324.cpp\" sourcefile=\"./solution.cpp\" linenos collapsed maxlines=20","value":"$10"},{"type":"heading","depth":2,"children":[{"type":"text","value":"Related"}],"identifier":"heading-related"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"link","url":"http://poj.org/problem?id=1324","children":[{"type":"text","value":"题目链接"}]}]},{"type":"listItem","children":[{"type":"link","url":"/asset/post/file/afc8260f-4f1d-5996-9f4f-67259750d9ed.cpp","children":[{"type":"text","value":"solution.cpp"}]}]}]}]},"toc":{"children":[{"depth":2,"identifier":"heading-题意简述","contents":[{"type":"text","value":"题意简述"}],"children":[]},{"depth":2,"identifier":"heading-题目简析","contents":[{"type":"text","value":"题目简析"}],"children":[]},{"depth":2,"identifier":"heading-复杂度分析","contents":[{"type":"text","value":"复杂度分析"}],"children":[]},{"depth":2,"identifier":"heading-related","contents":[{"type":"text","value":"Related"}],"children":[]}]},"ecmaImports":[],"definitionMap":{},"footnoteDefinitionMap":{"footnote-1":{"type":"footnoteDefinition","identifier":"footnote-1","label":"1","children":[{"type":"paragraph","children":[{"type":"text","value":"因为当贪吃蛇移动一步后，除了蛇头，身体 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 号部分将会移至原先 "},{"type":"inlineMath","value":"i-1"},{"type":"text","value":" 号部分所在的地方。，而 "},{"type":"inlineMath","value":"0"},{"type":"text","value":" 号身体会移至原先蛇头所处的位置，此时和蛇头的相对方向正好是移动方向"}]}]}},"images":[],"paginationUrl":"/posts/7","prev":{"title":"HDU-5574 Colorful Tree 解题报告（原 2015-上海区域赛-C）","slug":"/post/acm/oj/hdu/5574"},"next":{"title":"最长回文子串 Manacher 算法","slug":"/post/algorithm/string/manacher"},"aplayerOptions":null}}]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"POJ-1324 Holedox Moving 解题报告 | guanghechen"}],["$","meta","3",{"name":"description","content":"POJ-1324 Holedox Moving 解题报告"}],["$","meta","4",{"name":"application-name","content":"guanghechen"}],["$","link","5",{"rel":"author","href":"https://github.com/guanghechen"}],["$","meta","6",{"name":"author","content":"光和尘"}],["$","link","7",{"rel":"icon","href":"/favicon.png"}],["$","meta","8",{"name":"next-size-adjust"}]]
1:null
