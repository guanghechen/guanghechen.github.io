3:I[5613,[],""]
5:I[31778,[],""]
7:I[79286,["74","static/chunks/74-7e282a0396d7f2a7.js","32","static/chunks/32-143da17bc4ec1cff.js","800","static/chunks/800-912054c186d8d8b2.js","185","static/chunks/app/layout-a504c198bdaef95d.js"],"SiteProvider"]
8:I[54110,["74","static/chunks/74-7e282a0396d7f2a7.js","32","static/chunks/32-143da17bc4ec1cff.js","800","static/chunks/800-912054c186d8d8b2.js","185","static/chunks/app/layout-a504c198bdaef95d.js"],""]
9:I[74117,["74","static/chunks/74-7e282a0396d7f2a7.js","32","static/chunks/32-143da17bc4ec1cff.js","800","static/chunks/800-912054c186d8d8b2.js","185","static/chunks/app/layout-a504c198bdaef95d.js"],"MaterialThemeProvider"]
a:I[55153,["74","static/chunks/74-7e282a0396d7f2a7.js","800","static/chunks/800-912054c186d8d8b2.js","160","static/chunks/app/not-found-6312c913f6df2e0d.js"],"NotFoundView"]
4:["slug","acm/oj/ccf/2015/09/E","c"]
0:["3Q2KX2Rv2j3rmtnDDMcDO",[[["",{"children":["(post)",{"children":["post",{"children":[["slug","acm/oj/ccf/2015/09/E","c"],{"children":["__PAGE__?{\"slug\":[\"acm\",\"oj\",\"ccf\",\"2015\",\"09\",\"E\"]}",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["(post)",{"children":["post",{"children":[["slug","acm/oj/ccf/2015/09/E","c"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(post)","children","post","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(post)","children","post","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,"$L6",null]]},[null,["$","html",null,{"lang":"en","className":"__className_324942","children":[["$","head",null,{"children":[["$","meta",null,{"charSet":"utf8"}],["$","meta","viewport",{"name":"viewport","content":"initial-scale=1.0, width=device-width"}],["$","meta",null,{"name":"application-name","content":"guanghechen"}],["$","meta",null,{"name":"apple-mobile-web-app-title","content":"光和尘"}],["$","meta",null,{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta",null,{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta",null,{"name":"description","content":"Guanghechen's personal site"}],["$","meta",null,{"name":"format-detection","content":"telephone=no"}],["$","meta",null,{"name":"mobile-web-app-capable","content":"yes"}],["$","meta",null,{"name":"msapplication-config","content":"/icons/browserconfig.xml"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#2B5797"}],["$","meta",null,{"name":"msapplication-tap-highlight","content":"no"}],["$","meta",null,{"name":"theme-color","content":"#a2466c"}],["$","meta",null,{"property":"og:type","content":"website"}],["$","meta",null,{"property":"og:title","content":"光和尘"}],["$","meta",null,{"property":"og:description","content":"光和尘的个人站点"}],["$","meta",null,{"property":"og:site_name","content":"guanghechen"}],["$","meta",null,{"property":"og:url","content":"https://preview.me.guanghechen.com"}],["$","link",null,{"rel":"manifest","href":"/manifest.json"}],["$","link",null,{"rel":"shortcut icon","href":"/favicon.png"}]]}],["$","body",null,{"children":["$","$L7",null,{"children":["$","$L8",null,{"children":["$","$L9",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","$La",null,{}],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/2159a4b672631e08.css","precedence":"next","crossOrigin":""}]]}]}]}]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f2ccec9f31141b1c.css","precedence":"next","crossOrigin":""}]],"$Lb"]]]]
c:I[56057,["74","static/chunks/74-7e282a0396d7f2a7.js","32","static/chunks/32-143da17bc4ec1cff.js","438","static/chunks/438-0d453acf8ab6d73f.js","810","static/chunks/810-f40f89b0985f349e.js","659","static/chunks/659-9371700cffe803b3.js","646","static/chunks/646-7cf2544bb825810c.js","800","static/chunks/800-912054c186d8d8b2.js","448","static/chunks/448-b8230364e725d567.js","422","static/chunks/app/(post)/layout-094b6638f80e2940.js"],"YozoraThemeProvider"]
d:I[20593,["74","static/chunks/74-7e282a0396d7f2a7.js","32","static/chunks/32-143da17bc4ec1cff.js","438","static/chunks/438-0d453acf8ab6d73f.js","810","static/chunks/810-f40f89b0985f349e.js","659","static/chunks/659-9371700cffe803b3.js","646","static/chunks/646-7cf2544bb825810c.js","800","static/chunks/800-912054c186d8d8b2.js","448","static/chunks/448-b8230364e725d567.js","422","static/chunks/app/(post)/layout-094b6638f80e2940.js"],"PostLayoutView"]
e:I[59627,["74","static/chunks/74-7e282a0396d7f2a7.js","32","static/chunks/32-143da17bc4ec1cff.js","438","static/chunks/438-0d453acf8ab6d73f.js","810","static/chunks/810-f40f89b0985f349e.js","659","static/chunks/659-9371700cffe803b3.js","646","static/chunks/646-7cf2544bb825810c.js","595","static/chunks/595-b703eb015ecb0ded.js","551","static/chunks/551-fe68223b52683631.js","800","static/chunks/800-912054c186d8d8b2.js","448","static/chunks/448-b8230364e725d567.js","918","static/chunks/app/(post)/post/%5B...slug%5D/page-b8779ac8ae859451.js"],"PostDetailPageView"]
6:["$","$Lc",null,{"children":["$","$Ld",null,{"data":{"postItems":[{"title":"Javascript 踩坑记——继承和原型链","slug":"/post/web/javascript/inherit","tags":["studynote","javascript","ecmascript"],"createdAt":"Sep 05, 2021"},{"title":"防抖和节流","slug":"/post/algorithm/debounce-and-throttle","tags":["coding","debounce","throttle"],"createdAt":"Sep 03, 2021"},{"title":"XSS 与 CSRF 的攻防","slug":"/post/web/security/xss-csrf","tags":["web","web security","csrf"],"createdAt":"Aug 19, 2021"},{"title":"自然对数底数 e","slug":"/post/math/calculus/自然对数底数e","tags":["math","函数","极限","自然对数"],"createdAt":"Aug 07, 2021"},{"title":"当你想来一把数独","slug":"/post/game/sudoku","tags":["game","sudoku"],"createdAt":"Aug 01, 2021"},{"title":"精确覆盖问题和 DLX 算法","slug":"/post/algorithm/dlx","tags":["算法","精确覆盖","DLX 算法"],"createdAt":"Jul 24, 2021"},{"title":"洗牌问题和 knuth-shuffle 算法","slug":"/post/algorithm/shuffle","tags":["shuffle","knuth-shuffle","约瑟夫环"],"createdAt":"Jul 22, 2021"},{"title":"统计区间内的线段","slug":"/post/quiz/scanning-line/segments","tags":["quiz","扫描线","前缀和","树状数组","线段树"],"createdAt":"Jul 21, 2021"},{"title":"约瑟夫环问题","slug":"/post/quiz/classical/Josephus-ring","tags":["quiz","经典问题","约瑟夫环"],"createdAt":"Jul 16, 2021"},{"title":"剑指offer 解题报告","slug":"/post/acm/oj/nowcoder/jz-offer","tags":["专题训练","解题报告"],"createdAt":"Jul 15, 2021"},{"title":"不修改数组找出重复的数字","slug":"/post/quiz/partition/find-duplicate-number","tags":["quiz","分治","追击"],"createdAt":"Jun 29, 2021"},{"title":"背包九讲","slug":"/post/algorithm/knapsack","tags":["acm","算法","动态规划","背包问题"],"createdAt":"Jun 27, 2021"},{"title":"React Reconciliation","slug":"/post/web/react/reconciliation","tags":["react","react reconciliation"],"createdAt":"Jun 26, 2021"},{"title":"扔鸡蛋问题","slug":"/post/quiz/dp/egg-drop","tags":["quiz","动态规划"],"createdAt":"Jun 20, 2021"},{"title":"端口管理","slug":"/post/network/端口管理","tags":["network","port","ssh","netstat"],"createdAt":"Jun 20, 2021"},{"title":"最长公共子序列（LCS）","slug":"/post/algorithm/lcs","tags":["最长公共子序列","LCS"],"createdAt":"Jun 02, 2021"},{"title":"最长上升子序列（LIS）","slug":"/post/algorithm/lis","tags":["最长上升子序列","LIS"],"createdAt":"Jun 02, 2021"},{"title":"Dijkstra 算法","slug":"/post/algorithm/graph/shortest-path/dijkstra","tags":["算法","最短路","单源最短路","dijkstra"],"createdAt":"May 29, 2021"},{"title":"函数的极限","slug":"/post/math/calculus/函数的极限","tags":["math","函数","极限"],"createdAt":"May 09, 2021"},{"title":"ECMA 2020 新特性","slug":"/post/web/javascript/2020","tags":["javascript","ecmascript"],"createdAt":"Apr 05, 2021"},{"title":"ECMA 2021 新特性","slug":"/post/web/javascript/2021","tags":["javascript","ecmascript"],"createdAt":"Apr 05, 2021"},{"title":"在 excel 中启用正则表达式","slug":"/post/tool/excel/regex","tags":["excel","tools"],"createdAt":"Mar 29, 2021"},{"title":"CSS 选择器","slug":"/post/web/css/selector","tags":["web","frontend","css"],"createdAt":"Nov 02, 2020"},{"title":"Custom React Hooks","slug":"/post/web/react/hooks/custom","tags":["react","react hooks"],"createdAt":"Oct 29, 2020"},{"title":"组合游戏基础之 SG 函数和 SG 定理","slug":"/post/math/combinatorial/SG","tags":["组合数学","组合游戏","SG 定理"],"createdAt":"Sep 04, 2016"},{"title":"网络流 24 题","slug":"/post/algorithm/graph/network-flow/24-problems","tags":["acm","算法","图论","网络流","二分图","解题报告","专题训练"],"createdAt":"Jul 30, 2016"},{"title":"网络流基础之最大权闭合图","slug":"/post/algorithm/graph/network-flow/最大权闭合图","tags":["算法","图论","网络流","最大权闭合图"],"createdAt":"Jul 24, 2016"},{"title":"2016 多校第 2 场","slug":"/post/acm/contest/multi-university-training/2016/2","tags":["acm","训练赛","数据结构","解题报告"],"createdAt":"Jul 22, 2016"},{"title":"二分图","slug":"/post/algorithm/graph/bipartite-graph","tags":["算法","图论","二分图","学习笔记"],"createdAt":"Jul 17, 2016"},{"title":"伸展树专题","slug":"/post/data-structure/bbst/splay","tags":["acm","Splay","解题报告","专题训练"],"createdAt":"Jul 03, 2016"},{"title":"CCF 2015-09 最佳文章 解题报告","slug":"/post/acm/oj/ccf/2015/09/E","tags":["acm","Aho-Corasick 自动机","矩阵快速幂","动态规划","解题报告"],"createdAt":"Jun 26, 2016"},{"title":"编译原理-语法制导翻译实现计算器","slug":"/post/fundamentals-of-compiling/exercise","tags":["编译原理","语法制导翻译","计算机"],"createdAt":"Jun 23, 2016"},{"title":"编译原理-语法分析","slug":"/post/fundamentals-of-compiling/grammar","tags":["编译原理","语法分析","计算机"],"createdAt":"Jun 18, 2016"},{"title":"百度之星 2016 解题报告","slug":"/post/acm/contest/baiduzhixing/2016","tags":["acm","递推","状态压缩","动态规划","字典树","解题报告"],"createdAt":"Jun 03, 2016"},{"title":"数论基础之原根","slug":"/post/math/number-theory/原根","tags":["math","数论","原根"],"createdAt":"May 16, 2016"},{"title":"数论基础之欧拉函数","slug":"/post/math/number-theory/欧拉函数","tags":["math","数论","既约剩余系","欧拉函数"],"createdAt":"May 10, 2016"},{"title":"数论基础之筛法","slug":"/post/math/number-theory/sieve","tags":["math","数论","素数","欧拉函数","线性筛"],"createdAt":"May 06, 2016"},{"title":"数论基础之模方程初步","slug":"/post/math/number-theory/模方程/basic","tags":["math","数论","扩展欧几里得算法","中国剩余定理","Baby Step Gaint Step"],"createdAt":"May 04, 2016"},{"title":"HDU-5576 Expection of String 解题报告（原 2015-上海区域赛-E)","slug":"/post/acm/oj/hdu/5576","tags":["acm","动态规划","解题报告"],"createdAt":"Apr 24, 2016"},{"title":"树链剖分","slug":"/post/algorithm/tree/tcs","tags":["acm","算法","树链剖分"],"createdAt":"Apr 23, 2016"},{"title":"51nod-1462 数据结构 -- 解题报告","slug":"/post/acm/oj/51nod/1462","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"createdAt":"Apr 23, 2016"},{"title":"小球放盒模型","slug":"/post/math/combinatorial/小球放盒模型","tags":["math","组合数学"],"createdAt":"Apr 22, 2016"},{"title":"最长回文子串 Manacher 算法","slug":"/post/algorithm/string/manacher","tags":["算法","字符串","回文串","manacher"],"createdAt":"Apr 18, 2016"},{"title":"POJ-1324 Holedox Moving 解题报告","slug":"/post/acm/oj/poj/1324","tags":["acm","bfs","图论","状态压缩","解题报告"],"createdAt":"Apr 13, 2016"},{"title":"HDU-5574 Colorful Tree 解题报告（原 2015-上海区域赛-C）","slug":"/post/acm/oj/hdu/5574","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"createdAt":"Apr 12, 2016"},{"title":"快速傅里叶变换和雷德算法","slug":"/post/math/number-theory/fft","tags":["acm","大数乘法","fft","快速傅里叶变换"],"createdAt":"Apr 10, 2016"},{"title":"HDU-5306 Gorgeous Sequence 解题报告","slug":"/post/acm/oj/hdu/5306","tags":["acm","数据结构","线段树","解题报告"],"createdAt":"Apr 09, 2016"}]},"storageKey":"@kyokuya/react-layout-post/#page","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(post)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}]}]
f:["acm","Aho-Corasick 自动机","矩阵快速幂","动态规划","解题报告"]
10:Tbfc,#include <algorithm>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <queue>
using namespace std;

typedef long long LL;
const LL LNF = 0x3f3f3f3f3f3f3f3fLL;

struct Matrix {
  static const int MAXN = 100 + 10;

  LL M[MAXN][MAXN];

  void fill(LL val) {
    for (int i = 0; i < MAXN; ++i)
      for (int j = 0; j < MAXN; ++j) M[i][j] = val;
  }

  friend Matrix operator*(const Matrix& A, const Matrix& B) {
    Matrix C;
    C.fill(-LNF);
    for (int i = 0; i < MAXN; ++i)
      for (int j = 0; j < MAXN; ++j)
        for (int k = 0; k < MAXN; ++k)
          C.M[i][j] = max(C.M[i][j], A.M[i][k] + B.M[k][j]);
    return C;
  }


  static Matrix Power(Matrix A, LL X) {
    Matrix ans;
    ans.fill(-LNF);
    for (int i = 0; i < MAXN; ++i) ans.M[i][i] = 0;
    for (; X > 0; X >>= 1, A = A * A)
      if (X & 1) ans = ans * A;
    return ans;
  }

  void show(int N = MAXN) const {
    for (int i = 0; i < N; ++i) printf("%6d ", i);
    printf("\n-------------------------------------------------------------\n");
    for (int i = 0; i < N; ++i) {
      printf("%2d:|", i);
      for (int j = 0; j < N; ++j) printf("%6d|", M[i][j]);
      printf("\n");
    }
    printf("-------------------------------------------------------------\n");
  }
};

struct AhoCorasick {
  static const int SIGMA_SIZ = 26;
  static const int MAX_NODES = 100 + 10;
  int ch[MAX_NODES][SIGMA_SIZ];
  int val[MAX_NODES];
  int fail[MAX_NODES];
  int siz;

  void init() {
    siz = 1;
    memset(ch[0], 0, sizeof ch[0]);
  }

  int idx(const char c) const {
    return c - 'a';
  }

  void insert(const char* s) {
    int r = 0;
    for (; *s; ++s) {
      int c = idx(*s);
      if (!ch[r][c]) {
        memset(ch[siz], 0, sizeof ch[siz]);
        val[siz] = 0;
        ch[r][c] = siz++;
      }
      r = ch[r][c];
    }
    ++val[r];
  }

  void calcFail() {
    static queue<int> Q;
    for (int c = 0; c < SIGMA_SIZ; ++c) {
      int o = ch[0][c];
      if (o) fail[o] = 0, Q.push(o);
    }
    while (!Q.empty()) {
      int r = Q.front();
      Q.pop();
      for (int c = 0; c < SIGMA_SIZ; ++c) {
        int o = ch[r][c];
        if (o) {
          int fo = fail[r];
          for (; fo && !ch[fo][c]; fo = fail[fo])
            ;
          fail[o] = ch[fo][c];
          val[o] += val[fail[o]];
          Q.push(o);
        } else {
          ch[r][c] = ch[fail[r]][c];
        }
      }
    }
  }

  void buildMatrix(Matrix& mat) {
    mat.fill(-LNF);
    for (int r = 0; r < siz; ++r)
      for (int c = 0; c < SIGMA_SIZ; ++c) mat.M[ch[r][c]][r] = val[ch[r][c]];
  }
};

Matrix mat;
AhoCorasick ac;
int N;
LL M;
char s[200];

int main() {
  ac.init();
  scanf("%d%lld", &N, &M);
  for (int i = 0; i < N; ++i) {
    scanf("%s", s);
    ac.insert(s);
  }
  ac.calcFail();
  ac.buildMatrix(mat);
  //    for(int i=0; i < ac.siz; ++i) printf("%d, fail[%d]=%d\n", i, i,
  //    ac.fail[i]); mat.show(ac.siz);
  mat = Matrix::Power(mat, M);
  LL ans = 0;
  for (int i = 0; i < Matrix::MAXN; ++i) ans = max(ans, mat.M[i][0]);
  printf("%lld\n", ans);
  return 0;
}
2:["$","$Le",null,{"data":{"title":"CCF 2015-09 最佳文章 解题报告","titleAst":{"type":"paragraph","children":[{"type":"text","value":"CCF 2015-09 最佳文章 解题报告"}]},"slug":"/post/acm/oj/ccf/2015/09/E","createdAt":"Jun 26, 2016","updatedAt":"Nov 03, 2021","timeToRead":"04min 10s","tags":"$f","categories":[],"ast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"问题简述"}],"identifier":"heading-问题简述"},{"type":"paragraph","children":[{"type":"text","value":"有 "},{"type":"inlineMath","value":"N"},{"type":"text","value":" 个由小写字母构成的单词。一个串的权值为这个串中每个单词出现的次数的总和（单词可部分重叠）。求一个长度为 "},{"type":"inlineMath","value":"L"},{"type":"text","value":" 串的最大权值。"}]},{"type":"paragraph","children":[{"type":"text","value":"数据范围："},{"type":"inlineMath","value":"N"},{"type":"text","value":" 个单词长度总和不超过 100，"},{"type":"inlineMath","value":"1\\leqslant L\\leqslant 10^{15}"},{"type":"text","value":"."}]},{"type":"paragraph","children":[{"type":"text","value":"样例输入："}]},{"type":"code","lang":null,"meta":null,"value":"3 15\nagva\nagvagva\ngvagva\n"},{"type":"paragraph","children":[{"type":"text","value":"样例输出："}]},{"type":"code","lang":null,"meta":null,"value":"11\n"},{"type":"heading","depth":2,"children":[{"type":"text","value":"问题简析"}],"identifier":"heading-问题简析"},{"type":"paragraph","children":[{"type":"text","value":"先将 "},{"type":"inlineMath","value":"N"},{"type":"text","value":" 个串建成 Aho-Corasick 自动机，并记 "},{"type":"inlineMath","value":"S"},{"type":"text","value":" 为此自动机的状态转移图的节点集。用 "},{"type":"inlineMath","value":"dp(i, s)"},{"type":"text","value":" 表示长度为 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 且最后一个字符在 Aho-Corasick 自动机的节点 "},{"type":"inlineMath","value":"s"},{"type":"text","value":" 上的串的最大权值。显然，答案为 "},{"type":"inlineMath","value":"\\max\\big\\lbrace dp(L,s) ~\\big|~ s\\in S \\big\\rbrace"},{"type":"text","value":"."}]},{"type":"paragraph","children":[{"type":"text","value":"状态转移方程："}]},{"type":"math","value":"dp(i+1, s') = \\max\\big\\lbrace dp(i, s) ~\\big|~ s\\in S \\text{且存在从 $s$ 到 $s'$ 的边}\\big\\rbrace +v_{s'}.\n"},{"type":"paragraph","children":[{"type":"text","value":"其中，"},{"type":"inlineMath","value":"v_{s'}"},{"type":"text","value":" 为以该节点结尾的单词的个数（这是经典的 AC 自动机基础操作，此处略去细节）。"}]},{"type":"paragraph","children":[{"type":"text","value":"样例的状态图如下"}]},{"type":"paragraph","children":[{"type":"imageReference","identifier":"aho-corasick1.png","label":"Aho-Corasick1.png","referenceType":"collapsed","alt":"Aho-Corasick1.png"}]},{"type":"paragraph","children":[{"type":"text","value":"其中，虚线为 fail 指针。上图中，"},{"type":"inlineMath","value":"v_{4}=1, v_{7}=3, v_{13}=2"},{"type":"text","value":"，其它节点 "},{"type":"inlineMath","value":"v"},{"type":"text","value":" 值为 "},{"type":"inlineMath","value":"0"},{"type":"text","value":".\n不难发现，仅考虑有实线的边的转移是最优的；当没有实线的边时，选择虚线的边转移。"}]},{"type":"paragraph","children":[{"type":"text","value":"接下来就是重头戏了。我们可以构造一个 "},{"type":"inlineMath","value":"\\big|S\\big| \\times \\big|S\\big| =14 \\times 14"},{"type":"text","value":"\n"},{"type":"footnoteReference","label":"1","identifier":"footnote-1"},{"type":"text","value":" 的矩阵 "},{"type":"inlineMath","value":"M"},{"type":"text","value":":"}]},{"type":"math","value":"\\begin{align}\n  M(s', s) = \\left\\lbrace \\begin{aligned}\n  &v_{s'}, &\\text{存在一条边} s \\rightarrow s' \\\\\n  &-INF, &\\text{不存在一条边} s \\rightarrow s'   \n  \\end{aligned} \\right.\n\\end{align}\n"},{"type":"paragraph","children":[{"type":"text","value":"结合前面的状态转移方程有："},{"type":"inlineMath","value":"dp(i+1, s) = \\max\\big\\lbrace dp(i, s') + M(s', s) \\;\\big|\\; s' \\in S \\big\\rbrace"},{"type":"text","value":"."}]},{"type":"paragraph","children":[{"type":"text","value":"如果将 "},{"type":"inlineMath","value":"dp(i)"},{"type":"text","value":" 当做一个列向量，那么 "},{"type":"inlineMath","value":"dp(i+1)"},{"type":"text","value":" 可以看做由 "},{"type":"inlineMath","value":"M"},{"type":"text","value":" 和 "},{"type":"inlineMath","value":"dp(i)"},{"type":"text","value":" 进行如转移方程所示的运算规则得到。对比传统的矩阵乘法，相当于："},{"type":"inlineMath","value":"\\sum"},{"type":"text","value":" 变成了 "},{"type":"inlineMath","value":"\\max"},{"type":"text","value":"，同时 "},{"type":"inlineMath","value":"\\times"},{"type":"text","value":" 变成了 "},{"type":"inlineMath","value":"+"},{"type":"text","value":". 不难验证，新的矩阵运算同样是左结合的。不妨记上述状态转移方程的运算符为 "},{"type":"inlineMath","value":"\\otimes"},{"type":"text","value":"，不妨记 "},{"type":"inlineMath","value":"N = \\big| S \\big| - 1"},{"type":"text","value":"，构造如下矩阵运算："}]},{"type":"math","value":"\\begin{align}\n  &\n     \\left(\\begin{matrix}\n      dp_{i+1,0} & dp_{i+1,0} & \\cdots & dp_{i+1,0} \\\\\n      dp_{i+1,1} & dp_{i+1,1} & \\cdots & dp_{i+1,1} \\\\\n      \\vdots     & \\vdots     & \\ddots & \\vdots  \\\\\n      dp_{i+1,N} & dp_{i+1,N} & \\cdots & dp_{i+1,N}\n    \\end{matrix}\\right)\\\\\\\\\n  =&\n    \\left(\\begin{matrix}\n      M_{0,0} & M_{0,1} & \\cdots & M_{0,N} \\\\\n      M_{1,0} & M_{1,1} & \\cdots & M_{1,N} \\\\\n      \\vdots  & \\vdots  & \\ddots & \\vdots  \\\\\n      M_{N,0} & M_{N,1} & \\cdots & M_{N,N}\n    \\end{matrix}\\right)\n    \\otimes\n     \\left(\\begin{matrix}\n      dp_{i,0} & dp_{i,0} & \\cdots & dp_{i,0} \\\\\n      dp_{i,1} & dp_{i,1} & \\cdots & dp_{i,1} \\\\\n      \\vdots   & \\vdots   & \\ddots & \\vdots  \\\\\n      dp_{i,N} & dp_{i,N} & \\cdots & dp_{i,N}\n    \\end{matrix}\\right)\n\\end{align} \n"},{"type":"paragraph","children":[{"type":"text","value":"不难发现："}]},{"type":"math","value":"\\begin{align}\n  &dp_{i+1,s} = \n    \\left(\\begin{matrix}\n      M_{s,0} & M_{s,1} & \\cdots & M_{s,N} \\\\\n    \\end{matrix}\\right)\n    \\otimes\n    \\left(\\begin{matrix}\n      dp_{i,0} \\\\\n      dp_{i,1} \\\\\n      \\vdots  \\\\\n      dp_{i,N} \n    \\end{matrix}\\right)\n\\end{align} \n"},{"type":"paragraph","children":[{"type":"text","value":"这和转移方程是对应的，这意味着："},{"type":"inlineMath","value":"dp(L)=M \\otimes dp(L-1) = M^{L} \\times dp(0)"},{"type":"text","value":".\n接下来，矩阵“快速幂”就好了。"}]},{"type":"paragraph","children":[{"type":"text","value":"等等，"},{"type":"inlineMath","value":"dp(0)"},{"type":"text","value":" 是什么？因为 "},{"type":"inlineMath","value":"dp(0)"},{"type":"text","value":" 表示零个字符，只能在状态 "},{"type":"inlineMath","value":"0"},{"type":"text","value":"，其它状态必须设为 "},{"type":"inlineMath","value":"-\\infty"},{"type":"text","value":"，即："}]},{"type":"math","value":"  \\begin{align}\n    dp(0, i) = \\left\\lbrace \\begin{aligned}\n    &0, &i=0 \\\\\n    &-INF, &i \\neq 0\n    \\end{aligned} \\right.\n  \\end{align}\n"},{"type":"paragraph","children":[{"type":"text","value":"可以通过 "},{"type":"inlineMath","value":"dp(1)=M \\otimes dp_(0)"},{"type":"text","value":" 来验证。"}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"程序实现"}],"identifier":"heading-程序实现"},{"type":"code","lang":"cpp","meta":"title=\"solution.cpp\" sourcefile=\"./solution.cpp\" maxlines=20 linenos","value":"$10"},{"type":"heading","depth":2,"children":[{"type":"text","value":"Related"}],"identifier":"heading-related"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"link","url":"http://115.28.138.223/view.page?gpid=T28","children":[{"type":"text","value":"题目链接"}]}]}]}]},"toc":{"children":[{"depth":2,"identifier":"heading-问题简述","contents":[{"type":"text","value":"问题简述"}],"children":[]},{"depth":2,"identifier":"heading-问题简析","contents":[{"type":"text","value":"问题简析"}],"children":[]},{"depth":2,"identifier":"heading-程序实现","contents":[{"type":"text","value":"程序实现"}],"children":[]},{"depth":2,"identifier":"heading-related","contents":[{"type":"text","value":"Related"}],"children":[]}]},"ecmaImports":[],"definitionMap":{"aho-corasick1.png":{"type":"definition","identifier":"aho-corasick1.png","label":"Aho-Corasick1.png","url":"/asset/post/img/bb2aeff0-45f3-5087-8a85-aafd52210c85.png?width=988&height=234"}},"footnoteDefinitionMap":{"footnote-1":{"type":"footnoteDefinition","identifier":"footnote-1","label":"1","children":[{"type":"paragraph","children":[{"type":"text","value":"上图的自动机中一共只有 "},{"type":"inlineMath","value":"14"},{"type":"text","value":" 个节点"}]}]}},"images":[{"alt":"Aho-Corasick1.png","src":"/asset/post/img/bb2aeff0-45f3-5087-8a85-aafd52210c85.png?width=988&height=234"}],"paginationUrl":"/posts/5","prev":{"title":"编译原理-语法制导翻译实现计算器","slug":"/post/fundamentals-of-compiling/exercise"},"next":{"title":"伸展树专题","slug":"/post/data-structure/bbst/splay"},"aplayerOptions":null}}]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"CCF 2015-09 最佳文章 解题报告 | guanghechen"}],["$","meta","3",{"name":"description","content":"CCF 2015-09 最佳文章 解题报告"}],["$","meta","4",{"name":"application-name","content":"guanghechen"}],["$","link","5",{"rel":"author","href":"https://github.com/guanghechen"}],["$","meta","6",{"name":"author","content":"光和尘"}],["$","link","7",{"rel":"icon","href":"/favicon.png"}],["$","meta","8",{"name":"next-size-adjust"}]]
1:null
