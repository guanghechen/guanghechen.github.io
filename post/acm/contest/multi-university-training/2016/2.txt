3:I[5613,[],""]
5:I[31778,[],""]
7:I[79286,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","800","static/chunks/800-4848173b49d8d689.js","185","static/chunks/app/layout-b711fdca504bb2b1.js"],"SiteProvider"]
8:I[54110,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","800","static/chunks/800-4848173b49d8d689.js","185","static/chunks/app/layout-b711fdca504bb2b1.js"],""]
9:I[74117,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","800","static/chunks/800-4848173b49d8d689.js","185","static/chunks/app/layout-b711fdca504bb2b1.js"],"MaterialThemeProvider"]
a:I[55153,["74","static/chunks/74-31f764c22632bceb.js","800","static/chunks/800-4848173b49d8d689.js","160","static/chunks/app/not-found-79f3557760569a3b.js"],"NotFoundView"]
4:["slug","acm/contest/multi-university-training/2016/2","c"]
0:["9fGftGlHDOVXOVnlBCAfv",[[["",{"children":["(post)",{"children":["post",{"children":[["slug","acm/contest/multi-university-training/2016/2","c"],{"children":["__PAGE__?{\"slug\":[\"acm\",\"contest\",\"multi-university-training\",\"2016\",\"2\"]}",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["(post)",{"children":["post",{"children":[["slug","acm/contest/multi-university-training/2016/2","c"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(post)","children","post","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(post)","children","post","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,"$L6",null]]},[null,["$","html",null,{"lang":"en","className":"__className_324942","children":[["$","head",null,{"children":[["$","meta",null,{"charSet":"utf8"}],["$","meta","viewport",{"name":"viewport","content":"initial-scale=1.0, width=device-width"}],["$","meta",null,{"name":"application-name","content":"guanghechen"}],["$","meta",null,{"name":"apple-mobile-web-app-title","content":"光和尘"}],["$","meta",null,{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta",null,{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta",null,{"name":"description","content":"Guanghechen's personal site"}],["$","meta",null,{"name":"format-detection","content":"telephone=no"}],["$","meta",null,{"name":"mobile-web-app-capable","content":"yes"}],["$","meta",null,{"name":"msapplication-config","content":"/icons/browserconfig.xml"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#2B5797"}],["$","meta",null,{"name":"msapplication-tap-highlight","content":"no"}],["$","meta",null,{"name":"theme-color","content":"#a2466c"}],["$","meta",null,{"property":"og:type","content":"website"}],["$","meta",null,{"property":"og:title","content":"光和尘"}],["$","meta",null,{"property":"og:description","content":"光和尘的个人站点"}],["$","meta",null,{"property":"og:site_name","content":"guanghechen"}],["$","meta",null,{"property":"og:url","content":"https://me.guanghechen.com"}],["$","link",null,{"rel":"manifest","href":"/manifest.json"}],["$","link",null,{"rel":"shortcut icon","href":"/favicon.png"}]]}],["$","body",null,{"children":["$","$L7",null,{"children":["$","$L8",null,{"children":["$","$L9",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","$La",null,{}],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/2159a4b672631e08.css","precedence":"next","crossOrigin":""}]]}]}]}]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f2ccec9f31141b1c.css","precedence":"next","crossOrigin":""}]],"$Lb"]]]]
c:I[56057,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","4","static/chunks/4-1f47c029a7fba46f.js","810","static/chunks/810-8ebda3a4770496e8.js","659","static/chunks/659-7f246e0fb997ad2e.js","714","static/chunks/714-13c64a7806ea4ae0.js","800","static/chunks/800-4848173b49d8d689.js","448","static/chunks/448-62c186fb5283557d.js","422","static/chunks/app/(post)/layout-dfa2e09a2a72ad66.js"],"YozoraThemeProvider"]
d:I[20593,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","4","static/chunks/4-1f47c029a7fba46f.js","810","static/chunks/810-8ebda3a4770496e8.js","659","static/chunks/659-7f246e0fb997ad2e.js","714","static/chunks/714-13c64a7806ea4ae0.js","800","static/chunks/800-4848173b49d8d689.js","448","static/chunks/448-62c186fb5283557d.js","422","static/chunks/app/(post)/layout-dfa2e09a2a72ad66.js"],"PostLayoutView"]
e:I[59627,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","4","static/chunks/4-1f47c029a7fba46f.js","810","static/chunks/810-8ebda3a4770496e8.js","659","static/chunks/659-7f246e0fb997ad2e.js","714","static/chunks/714-13c64a7806ea4ae0.js","595","static/chunks/595-60215c9a9c19277d.js","551","static/chunks/551-68df0022cc950ef8.js","800","static/chunks/800-4848173b49d8d689.js","448","static/chunks/448-62c186fb5283557d.js","918","static/chunks/app/(post)/post/%5B...slug%5D/page-80cd6d5787edd594.js"],"PostDetailPageView"]
6:["$","$Lc",null,{"children":["$","$Ld",null,{"data":{"postItems":[{"title":"Javascript 踩坑记——继承和原型链","slug":"/post/web/javascript/inherit","tags":["studynote","javascript","ecmascript"],"createdAt":"Sep 05, 2021"},{"title":"防抖和节流","slug":"/post/algorithm/debounce-and-throttle","tags":["coding","debounce","throttle"],"createdAt":"Sep 03, 2021"},{"title":"XSS 与 CSRF 的攻防","slug":"/post/web/security/xss-csrf","tags":["web","web security","csrf"],"createdAt":"Aug 19, 2021"},{"title":"自然对数底数 e","slug":"/post/math/calculus/自然对数底数e","tags":["math","函数","极限","自然对数"],"createdAt":"Aug 07, 2021"},{"title":"当你想来一把数独","slug":"/post/game/sudoku","tags":["game","sudoku"],"createdAt":"Aug 01, 2021"},{"title":"精确覆盖问题和 DLX 算法","slug":"/post/algorithm/dlx","tags":["算法","精确覆盖","DLX 算法"],"createdAt":"Jul 24, 2021"},{"title":"洗牌问题和 knuth-shuffle 算法","slug":"/post/algorithm/shuffle","tags":["shuffle","knuth-shuffle","约瑟夫环"],"createdAt":"Jul 22, 2021"},{"title":"统计区间内的线段","slug":"/post/quiz/scanning-line/segments","tags":["quiz","扫描线","前缀和","树状数组","线段树"],"createdAt":"Jul 21, 2021"},{"title":"约瑟夫环问题","slug":"/post/quiz/classical/Josephus-ring","tags":["quiz","经典问题","约瑟夫环"],"createdAt":"Jul 16, 2021"},{"title":"剑指offer 解题报告","slug":"/post/acm/oj/nowcoder/jz-offer","tags":["专题训练","解题报告"],"createdAt":"Jul 15, 2021"},{"title":"不修改数组找出重复的数字","slug":"/post/quiz/partition/find-duplicate-number","tags":["quiz","分治","追击"],"createdAt":"Jun 29, 2021"},{"title":"背包九讲","slug":"/post/algorithm/knapsack","tags":["acm","算法","动态规划","背包问题"],"createdAt":"Jun 27, 2021"},{"title":"React Reconciliation","slug":"/post/web/react/reconciliation","tags":["react","react reconciliation"],"createdAt":"Jun 26, 2021"},{"title":"扔鸡蛋问题","slug":"/post/quiz/dp/egg-drop","tags":["quiz","动态规划"],"createdAt":"Jun 20, 2021"},{"title":"端口管理","slug":"/post/network/端口管理","tags":["network","port","ssh","netstat"],"createdAt":"Jun 20, 2021"},{"title":"最长公共子序列（LCS）","slug":"/post/algorithm/lcs","tags":["最长公共子序列","LCS"],"createdAt":"Jun 02, 2021"},{"title":"最长上升子序列（LIS）","slug":"/post/algorithm/lis","tags":["最长上升子序列","LIS"],"createdAt":"Jun 02, 2021"},{"title":"Dijkstra 算法","slug":"/post/algorithm/graph/shortest-path/dijkstra","tags":["算法","最短路","单源最短路","dijkstra"],"createdAt":"May 29, 2021"},{"title":"函数的极限","slug":"/post/math/calculus/函数的极限","tags":["math","函数","极限"],"createdAt":"May 09, 2021"},{"title":"ECMA 2020 新特性","slug":"/post/web/javascript/2020","tags":["javascript","ecmascript"],"createdAt":"Apr 05, 2021"},{"title":"ECMA 2021 新特性","slug":"/post/web/javascript/2021","tags":["javascript","ecmascript"],"createdAt":"Apr 05, 2021"},{"title":"在 excel 中启用正则表达式","slug":"/post/tool/excel/regex","tags":["excel","tools"],"createdAt":"Mar 29, 2021"},{"title":"CSS 选择器","slug":"/post/web/css/selector","tags":["web","frontend","css"],"createdAt":"Nov 02, 2020"},{"title":"Custom React Hooks","slug":"/post/web/react/hooks/custom","tags":["react","react hooks"],"createdAt":"Oct 29, 2020"},{"title":"组合游戏基础之 SG 函数和 SG 定理","slug":"/post/math/combinatorial/SG","tags":["组合数学","组合游戏","SG 定理"],"createdAt":"Sep 04, 2016"},{"title":"网络流 24 题","slug":"/post/algorithm/graph/network-flow/24-problems","tags":["acm","算法","图论","网络流","二分图","解题报告","专题训练"],"createdAt":"Jul 30, 2016"},{"title":"网络流基础之最大权闭合图","slug":"/post/algorithm/graph/network-flow/最大权闭合图","tags":["算法","图论","网络流","最大权闭合图"],"createdAt":"Jul 24, 2016"},{"title":"2016 多校第 2 场","slug":"/post/acm/contest/multi-university-training/2016/2","tags":["acm","训练赛","数据结构","解题报告"],"createdAt":"Jul 22, 2016"},{"title":"二分图","slug":"/post/algorithm/graph/bipartite-graph","tags":["算法","图论","二分图","学习笔记"],"createdAt":"Jul 17, 2016"},{"title":"伸展树专题","slug":"/post/data-structure/bbst/splay","tags":["acm","Splay","解题报告","专题训练"],"createdAt":"Jul 03, 2016"},{"title":"CCF 2015-09 最佳文章 解题报告","slug":"/post/acm/oj/ccf/2015/09/E","tags":["acm","Aho-Corasick 自动机","矩阵快速幂","动态规划","解题报告"],"createdAt":"Jun 26, 2016"},{"title":"编译原理-语法制导翻译实现计算器","slug":"/post/fundamentals-of-compiling/exercise","tags":["编译原理","语法制导翻译","计算机"],"createdAt":"Jun 23, 2016"},{"title":"编译原理-语法分析","slug":"/post/fundamentals-of-compiling/grammar","tags":["编译原理","语法分析","计算机"],"createdAt":"Jun 18, 2016"},{"title":"百度之星 2016 解题报告","slug":"/post/acm/contest/baiduzhixing/2016","tags":["acm","递推","状态压缩","动态规划","字典树","解题报告"],"createdAt":"Jun 03, 2016"},{"title":"数论基础之原根","slug":"/post/math/number-theory/原根","tags":["math","数论","原根"],"createdAt":"May 16, 2016"},{"title":"数论基础之欧拉函数","slug":"/post/math/number-theory/欧拉函数","tags":["math","数论","既约剩余系","欧拉函数"],"createdAt":"May 10, 2016"},{"title":"数论基础之筛法","slug":"/post/math/number-theory/sieve","tags":["math","数论","素数","欧拉函数","线性筛"],"createdAt":"May 06, 2016"},{"title":"数论基础之模方程初步","slug":"/post/math/number-theory/模方程/basic","tags":["math","数论","扩展欧几里得算法","中国剩余定理","Baby Step Gaint Step"],"createdAt":"May 04, 2016"},{"title":"HDU-5576 Expection of String 解题报告（原 2015-上海区域赛-E)","slug":"/post/acm/oj/hdu/5576","tags":["acm","动态规划","解题报告"],"createdAt":"Apr 24, 2016"},{"title":"树链剖分","slug":"/post/algorithm/tree/tcs","tags":["acm","算法","树链剖分"],"createdAt":"Apr 23, 2016"},{"title":"51nod-1462 数据结构 -- 解题报告","slug":"/post/acm/oj/51nod/1462","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"createdAt":"Apr 23, 2016"},{"title":"小球放盒模型","slug":"/post/math/combinatorial/小球放盒模型","tags":["math","组合数学"],"createdAt":"Apr 22, 2016"},{"title":"最长回文子串 Manacher 算法","slug":"/post/algorithm/string/manacher","tags":["算法","字符串","回文串","manacher"],"createdAt":"Apr 18, 2016"},{"title":"POJ-1324 Holedox Moving 解题报告","slug":"/post/acm/oj/poj/1324","tags":["acm","bfs","图论","状态压缩","解题报告"],"createdAt":"Apr 13, 2016"},{"title":"HDU-5574 Colorful Tree 解题报告（原 2015-上海区域赛-C）","slug":"/post/acm/oj/hdu/5574","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"createdAt":"Apr 12, 2016"},{"title":"快速傅里叶变换和雷德算法","slug":"/post/math/number-theory/fft","tags":["acm","大数乘法","fft","快速傅里叶变换"],"createdAt":"Apr 10, 2016"},{"title":"HDU-5306 Gorgeous Sequence 解题报告","slug":"/post/acm/oj/hdu/5306","tags":["acm","数据结构","线段树","解题报告"],"createdAt":"Apr 09, 2016"}]},"storageKey":"@kyokuya/react-layout-post/#page","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(post)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}]}]
f:["acm","训练赛","数据结构","解题报告"]
10:T1196,#include <algorithm>
#include <cstdio>
#include <cstring>
#include <iostream>

inline int read() {
  bool positive = true;
  char c = getchar();
  int s = 0;
  for (; c < '0' || c > '9'; c = getchar())
    if (c == '-') positive = false;
  for (; c >= '0' && c <= '9'; c = getchar()) s = s * 10 + c - '0';
  return positive ? s : -s;
}

namespace solve {
  const int MAXN = 100000 + 10;
  int A[MAXN], B[20][MAXN], L[20][MAXN], R[20][MAXN];
  int sumv[MAXN << 2], setv[MAXN << 2], posv[MAXN << 2];

  inline void build(int o, int lft, int rht, int cur = 0) {
    setv[o] = 0;
    if (lft == rht) {
      B[cur][lft] = read();
      sumv[o] = A[lft] >= B[cur][lft] ? 1 : 0;
    } else {
      int mid = lft + rht >> 1;
      build(o << 1, lft, mid, cur + 1);
      build(o << 1 | 1, mid + 1, rht, cur + 1);

      int tot = lft, i = lft, j = mid + 1;
      for (; i <= mid && j <= rht;)
        if (B[cur + 1][i] <= B[cur + 1][j])
          B[cur][tot++] = B[cur + 1][i++];
        else
          B[cur][tot++] = B[cur + 1][j++];
      for (; i <= mid;) B[cur][tot++] = B[cur + 1][i++];
      for (; j <= rht;) B[cur][tot++] = B[cur + 1][j++];
      sumv[o] = sumv[o << 1] + sumv[o << 1 | 1];

      // 计算区间 [lft,rht] 的每个节点在左右子节点中的 rank
      L[cur][lft] = lft;
      R[cur][lft] = mid + 1;
      for (int& l = L[cur][lft]; l <= mid && B[cur + 1][l] <= B[cur][lft]; ++l)
        ;
      for (int& r = R[cur][lft]; r <= rht && B[cur + 1][r] <= B[cur][lft]; ++r)
        ;
      --L[cur][lft];
      --R[cur][lft];
      for (int i = lft + 1; i <= rht; ++i) {
        L[cur][i] = L[cur][i - 1] + 1;
        R[cur][i] = R[cur][i - 1] + 1;
        for (int& l = L[cur][i]; l <= mid && B[cur + 1][l] <= B[cur][i]; ++l)
          ;
        for (int& r = R[cur][i]; r <= rht && B[cur + 1][r] <= B[cur][i]; ++r)
          ;
        --L[cur][i];
        --R[cur][i];
      }
    }
  }

  inline void pushdown(int o, int lft, int rht, int cur) {
    int lc = o << 1, rc = o << 1 | 1, mid = lft + rht >> 1;
    setv[lc] = setv[o];
    posv[lc] = posv[o] >= lft ? L[cur][posv[o]] : lft - 1;
    setv[rc] = setv[o];
    posv[rc] = posv[o] >= lft ? R[cur][posv[o]] : mid;
    sumv[lc] = posv[lc] - lft + 1;
    sumv[rc] = posv[rc] - mid;
    setv[o] = 0;
  }

  int ul, ur, uv;
  inline void update(int o, int lft, int rht, int pos, int cur = 0) {
    if (lft == rht) {
      sumv[o] = uv >= B[cur][lft] ? 1 : 0;
      return;
    }
    if (ul <= lft && rht <= ur) {
      int mid = lft + rht >> 1;
      setv[o] = uv;
      posv[o] = pos;
      sumv[o] = pos - lft + 1;
    } else {
      if (setv[o]) pushdown(o, lft, rht, cur);
      int mid = lft + rht >> 1;
      if (ul <= mid)
        update(o << 1, lft, mid, pos >= lft ? L[cur][pos] : lft - 1, cur + 1);
      if (mid < ur)
        update(o << 1 | 1, mid + 1, rht, pos >= lft ? R[cur][pos] : mid, cur + 1);
      sumv[o] = sumv[o << 1] + sumv[o << 1 | 1];
    }
  }

  int ql, qr;
  inline int query(int o, int lft, int rht, int cur = 0) {
    if (ql <= lft && rht <= qr) return sumv[o];
    if (setv[o]) pushdown(o, lft, rht, cur);
    int mid = lft + rht >> 1;
    int ans = 0;
    if (ql <= mid) ans += query(o << 1, lft, mid, cur + 1);
    if (mid < qr) ans += query(o << 1 | 1, mid + 1, rht, cur + 1);
    return ans;
  }
};   // namespace solve

typedef long long LL;
const int MOD = 1000000000 + 7;
const int C = ~(1 << 31);
const int M = (1 << 16) - 1;

int n, m, A, B, a, b, last;

inline int rnd(int last) {
  a = (36969 + (last >> 3)) * (a & M) + (a >> 16);
  b = (18000 + (last >> 3)) * (b & M) + (b >> 16);
  return (C & ((a << 16) + b)) % 1000000000;
}

int main() {
  int T_T = read();
  for (int kase = 1; kase <= T_T; ++kase) {
    scanf("%d%d%d%d", &n, &m, &A, &B);
    for (int i = 1; i <= n; ++i) solve::A[i] = read();
    solve::build(1, 1, n);

    LL ans = 0LL;
    a = A, b = B, last = 0;
    for (int i = 1; i <= m; ++i) {
      int l = rnd(last) % n + 1;
      int r = rnd(last) % n + 1;
      int x = rnd(last) + 1;
      if (l > r) std::swap(l, r);
      if ((l + r + x) & 1) {
        solve::ul = l;
        solve::ur = r;
        solve::uv = x;
        int pos = std::upper_bound(solve::B[0] + 1, solve::B[0] + n + 1, x) -
                  solve::B[0] - 1;
        solve::update(1, 1, n, pos);
      } else {
        solve::ql = l;
        solve::qr = r;
        last = solve::query(1, 1, n);
        ans = (ans + (LL)i * last) % MOD;
      }
    }
    printf("%d\n", ans);
  }

  return 0;
}
2:["$","$Le",null,{"data":{"title":"2016 多校第 2 场","titleAst":{"type":"paragraph","children":[{"type":"text","value":"2016 多校第 2 场"}]},"slug":"/post/acm/contest/multi-university-training/2016/2","createdAt":"Jul 22, 2016","updatedAt":"Nov 03, 2021","timeToRead":"02min 36s","tags":"$f","categories":[],"ast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"1004 Differencia"}],"identifier":"heading-1004-differencia"},{"type":"heading","depth":3,"children":[{"type":"text","value":"题目描述"}],"identifier":"heading-题目描述"},{"type":"paragraph","children":[{"type":"text","value":"有两个序列："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"inlineMath","value":"\\big\\lbrace a_1, a_2, \\cdots, a_n \\big\\rbrace"}]},{"type":"listItem","children":[{"type":"inlineMath","value":"\\big\\lbrace b_1, b_2, \\cdots, b_n \\big\\rbrace"}]}]},{"type":"paragraph","children":[{"type":"text","value":"有两种操作："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"inlineMath","value":"+ \\; l \\;r \\; x"},{"type":"text","value":": 将所有的 "},{"type":"inlineMath","value":"a_i(l \\leqslant i\\leqslant r)"},{"type":"text","value":" 置为 "},{"type":"inlineMath","value":"x"}]},{"type":"listItem","children":[{"type":"inlineMath","value":"? \\; l \\;r"},{"type":"text","value":": 询问 "},{"type":"inlineMath","value":"l\\leqslant i\\leqslant r"},{"type":"text","value":" 中有多少个 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 满足 "},{"type":"inlineMath","value":"a_i \\geqslant b_i"}]}]},{"type":"paragraph","children":[{"type":"text","value":"数据范围："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"inlineMath","value":"1\\leqslant n\\leqslant 10^5"}]},{"type":"listItem","children":[{"type":"inlineMath","value":"3\\times 10^6"},{"type":"text","value":" 次询问，强制在线。"}]}]},{"type":"paragraph","children":[{"type":"link","url":"http://acm.hdu.edu.cn/showproblem.php?pid=5737","children":[{"type":"text","value":"题目链接"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"题目简析"}],"identifier":"heading-题目简析"},{"type":"paragraph","children":[{"type":"text","value":"将 "},{"type":"inlineMath","value":"B"},{"type":"text","value":" 数组建成归并树（用线段树实现即可），并预处理出初始的 "},{"type":"inlineMath","value":"a_i \\geqslant b_i"},{"type":"text","value":"\n的前缀和，用该线段树维护。那么，对于每次查询就是简单的线段树区间求和问题，复杂度为 "},{"type":"inlineMath","value":"O(n\\log n)"},{"type":"text","value":". 由于修改操作是将一个区间内所有的 "},{"type":"inlineMath","value":"a_i"},{"type":"text","value":" 置为 "},{"type":"inlineMath","value":"x"},{"type":"text","value":"，区间修改将影响线段树中 "},{"type":"inlineMath","value":"O(\\log n)"},{"type":"text","value":" 个节点；对于每个节点，直接二分即可知道有多少这个区间内有多少个点满足 "},{"type":"inlineMath","value":"b_i \\leqslant x"},{"type":"text","value":" 了。这么做的时间复杂度是 "},{"type":"inlineMath","value":"O(n\\log n + q\\log^2 n)"},{"type":"text","value":"\n的，遗憾的是，出题人只给 "},{"type":"inlineMath","value":"O(n\\log n)"},{"type":"text","value":" 以下的复杂度过。"}]},{"type":"paragraph","children":[{"type":"text","value":"如果预处理初每个节点所维护的区间中每个节点在左右子节点中的 "},{"type":"inlineMath","value":"rank"},{"type":"text","value":"，这个可以线扫，总复杂度为 "},{"type":"inlineMath","value":"O(n\\log n)"},{"type":"text","value":"；不难发现，每次在节点所维护的区间内查找有多少个点小于等于 "},{"type":"inlineMath","value":"x"},{"type":"text","value":" 操作仅需在根节点处二分一次，之后 "},{"type":"inlineMath","value":"O(1)"},{"type":"text","value":" 转移，复杂度降为 "},{"type":"inlineMath","value":"O((n+q)\\log n)"},{"type":"text","value":"."}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"程序实现"}],"identifier":"heading-程序实现"},{"type":"code","lang":"cpp","meta":"title=\"1004.cpp\" sourcefile=\"./1004.cpp\" maxlines=\"20\" collapsed linenos","value":"$10"}]},"toc":{"children":[{"depth":2,"identifier":"heading-1004-differencia","contents":[{"type":"text","value":"1004 Differencia"}],"children":[{"depth":3,"identifier":"heading-题目描述","contents":[{"type":"text","value":"题目描述"}],"children":[]},{"depth":3,"identifier":"heading-题目简析","contents":[{"type":"text","value":"题目简析"}],"children":[]},{"depth":3,"identifier":"heading-程序实现","contents":[{"type":"text","value":"程序实现"}],"children":[]}]}]},"ecmaImports":[],"definitionMap":{},"footnoteDefinitionMap":{},"images":[],"paginationUrl":"/posts/4","prev":{"title":"二分图","slug":"/post/algorithm/graph/bipartite-graph"},"next":{"title":"网络流基础之最大权闭合图","slug":"/post/algorithm/graph/network-flow/最大权闭合图"},"aplayerOptions":null}}]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"2016 多校第 2 场 | guanghechen"}],["$","meta","3",{"name":"description","content":"2016 多校第 2 场"}],["$","meta","4",{"name":"application-name","content":"guanghechen"}],["$","link","5",{"rel":"author","href":"https://github.com/guanghechen"}],["$","meta","6",{"name":"author","content":"光和尘"}],["$","link","7",{"rel":"icon","href":"/favicon.png"}],["$","meta","8",{"name":"next-size-adjust"}]]
1:null
