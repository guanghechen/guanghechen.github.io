3:I[5613,[],""]
5:I[31778,[],""]
7:I[79286,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","800","static/chunks/800-4848173b49d8d689.js","185","static/chunks/app/layout-fa17488f223d6ca7.js"],"SiteProvider"]
8:I[54110,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","800","static/chunks/800-4848173b49d8d689.js","185","static/chunks/app/layout-fa17488f223d6ca7.js"],""]
9:I[74117,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","800","static/chunks/800-4848173b49d8d689.js","185","static/chunks/app/layout-fa17488f223d6ca7.js"],"MaterialThemeProvider"]
a:I[55153,["74","static/chunks/74-31f764c22632bceb.js","800","static/chunks/800-4848173b49d8d689.js","160","static/chunks/app/not-found-7a4f60c8a23c275c.js"],"NotFoundView"]
4:["slug","algorithm/graph/network-flow/24-problems","c"]
0:["QrHnf4rdYBDkyXQkdleFO",[[["",{"children":["(post)",{"children":["post",{"children":[["slug","algorithm/graph/network-flow/24-problems","c"],{"children":["__PAGE__?{\"slug\":[\"algorithm\",\"graph\",\"network-flow\",\"24-problems\"]}",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["(post)",{"children":["post",{"children":[["slug","algorithm/graph/network-flow/24-problems","c"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(post)","children","post","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(post)","children","post","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,"$L6",null]]},[null,["$","html",null,{"lang":"en","className":"__className_324942","children":[["$","head",null,{"children":[["$","meta",null,{"charSet":"utf8"}],["$","meta","viewport",{"name":"viewport","content":"initial-scale=1.0, width=device-width"}],["$","meta",null,{"name":"application-name","content":"guanghechen"}],["$","meta",null,{"name":"apple-mobile-web-app-title","content":"光和尘"}],["$","meta",null,{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta",null,{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta",null,{"name":"description","content":"Guanghechen's personal site"}],["$","meta",null,{"name":"format-detection","content":"telephone=no"}],["$","meta",null,{"name":"mobile-web-app-capable","content":"yes"}],["$","meta",null,{"name":"msapplication-config","content":"/icons/browserconfig.xml"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#2B5797"}],["$","meta",null,{"name":"msapplication-tap-highlight","content":"no"}],["$","meta",null,{"name":"theme-color","content":"#a2466c"}],["$","meta",null,{"property":"og:type","content":"website"}],["$","meta",null,{"property":"og:title","content":"光和尘"}],["$","meta",null,{"property":"og:description","content":"光和尘的个人站点"}],["$","meta",null,{"property":"og:site_name","content":"guanghechen"}],["$","meta",null,{"property":"og:url","content":"https://me.guanghechen.com"}],["$","link",null,{"rel":"manifest","href":"/manifest.json"}],["$","link",null,{"rel":"shortcut icon","href":"/favicon.png"}]]}],["$","body",null,{"children":["$","$L7",null,{"children":["$","$L8",null,{"children":["$","$L9",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","$La",null,{}],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/2159a4b672631e08.css","precedence":"next","crossOrigin":""}]]}]}]}]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f2ccec9f31141b1c.css","precedence":"next","crossOrigin":""}]],"$Lb"]]]]
c:I[56057,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","4","static/chunks/4-1f47c029a7fba46f.js","810","static/chunks/810-8ebda3a4770496e8.js","659","static/chunks/659-7f246e0fb997ad2e.js","714","static/chunks/714-13c64a7806ea4ae0.js","800","static/chunks/800-4848173b49d8d689.js","448","static/chunks/448-62c186fb5283557d.js","63","static/chunks/app/(essay)/layout-5f49ece7d1bf5812.js"],"YozoraThemeProvider"]
d:I[20593,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","4","static/chunks/4-1f47c029a7fba46f.js","810","static/chunks/810-8ebda3a4770496e8.js","659","static/chunks/659-7f246e0fb997ad2e.js","714","static/chunks/714-13c64a7806ea4ae0.js","800","static/chunks/800-4848173b49d8d689.js","448","static/chunks/448-62c186fb5283557d.js","63","static/chunks/app/(essay)/layout-5f49ece7d1bf5812.js"],"PostLayoutView"]
e:I[59627,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","4","static/chunks/4-1f47c029a7fba46f.js","810","static/chunks/810-8ebda3a4770496e8.js","659","static/chunks/659-7f246e0fb997ad2e.js","714","static/chunks/714-13c64a7806ea4ae0.js","595","static/chunks/595-60215c9a9c19277d.js","551","static/chunks/551-68df0022cc950ef8.js","800","static/chunks/800-4848173b49d8d689.js","448","static/chunks/448-62c186fb5283557d.js","918","static/chunks/app/(post)/post/%5B...slug%5D/page-80cd6d5787edd594.js"],"PostDetailPageView"]
6:["$","$Lc",null,{"children":["$","$Ld",null,{"data":{"postItems":[{"title":"Javascript 踩坑记——继承和原型链","slug":"/post/web/javascript/inherit","tags":["studynote","javascript","ecmascript"],"createdAt":"Sep 05, 2021"},{"title":"防抖和节流","slug":"/post/algorithm/debounce-and-throttle","tags":["coding","debounce","throttle"],"createdAt":"Sep 03, 2021"},{"title":"XSS 与 CSRF 的攻防","slug":"/post/web/security/xss-csrf","tags":["web","web security","csrf"],"createdAt":"Aug 19, 2021"},{"title":"自然对数底数 e","slug":"/post/math/calculus/自然对数底数e","tags":["math","函数","极限","自然对数"],"createdAt":"Aug 07, 2021"},{"title":"当你想来一把数独","slug":"/post/game/sudoku","tags":["game","sudoku"],"createdAt":"Aug 01, 2021"},{"title":"精确覆盖问题和 DLX 算法","slug":"/post/algorithm/dlx","tags":["算法","精确覆盖","DLX 算法"],"createdAt":"Jul 24, 2021"},{"title":"洗牌问题和 knuth-shuffle 算法","slug":"/post/algorithm/shuffle","tags":["shuffle","knuth-shuffle","约瑟夫环"],"createdAt":"Jul 22, 2021"},{"title":"统计区间内的线段","slug":"/post/quiz/scanning-line/segments","tags":["quiz","扫描线","前缀和","树状数组","线段树"],"createdAt":"Jul 21, 2021"},{"title":"约瑟夫环问题","slug":"/post/quiz/classical/Josephus-ring","tags":["quiz","经典问题","约瑟夫环"],"createdAt":"Jul 16, 2021"},{"title":"剑指offer 解题报告","slug":"/post/acm/oj/nowcoder/jz-offer","tags":["专题训练","解题报告"],"createdAt":"Jul 15, 2021"},{"title":"不修改数组找出重复的数字","slug":"/post/quiz/partition/find-duplicate-number","tags":["quiz","分治","追击"],"createdAt":"Jun 29, 2021"},{"title":"背包九讲","slug":"/post/algorithm/knapsack","tags":["acm","算法","动态规划","背包问题"],"createdAt":"Jun 27, 2021"},{"title":"React Reconciliation","slug":"/post/web/react/reconciliation","tags":["react","react reconciliation"],"createdAt":"Jun 26, 2021"},{"title":"扔鸡蛋问题","slug":"/post/quiz/dp/egg-drop","tags":["quiz","动态规划"],"createdAt":"Jun 20, 2021"},{"title":"端口管理","slug":"/post/network/端口管理","tags":["network","port","ssh","netstat"],"createdAt":"Jun 20, 2021"},{"title":"最长公共子序列（LCS）","slug":"/post/algorithm/lcs","tags":["最长公共子序列","LCS"],"createdAt":"Jun 02, 2021"},{"title":"最长上升子序列（LIS）","slug":"/post/algorithm/lis","tags":["最长上升子序列","LIS"],"createdAt":"Jun 02, 2021"},{"title":"Dijkstra 算法","slug":"/post/algorithm/graph/shortest-path/dijkstra","tags":["算法","最短路","单源最短路","dijkstra"],"createdAt":"May 29, 2021"},{"title":"函数的极限","slug":"/post/math/calculus/函数的极限","tags":["math","函数","极限"],"createdAt":"May 09, 2021"},{"title":"ECMA 2020 新特性","slug":"/post/web/javascript/2020","tags":["javascript","ecmascript"],"createdAt":"Apr 05, 2021"},{"title":"ECMA 2021 新特性","slug":"/post/web/javascript/2021","tags":["javascript","ecmascript"],"createdAt":"Apr 05, 2021"},{"title":"在 excel 中启用正则表达式","slug":"/post/tool/excel/regex","tags":["excel","tools"],"createdAt":"Mar 29, 2021"},{"title":"CSS 选择器","slug":"/post/web/css/selector","tags":["web","frontend","css"],"createdAt":"Nov 02, 2020"},{"title":"Custom React Hooks","slug":"/post/web/react/hooks/custom","tags":["react","react hooks"],"createdAt":"Oct 29, 2020"},{"title":"组合游戏基础之 SG 函数和 SG 定理","slug":"/post/math/combinatorial/SG","tags":["组合数学","组合游戏","SG 定理"],"createdAt":"Sep 04, 2016"},{"title":"网络流 24 题","slug":"/post/algorithm/graph/network-flow/24-problems","tags":["acm","算法","图论","网络流","二分图","解题报告","专题训练"],"createdAt":"Jul 30, 2016"},{"title":"网络流基础之最大权闭合图","slug":"/post/algorithm/graph/network-flow/最大权闭合图","tags":["算法","图论","网络流","最大权闭合图"],"createdAt":"Jul 24, 2016"},{"title":"2016 多校第 2 场","slug":"/post/acm/contest/multi-university-training/2016/2","tags":["acm","训练赛","数据结构","解题报告"],"createdAt":"Jul 22, 2016"},{"title":"二分图","slug":"/post/algorithm/graph/bipartite-graph","tags":["算法","图论","二分图","学习笔记"],"createdAt":"Jul 17, 2016"},{"title":"伸展树专题","slug":"/post/data-structure/bbst/splay","tags":["acm","Splay","解题报告","专题训练"],"createdAt":"Jul 03, 2016"},{"title":"CCF 2015-09 最佳文章 解题报告","slug":"/post/acm/oj/ccf/2015/09/E","tags":["acm","Aho-Corasick 自动机","矩阵快速幂","动态规划","解题报告"],"createdAt":"Jun 26, 2016"},{"title":"编译原理-语法制导翻译实现计算器","slug":"/post/fundamentals-of-compiling/exercise","tags":["编译原理","语法制导翻译","计算机"],"createdAt":"Jun 23, 2016"},{"title":"编译原理-语法分析","slug":"/post/fundamentals-of-compiling/grammar","tags":["编译原理","语法分析","计算机"],"createdAt":"Jun 18, 2016"},{"title":"百度之星 2016 解题报告","slug":"/post/acm/contest/baiduzhixing/2016","tags":["acm","递推","状态压缩","动态规划","字典树","解题报告"],"createdAt":"Jun 03, 2016"},{"title":"数论基础之原根","slug":"/post/math/number-theory/原根","tags":["math","数论","原根"],"createdAt":"May 16, 2016"},{"title":"数论基础之欧拉函数","slug":"/post/math/number-theory/欧拉函数","tags":["math","数论","既约剩余系","欧拉函数"],"createdAt":"May 10, 2016"},{"title":"数论基础之筛法","slug":"/post/math/number-theory/sieve","tags":["math","数论","素数","欧拉函数","线性筛"],"createdAt":"May 06, 2016"},{"title":"数论基础之模方程初步","slug":"/post/math/number-theory/模方程/basic","tags":["math","数论","扩展欧几里得算法","中国剩余定理","Baby Step Gaint Step"],"createdAt":"May 04, 2016"},{"title":"HDU-5576 Expection of String 解题报告（原 2015-上海区域赛-E)","slug":"/post/acm/oj/hdu/5576","tags":["acm","动态规划","解题报告"],"createdAt":"Apr 24, 2016"},{"title":"树链剖分","slug":"/post/algorithm/tree/tcs","tags":["acm","算法","树链剖分"],"createdAt":"Apr 23, 2016"},{"title":"51nod-1462 数据结构 -- 解题报告","slug":"/post/acm/oj/51nod/1462","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"createdAt":"Apr 23, 2016"},{"title":"小球放盒模型","slug":"/post/math/combinatorial/小球放盒模型","tags":["math","组合数学"],"createdAt":"Apr 22, 2016"},{"title":"最长回文子串 Manacher 算法","slug":"/post/algorithm/string/manacher","tags":["算法","字符串","回文串","manacher"],"createdAt":"Apr 18, 2016"},{"title":"POJ-1324 Holedox Moving 解题报告","slug":"/post/acm/oj/poj/1324","tags":["acm","bfs","图论","状态压缩","解题报告"],"createdAt":"Apr 13, 2016"},{"title":"HDU-5574 Colorful Tree 解题报告（原 2015-上海区域赛-C）","slug":"/post/acm/oj/hdu/5574","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"createdAt":"Apr 12, 2016"},{"title":"快速傅里叶变换和雷德算法","slug":"/post/math/number-theory/fft","tags":["acm","大数乘法","fft","快速傅里叶变换"],"createdAt":"Apr 10, 2016"},{"title":"HDU-5306 Gorgeous Sequence 解题报告","slug":"/post/acm/oj/hdu/5306","tags":["acm","数据结构","线段树","解题报告"],"createdAt":"Apr 09, 2016"}]},"storageKey":"@kyokuya/react-layout-post/#page","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(post)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}]}]
f:["acm","算法","图论","网络流","二分图","解题报告","专题训练"]
10:T97f,#include <cstring>
#include <queue>
#include <vector>

namespace ISAP {
  static const int MAXN = 10000 + 10;
  static const int INF = 0x3f3f3f3f;

  struct Edge {
    int from, to, cap, flow;
    Edge(int from = 0, int to = 0, int cap = 0, int flow = 0)
        : from(from), to(to), cap(cap), flow(flow) {
    }
  };

  int s, t, n;
  int cnt[MAXN];
  int cur[MAXN];
  int path[MAXN];
  int dist[MAXN];
  std::vector<Edge> edges;
  std::vector<int> G[MAXN];
  std::queue<int> Q;

  void addedge(int from, int to, int cap) {
    int siz = edges.size();
    edges.push_back(Edge(from, to, cap, 0));
    edges.push_back(Edge(to, from, 0, 0));
    G[from].push_back(siz);
    G[to].push_back(siz + 1);
  }

  void BFS() {
    memset(dist, -1, sizeof dist);

    Q.push(t);
    dist[t] = 0;

    while (!Q.empty()) {
      int o = Q.front();
      Q.pop();
      for (int i = 0; i < G[o].size(); ++i) {
        Edge& e = edges[G[o][i]];
        if (dist[e.to] == -1 && e.cap == 0) {
          dist[e.to] = dist[o] + 1;
          Q.push(e.to);
        }
      }
    }
  }

  int augment() {
    int mif = INF;
    for (int o = t; o != s;) {
      Edge& e = edges[path[o]];
      mif = std::min(mif, e.cap - e.flow);
      o = e.from;
    }
    for (int o = t; o != s;) {
      edges[path[o]].flow += mif;
      edges[path[o] ^ 1].flow -= mif;
      o = edges[path[o]].from;
    }
    return mif;
  }

  int maxflow() {
    BFS();
    memset(cur, 0, sizeof cur);
    memset(cnt, 0, sizeof cnt);
    for (int i = 0; i < n; ++i)
      if (dist[i] < n) ++cnt[dist[i]];

    int ans = 0;
    for (int o = s; dist[o] < n;) {
      if (o == t) ans += augment(), o = s;
      bool ok = false;
      for (int i = cur[o]; i < G[o].size(); ++i) {
        Edge& e = edges[G[o][i]];
        if (e.cap > e.flow && dist[o] == dist[e.to] + 1) {
          ok = true;
          cur[o] = i;
          path[e.to] = G[o][i];
          o = e.to;
          break;
        }
      }
      if (!ok) {
        int d = n - 1;
        for (int i = 0; i < G[o].size(); ++i) {
          Edge& e = edges[G[o][i]];
          if (e.cap > e.flow) d = std::min(d, dist[e.to]);
        }
        if (--cnt[dist[o]] == 0) break;
        ++cnt[dist[o] = d + 1];
        cur[o] = 0;
        if (o != s) o = edges[path[o]].from;
      }
    }
    return ans;
  }

  void solve();
  void solve(int);
  void solve(int, int);
  void solve(int, int, int);
};   // namespace ISAP
11:T705,#include <cstring>
#include <queue>
#include <vector>

namespace Dinic {
  static const int MAXN = 10000 + 10;
  static const int INF = 0x3f3f3f3f;

  struct Edge {
    int from, to, cap, flow;
    Edge(int from = 0, int to = 0, int cap = 0, int flow = 0)
        : from(from), to(to), cap(cap), flow(flow) {
    }
  };

  int s, t;
  int cur[MAXN];
  int dist[MAXN];
  std::queue<int> Q;
  std::vector<Edge> edges;
  std::vector<int> G[MAXN];

  void addedge(int from, int to, int cap) {
    int siz = edges.size();
    edges.push_back(Edge(from, to, cap, 0));
    edges.push_back(Edge(to, from, 0, 0));
    G[from].push_back(siz);
    G[to].push_back(siz + 1);
  }

  bool BFS() {
    memset(dist, -1, sizeof dist);

    Q.push(s);
    dist[s] = 0;

    while (!Q.empty()) {
      int o = Q.front();
      Q.pop();
      for (int i = 0; i < G[o].size(); ++i) {
        Edge& e = edges[G[o][i]];
        if (dist[e.to] == -1 && e.cap > e.flow) {
          dist[e.to] = dist[o] + 1;
          Q.push(e.to);
        }
      }
    }

    return dist[t] != -1;
  }

  int DFS(int o, int minflow) {
    if (o == t || minflow == 0) return minflow;
    int flow = 0;
    for (int& i = cur[o]; i < G[o].size(); ++i) {
      Edge& e = edges[G[o][i]];
      if (dist[e.to] == dist[o] + 1) {
        int f = DFS(e.to, std::min(minflow, e.cap - e.flow));
        if (f <= 0) continue;
        e.flow += f;
        edges[G[o][i] ^ 1].flow -= f;
        flow += f;
        minflow -= f;
        if (minflow == 0) break;
      }
    }
    return flow;
  }

  int maxflow() {
    int ans = 0;
    while (BFS()) {
      memset(cur, 0, sizeof cur);
      ans += DFS(s, INF);
    }
    return ans;
  }

  void solve();
  void solve(int);
  void solve(int, int);
  void solve(int, int, int);
};   // namespace Dinic
12:T7f3,#include <cstring>
#include <queue>
#include <vector>

namespace MCMF {
  const int MAXN = 10000 + 10;
  const int INF = 0x3f3f3f3f;

  struct Edge {
    int from, to, cap, flow, cost;
    Edge(int from = 0, int to = 0, int cap = 0, int flow = 0, int cost = 0)
        : from(from), to(to), cap(cap), flow(flow), cost(cost) {
    }
  };

  int s, t;
  int cost, flow;
  int path[MAXN];
  int dist[MAXN];
  std::vector<Edge> edges;
  std::vector<int> G[MAXN];

  void init(int source = 0, int converge = 1, int N = MAXN) {
    s = source;
    t = converge;
    cost = 0;
    flow = 0;
    edges.clear();
    for (int i = 0; i < N; ++i) G[i].clear();
  }

  void addedge(int from, int to, int cap, int cost) {
    int siz = edges.size();
    edges.push_back(Edge(from, to, cap, 0, cost));
    edges.push_back(Edge(to, from, 0, 0, -cost));
    G[from].push_back(siz);
    G[to].push_back(siz + 1);
  }

  bool spfa() {
    static std::queue<int> Q;
    static bool inq[MAXN];

    memset(dist, 0x3f, sizeof dist);
    Q.push(s);
    inq[s] = true;
    dist[s] = 0;

    while (!Q.empty()) {
      int o = Q.front();
      Q.pop();
      for (int i = 0; i < G[o].size(); ++i) {
        Edge& e = edges[G[o][i]];
        if (e.cap > e.flow && dist[e.to] > dist[o] + e.cost) {
          dist[e.to] = dist[o] + e.cost;
          path[e.to] = G[o][i];
          if (inq[e.to]) continue;
          inq[e.to] = true;
          Q.push(e.to);
        }
      }
      inq[o] = false;
    }

    return dist[t] != INF;
  }

  std::pair<int, int> mincostmaxflow() {
    while (spfa()) {
      int mif = INF;
      for (int o = t; o != s;) {
        Edge& e = edges[path[o]];
        mif = std::min(mif, e.cap - e.flow);
        o = e.from;
      }
      for (int o = t; o != s;) {
        edges[path[o]].flow += mif;
        edges[path[o] ^ 1].flow -= mif;
        o = edges[path[o]].from;
      }
      flow += mif;
      cost += mif * dist[t];
    }
    return std::make_pair(flow, cost);
  }

  void dfs();

  void solve();
};   // namespace MCMF
13:T46d,#include "./isap.hpp"
#include <bits/stdc++.h>

void ISAP::solve(int N, int M) {
  s = 0;
  t = M + 1;
  n = M + 2;
  int ans = maxflow();
  if (ans > 0) {
    printf("%d\n", ans);
    for (int o = 0; o < N; ++o) {
      Edge& e = edges[G[0][o]];
      if (e.cap == e.flow) {
        for (auto& i : G[e.to]) {
          Edge& e2 = edges[i];
          if (e2.cap == e2.flow) {
            printf("%d %d\n", e.to, e2.to);
            break;
          }
        }
      }
    }
  } else
    puts("No Solution!");
}

inline int read() {
  bool positive = true;
  char c = getchar();
  int s = 0;
  for (; c < '0' || c > '9'; c = getchar())
    if (c == '-') positive = false;
  for (; c >= '0' && c <= '9'; c = getchar()) s = s * 10 + c - '0';
  return positive ? s : -s;
}

int main() {
  int N = read();
  int M = read();

  for (int i = 1; i <= N; ++i) ISAP::addedge(0, i, 1);

  for (int i = N + 1; i <= M; ++i) ISAP::addedge(i, M + 1, 1);

  while (true) {
    int u = read();
    int v = read();
    if (u == -1 && v == -1) break;
    if (u > v) std::swap(u, v);
    ISAP::addedge(u, v, 1);
  }

  ISAP::solve(N, M);
  return 0;
}
14:T6cb,#include "./isap.hpp"
#include <bits/stdc++.h>

void ISAP::solve(int M, int N, int tot) {
  static bool used[MAXN];
  static std::stack<int> st;
  memset(used, 0, sizeof used);

  s = 0;
  t = M + N + 1;
  n = M + N + 2;
  int ans = tot - maxflow();

  st.push(s);
  while (!st.empty()) {
    int o = st.top();
    st.pop();
    used[o] = true;
    for (auto& i : G[o]) {
      Edge& e = edges[i];
      if (e.cap > e.flow && !used[e.to]) st.push(e.to);
    }
  }

  for (int i = 1; i <= M; ++i)
    if (used[i]) printf("%d ", i);
  putchar('\n');
  for (int i = 1; i <= N; ++i)
    if (used[M + i]) printf("%d ", i);
  putchar('\n');
  printf("%d\n", ans >> 16);
}

inline int read() {
  bool positive = true;
  char c = getchar();
  int s = 0;
  for (; c < '0' || c > '9'; c = getchar())
    if (c == '-') positive = false;
  for (; c >= '0' && c <= '9'; c = getchar()) s = s * 10 + c - '0';
  return positive ? s : -s;
}

const int INF = 0x3f3f3f3f;
const int partail = (1 << 16) - 1;

char s[10000], *ss;
inline int nextint(char*& s) {
  for (; *s < '0' || *s > '9'; s++)
    if (*s == '\n') return -1;
  int num = 0;
  for (; *s >= '0' && *s <= '9'; s++) num = num * 10 + *s - '0';
  return num;
}

int main() {
  int M = read();
  int N = read();
  int tot = 0;

  for (int i = 1; i <= M; ++i) {
    for (ss = s; (*ss = getchar()) == '\n';)
      ;
    for (ss = s + 1; (*ss = getchar()) != '\n'; ++ss)
      ;
    ss = s;
    int val = nextint(ss) << 16 | 1;
    ISAP::addedge(0, i, val);
    for (int id; (id = nextint(ss)) != -1;) ISAP::addedge(i, M + id, INF);
    tot += val;
  }
  for (int i = 1; i <= N; ++i) {
    int val = read() << 16;
    ISAP::addedge(M + i, M + N + 1, val);
  }

  ISAP::solve(M, N, tot);
  return 0;
}
15:T6a2,#include <bits/stdc++.h>

const int MAXN = 1000 + 10;
const int INF = 0x3f3f3f3f;

namespace hungary {
  int L, R;
  std::vector<int> G[MAXN];
  int left[MAXN], right[MAXN];
  bool mark[MAXN];

  void init(int L = 0, int R = 0) {
    hungary::L = L;
    hungary::R = R;
    for (int u = 1; u <= L; ++u) G[u].clear();
  }

  bool match(int u) {
    for (int i = 0; i < G[u].size(); ++i) {
      int v = G[u][i];
      if (!mark[v]) {
        mark[v] = true;
        if (!left[v] || match(left[v])) {
          left[v] = u;
          right[u] = v;
          return true;
        }
      }
    }
    return false;
  }

  void solve() {
    memset(left, 0, sizeof left);
    memset(right, 0, sizeof right);

    int ans = 0;
    for (int u = 1; u <= L; ++u)
      if (!right[u]) {
        memset(mark, 0, sizeof mark);
        if (match(u)) ++ans;
      }

    memset(mark, 0, sizeof mark);
    mark[0] = true;
    for (int o = 1; o <= L; ++o)
      if (!mark[o]) {
        mark[o] = true;
        printf("%d", o);
        for (int u = right[o]; !mark[u]; u = right[u]) {
          mark[u] = true;
          printf(" %d", u);
        }
        putchar('\n');
      }
    printf("%d\n", L - ans);
  }
};   // namespace hungary

inline int read() {
  bool positive = true;
  char c = getchar();
  int s = 0;
  for (; c < '0' || c > '9'; c = getchar())
    if (c == '-') positive = false;
  for (; c >= '0' && c <= '9'; c = getchar()) s = s * 10 + c - '0';
  return positive ? s : -s;
}

int main() {
  int N = read();
  int M = read();

  hungary::init(N, N);
  for (int i = 1; i <= M; ++i) {
    int u = read();
    int v = read();
    hungary::G[u].push_back(v);
  }

  hungary::solve();
  return 0;
}
16:T76c,#include <bits/stdc++.h>

const int MAXN = 10000 + 10;
const int INF = 0x3f3f3f3f;

namespace hungary {
  int L, R;
  bool mark[MAXN];
  int left[MAXN], right[MAXN];
  std::vector<int> G[MAXN];

  void init(int L = 0, int R = 0) {
    hungary::L = L;
    hungary::R = R;
    for (int u = 1; u <= L; ++u) G[u].clear();
  }

  bool match(int u) {
    for (int i = 0; i < G[u].size(); ++i) {
      int v = G[u][i];
      if (!mark[v]) {
        mark[v] = true;
        if (!left[v] || match(left[v])) {
          left[v] = u;
          right[u] = v;
          return true;
        }
      }
    }
    return false;
  }

  int maxmatch() {
    int ans = 0;
    for (int u = 1; u <= L; ++u)
      if (!right[u]) {
        memset(mark, 0, sizeof mark);
        if (match(u)) ++ans;
      }
    return ans;
  }

  void solve(int N) {
    static std::vector<int> A;
    for (int i = 1; i <= 100; ++i) A.push_back(i * i);
    memset(left, 0, sizeof left);
    memset(right, 0, sizeof right);

    init(N, N);
    for (int i = 1; i <= N; ++i)
      for (auto& a : A)
        if (a - i >= 1 && a - i < i) G[a - i].push_back(i);
    int ans = maxmatch();

    while (true) {
      ++L, ++R;
      for (auto& a : A)
        if (a - L >= 1 && a - L < L) G[a - L].push_back(L);
      ans += maxmatch();
      if (L - ans > N) break;
    }

    for (auto& a : A)
      if (a - L >= 1 && a - L < L) G[a - L].pop_back();
    right[left[L]] = 0;
    --L;
    --R;
    maxmatch();

    printf("%d\n", L);
    memset(mark, 0, sizeof mark);
    mark[0] = true;
    for (int o = 1; o <= L; ++o)
      if (!mark[o]) {
        mark[o] = true;
        printf("%d", o);
        for (int u = right[o]; !mark[u]; u = right[u]) {
          mark[u] = true;
          printf(" %d", u);
        }
        putchar('\n');
      }
  }
};   // namespace hungary

int main() {
  int N;
  std::cin >> N;
  hungary::solve(N);
  return 0;
}
17:T40a,#include "./isap.hpp"
#include <bits/stdc++.h>

void ISAP::solve(int M, int N, int tot) {
  s = 0;
  t = M + N + 1;
  n = M + N + 2;
  int ans = maxflow();
  if (ans < tot) {
    puts("0");
    return;
  }

  puts("1");
  for (int o = 1; o <= M; ++o) {
    for (auto& i : G[o]) {
      Edge& e = edges[i];
      if (e.cap > 0 && e.cap == e.flow) printf("%d ", e.to - M);
    }
    printf("\n");
  }
}

inline int read() {
  bool positive = true;
  char c = getchar();
  int s = 0;
  for (; c < '0' || c > '9'; c = getchar())
    if (c == '-') positive = false;
  for (; c >= '0' && c <= '9'; c = getchar()) s = s * 10 + c - '0';
  return positive ? s : -s;
}

int main() {
  int M = read();
  int N = read();
  int tot = 0;

  for (int i = 1; i <= M; ++i) {
    int val = read();
    tot += val;
    ISAP::addedge(0, i, val);
    for (int j = 1; j <= N; ++j) ISAP::addedge(i, M + j, 1);
  }

  for (int i = 1; i <= N; ++i) {
    int val = read();
    ISAP::addedge(M + i, N + M + 1, val);
  }

  ISAP::solve(M, N, tot);
  return 0;
}
18:T60d,#include "./isap.hpp"
#include <bits/stdc++.h>

inline int read() {
  bool positive = true;
  char c = getchar();
  int s = 0;
  for (; c < '0' || c > '9'; c = getchar())
    if (c == '-') positive = false;
  for (; c >= '0' && c <= '9'; c = getchar()) s = s * 10 + c - '0';
  return positive ? s : -s;
}

const int MAXN = 400 + 10;
const int INF = 0x3f3f3f3f;

int dp[MAXN], in[MAXN];


int main() {
  int N = read();
  for (int i = 1; i <= N; ++i) in[i] = read();

  for (int i = 1; i <= N; ++i)
    for (int j = 0; j < i; ++j)
      if (in[i] > in[j]) dp[i] = std::max(dp[i], dp[j] + 1);

  int ans = 0;
  for (int i = 1; i <= N; ++i) ans = std::max(ans, dp[i]);
  printf("%d\n", ans);

  for (int i = 1; i <= N; ++i) {
    if (dp[i] == 1) ISAP::addedge(0, i << 1, INF);
    ISAP::addedge(i << 1, i << 1 | 1, 1);
    if (dp[i] == ans) ISAP::addedge(i << 1 | 1, 1, INF);
  }

  for (int i = 1; i <= N; ++i)
    for (int j = i + 1; j <= N; ++j)
      if (in[i] < in[j] && dp[i] + 1 == dp[j])
        ISAP::addedge(i << 1 | 1, j << 1, 1);

  ISAP::s = 0;
  ISAP::t = 1;
  ISAP::n = N + 1 << 1;

  printf("%d\n", ISAP::maxflow());

  if (ans == 1) {
    printf("%d\n", N);
    return 0;
  }

  for (auto& e : ISAP::edges) e.flow = 0;
  for (auto& i : ISAP::G[2]) {
    auto& e = ISAP::edges[i];
    if (e.to == 3) {
      e.cap = INF;
      break;
    }
  }

  for (auto& i : ISAP::G[N << 1]) {
    auto& e = ISAP::edges[i];
    if (e.to == (N << 1 | 1)) {
      e.cap = INF;
      break;
    }
  }

  printf("%d\n", ISAP::maxflow());

  return 0;
}
19:T4c2,#include "./isap.hpp"
#include <bits/stdc++.h>

void ISAP::solve(int K, int N, int limit) {
  s = 0;
  t = N + K + 1;
  n = N + K + 2;
  if (maxflow() != limit) {
    puts("NoSolution!");
    return;
  }
  for (int o = 1; o <= K; ++o) {
    printf("%d:", o);
    for (int i = 0; i < G[N + o].size(); ++i) {
      Edge& e = edges[G[N + o][i]];
      if (e.to <= N && e.flow == -1) printf(" %d", e.to);
    }
    putchar('\n');
  }
}

inline int read() {
  bool positive = true;
  char c = getchar();
  int s = 0;
  for (; c < '0' || c > '9'; c = getchar())
    if (c == '-') positive = false;
  for (; c >= '0' && c <= '9'; c = getchar()) s = s * 10 + c - '0';
  return positive ? s : -s;
}

const int MAXN = 400 + 10;
const int INF = 0x3f3f3f3f;

int main() {
  freopen("testlib.in", "r", stdin);
  freopen("testlib.out", "w", stdout);
  int K = read();
  int N = read();
  int limit = 0;

  for (int i = 1; i <= K; ++i) {
    int val = read();
    limit += val;
    ISAP::addedge(N + i, N + K + 1, val);
  }

  for (int i = 1; i <= N; ++i) {
    ISAP::addedge(0, i, 1);
    int M = read();
    while (M--) {
      int j = read();
      ISAP::addedge(i, N + j, 1);
    }
  }

  ISAP::solve(K, N, limit);
  return 0;
}
1a:T793,#include "./mcmf.hpp"
#include "./read.hpp"
#include <bits/stdc++.h>


void MCMF::dfs(std::vector<int>& ans, int o) {
  ans.push_back(o >> 1);
  for (auto& i : G[o]) {
    Edge& e = edges[i];
    if (e.flow == 1) dfs(ans, e.to | 1);
  }
}

bool MCMF::solve(std::string* in) {
  static std::vector<int> ans[2];
  for (int i = 0; i < 2; ++i) {
    if (!spfa()) return false;
    for (int o = t; o != s;) {
      edges[path[o]].flow += 1;
      edges[path[o] ^ 1].flow -= 1;
      o = edges[path[o]].from;
    }
  }

  for (auto& i : G[3]) {
    Edge& e = edges[i];
    if (e.flow == 2) {
      printf("%d\n", 2);
      std::cout << in[1] << "\n" << in[t >> 1] << "\n" << in[1] << "\n";
      return true;
    }
  }

  ans[0].push_back(s >> 1);
  ans[1].push_back(s >> 1);
  int idx = 0;
  for (auto& i : G[3]) {
    Edge& e = edges[i];
    if (e.flow == 1) {
      dfs(ans[idx++], e.to | 1);
    }
  }

  ans[1].pop_back();
  std::reverse(ans[1].begin(), ans[1].end());
  printf("%d\n", ans[0].size() + ans[1].size() - 1);
  for (auto& a : ans[0]) std::cout << in[a] << "\n";
  for (auto& a : ans[1]) std::cout << in[a] << "\n";
  return true;
}

const int MAXN = 100 + 10;
const int INF = 0x3f3f3f3f;
std::unordered_map<std::string, int> ump;
std::string in[MAXN];

int main() {
  int N = read();
  int M = read();
  for (int i = 1; i <= N; ++i) {
    std::cin >> in[i];
    ump[in[i]] = i;
    if (i == 1 || i == N)
      MCMF::addedge(i << 1, i << 1 | 1, 2, -1);
    else
      MCMF::addedge(i << 1, i << 1 | 1, 1, -1);
  }

  for (int i = 1; i <= M; ++i) {
    std::string s, t;
    std::cin >> s >> t;
    int ids = ump[s];
    int idt = ump[t];
    if (ids > idt) std::swap(ids, idt);
    if (ids == 1 && idt == N)
      MCMF::addedge(ids << 1 | 1, idt << 1, 2, 0);
    else
      MCMF::addedge(ids << 1 | 1, idt << 1, 1, 0);
  }

  MCMF::s = 1 << 1;
  MCMF::t = N << 1 | 1;
  if (!MCMF::solve(in)) puts("No Solution!");
  return 0;
}
1b:T77d,#include <bits/stdc++.h>

namespace solve {
  const int INF = 0x3f3f3f3f;
  const int MAXN = (1 << 20) + 10;

  struct node {
    int B1, B2;
    int F1, F2;
    int cost;
    node(int B1 = 0, int B2 = 0, int F1 = 0, int F2 = 0, int cost = 0)
        : B1(B1), B2(B2), F1(F1), F2(F2), cost(cost) {
    }
  };

  int s, t;
  int dist[MAXN];
  std::vector<node> nodes;

  void update(char* s, int& x, int& y) {
    x = y = 0;
    for (int i = 0; s[i]; ++i) {
      if (s[i] == '+')
        x |= 1 << i;
      else if (s[i] == '-')
        y |= 1 << i;
    }
  }

  int spfa() {
    static bool inq[MAXN];
    static std::queue<int> Q;

    memset(dist, 0x3f, sizeof dist);

    Q.push(s);
    dist[s] = 0;
    inq[s] = true;

    while (!Q.empty()) {
      int o = Q.front();
      Q.pop();
      for (auto& e : nodes) {
        if ((o & e.B1) == e.B1 && (o & e.B2) == 0) {
          int u = (o & e.F1) | e.F2;
          if (dist[u] > dist[o] + e.cost) {
            dist[u] = dist[o] + e.cost;
            if (!inq[u]) {
              inq[u] = true;
              Q.push(u);
            }
          }
        }
      }
      inq[o] = false;
    }

    return dist[t] != INF ? dist[t] : 0;
  }

};   // namespace solve

inline int read() {
  bool positive = true;
  char c = getchar();
  int s = 0;
  for (; c < '0' || c > '9'; c = getchar())
    if (c == '-') positive = false;
  for (; c >= '0' && c <= '9'; c = getchar()) s = s * 10 + c - '0';
  return positive ? s : -s;
}

int main() {
  int N = read();
  int M = read();
  int B1, B2, F1, F2, cost, re;
  char in[100];

  re = (1 << N) - 1;
  for (int i = 0; i < M; ++i) {
    cost = read();
    scanf("%s", in);
    solve::update(in, B1, B2);
    scanf("%s", in);
    solve::update(in, F2, F1);
    F1 = re ^ F1;
    solve::nodes.push_back(solve::node(B1, B2, F1, F2, cost));
  }

  solve::s = re;
  solve::t = 0;
  printf("%d\n", solve::spfa());

  return 0;
}
2:["$","$Le",null,{"data":{"title":"网络流 24 题","titleAst":{"type":"paragraph","children":[{"type":"text","value":"网络流 24 题"}]},"slug":"/post/algorithm/graph/network-flow/24-problems","createdAt":"Jul 30, 2016","updatedAt":"Jun 04, 2023","timeToRead":"17min 08s","tags":"$f","categories":[],"ast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Prepare"}],"identifier":"heading-prepare"},{"type":"paragraph","children":[{"type":"text","value":"由于网络流问题难点在于建模，网络流算法基本都是围绕增广路，且相关的文章网上已经有许多了，故此下文中将给出会多次使用到的模板代码，而且其具体的算法略去。"}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"ISAP"}]},{"type":"code","lang":"cpp","meta":"title=\"isap.hpp\" sourcefile=\"./isap.hpp\" maxlines=\"20\" collapsed linenos","value":"$10"}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"Dinic"}]},{"type":"code","lang":"cpp","meta":"title=\"dinic.hpp\" sourcefile=\"./dinic.hpp\" maxlines=\"20\" collapsed linenos","value":"$11"}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"费用流：(Min cost Max flow)"}]},{"type":"code","lang":"cpp","meta":"title=\"mcmf.hpp\" sourcefile=\"./mcmf.hpp\" maxlines=\"20\" collapsed linenos","value":"$12"}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"I/O read"}]},{"type":"code","lang":"cpp","meta":"title=\"read.hpp\" sourcefile=\"./read.hpp\" maxlines=\"20\" collapsed linenos","value":"#include <cstdio>\n\ninline int read() {\n  bool positive = true;\n  char c = getchar();\n  int s = 0;\n  for (; c < '0' || c > '9'; c = getchar())\n    if (c == '-') positive = false;\n  for (; c >= '0' && c <= '9'; c = getchar()) s = s * 10 + c - '0';\n  return positive ? s : -s;\n}\n"}]}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"Problems"}],"identifier":"heading-problems"},{"type":"heading","depth":3,"children":[{"type":"text","value":"01 飞行员配对方案问题"}],"identifier":"heading-01-飞行员配对方案问题"},{"type":"paragraph","children":[{"type":"text","value":"题目链接： "},{"type":"linkReference","identifier":"problem-01","label":"problem-01","referenceType":"full","children":[{"type":"text","value":"Power OJ/1736"}]}]},{"type":"paragraph","children":[{"type":"text","value":"经典的二分图模型："}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"外籍飞行员作为左侧点，英国飞行员作为右侧点，可以互相配合的飞行员之间连一条容量为 "},{"type":"inlineMath","value":"1"},{"type":"text","value":" 的边"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"建立源点 "},{"type":"inlineMath","value":"s"},{"type":"text","value":"，并从 "},{"type":"inlineMath","value":"s"},{"type":"text","value":" 对左侧的每个点引一条容量为 "},{"type":"inlineMath","value":"1"},{"type":"text","value":" 的边"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"建立汇点 "},{"type":"inlineMath","value":"t"},{"type":"text","value":"，并从右侧的每个点向 "},{"type":"inlineMath","value":"t"},{"type":"text","value":" 引一条容量为 "},{"type":"inlineMath","value":"1"},{"type":"text","value":" 的边"}]}]}]},{"type":"paragraph","children":[{"type":"text","value":"然后跑最大流。至于方案，仅需考虑满流的边 "},{"type":"inlineMath","value":"\\left< \\mu,\\nu \\right>"},{"type":"text","value":"（其中\n"},{"type":"inlineMath","value":"\\mu \\in"},{"type":"text","value":" 左侧的点集，"},{"type":"inlineMath","value":"\\nu \\in"},{"type":"text","value":" 右侧的点集），那么 "},{"type":"inlineMath","value":"\\mu"},{"type":"text","value":" 和 "},{"type":"inlineMath","value":"\\nu"},{"type":"text","value":" 是一对搭档。"}]},{"type":"code","lang":"cpp","meta":"title=\"01.cpp\" sourcefile=\"./01.cpp\" maxlines=\"20\" collapsed linenos","value":"$13"},{"type":"heading","depth":3,"children":[{"type":"text","value":"02 太空飞行计划问题"}],"identifier":"heading-02-太空飞行计划问题"},{"type":"paragraph","children":[{"type":"text","value":"题目链接： "},{"type":"linkReference","identifier":"problem-02","label":"problem-02","referenceType":"full","children":[{"type":"text","value":"Power OJ/1737"}]}]},{"type":"paragraph","children":[{"type":"text","value":"经典的最大权闭合图问题（关于最大权闭合图可以参见 "},{"type":"linkReference","identifier":"ghc-网络流基础之最大权闭合图","label":"ghc-网络流基础之最大权闭合图","referenceType":"full","children":[{"type":"text","value":"网络流基础之最大权闭合图"}]},{"type":"text","value":"）："}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"设实验 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 获利为 "},{"type":"inlineMath","value":"x_i"},{"type":"text","value":"，实验仪器 "},{"type":"inlineMath","value":"j"},{"type":"text","value":" 花费为 "},{"type":"inlineMath","value":"y_j"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"将每个实验与实验所需仪器连边，且容量设为 "},{"type":"inlineMath","value":"\\infty"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"建立源点 "},{"type":"inlineMath","value":"s"},{"type":"text","value":"，并从 "},{"type":"inlineMath","value":"s"},{"type":"text","value":" 对所有的实验引一条容量为 "},{"type":"inlineMath","value":"\\alpha\\times x+\\beta"},{"type":"text","value":" 的边（其中，"},{"type":"inlineMath","value":"\\alpha"},{"type":"text","value":" 与 "},{"type":"inlineMath","value":"\\beta"},{"type":"text","value":" 的作用及取值在\n"},{"type":"linkReference","identifier":"ghc-网络流基础之最大权闭合图","label":"ghc-网络流基础之最大权闭合图","referenceType":"full","children":[{"type":"text","value":"网络流基础之最大权闭合图"}]},{"type":"text","value":" 一文中有详细讨论）"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"建立汇点 "},{"type":"inlineMath","value":"t"},{"type":"text","value":"，并从所有的实验仪器向 "},{"type":"inlineMath","value":"t"},{"type":"text","value":" 引一条容量为 "},{"type":"inlineMath","value":"\\alpha\\times y"},{"type":"text","value":" 的边"}]}]}]},{"type":"paragraph","children":[{"type":"text","value":"然后跑最大流，"},{"type":"inlineMath","value":"\\big(\\sum x \\big)"},{"type":"text","value":"-最大流量 即是答案。"},{"type":"break"},{"type":"text","value":"\n至于方案，仅需考虑满流的边所连接的节点即可。"}]},{"type":"code","lang":"cpp","meta":"title=\"02.cpp\" sourcefile=\"./02.cpp\" maxlines=\"20\" collapsed linenos","value":"$14"},{"type":"heading","depth":3,"children":[{"type":"text","value":"03 最小路径覆盖问题"}],"identifier":"heading-03-最小路径覆盖问题"},{"type":"paragraph","children":[{"type":"text","value":"题目链接： "},{"type":"linkReference","identifier":"problem-03","label":"problem-03","referenceType":"full","children":[{"type":"text","value":"Power OJ/1738"}]}]},{"type":"paragraph","children":[{"type":"text","value":"经典的有向无环图最小路径覆盖问题："}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"最小路径覆盖要求的是有向无环图，将原图每个点拆成两个，显然新图是一个二分图"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"求出二分图最大匹配，最小路径覆盖数=原图点数-新图最大匹配数。"}]}]}]},{"type":"paragraph","children":[{"type":"text","value":"简单证明：初始时可以看做有 "},{"type":"inlineMath","value":"N"},{"type":"text","value":" 个长度为 0 的路径，每得到一个匹配相当于合并两条路径。"},{"type":"break"},{"type":"text","value":"\n至于方案，从左侧任意一个未访问过的点出发，经沿着交替路走，得到的就是最小路径覆盖中的一条路径。"}]},{"type":"paragraph","children":[{"type":"text","value":"考虑到使用网络流求出路径比较麻烦 = =，仅给出二分图的 "},{"type":"strong","children":[{"type":"text","value":"增广路算法"}]},{"type":"text","value":" 的实现。"}]},{"type":"code","lang":"cpp","meta":"title=\"03.cpp\" sourcefile=\"./03.cpp\" maxlines=\"20\" collapsed linenos","value":"$15"},{"type":"heading","depth":3,"children":[{"type":"text","value":"04 魔术球问题"}],"identifier":"heading-04-魔术球问题"},{"type":"paragraph","children":[{"type":"text","value":"题目链接： "},{"type":"linkReference","identifier":"problem-04","label":"problem-04","referenceType":"full","children":[{"type":"text","value":"Power OJ/1739"}]}]},{"type":"paragraph","children":[{"type":"text","value":"经典的有向无环图最小路径覆盖问题："}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"同样地，拆点得到二分图结构"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"如果 "},{"type":"inlineMath","value":"\\mu"},{"type":"text","value":" 是左侧的点，"},{"type":"inlineMath","value":"\\nu"},{"type":"text","value":" 是右侧的点，且 "},{"type":"inlineMath","value":"\\mu+\\nu"},{"type":"text","value":" 是一个完全平方数，那么连一条从 "},{"type":"inlineMath","value":"\\mu"},{"type":"text","value":" 到 "},{"type":"inlineMath","value":"\\nu"},{"type":"text","value":" 的边"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"逐渐加点，直到最小覆盖数超过给定值终止"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"假如在 "},{"type":"inlineMath","value":"N+1"},{"type":"text","value":" 的时候终止，可以考虑对于前面 "},{"type":"inlineMath","value":"N"},{"type":"text","value":" 个点中会与 "},{"type":"inlineMath","value":"N+1"},{"type":"text","value":" 形成完全平方数的点删掉最后一条边，再跑一遍最大匹配。"}]}]}]},{"type":"paragraph","children":[{"type":"text","value":"路径的问题和 "},{"type":"linkReference","identifier":"solution-03","label":"solution-03","referenceType":"full","children":[{"type":"text","value":"03"}]},{"type":"text","value":" 类似，此处不再赘述。"}]},{"type":"code","lang":"cpp","meta":"title=\"04.cpp\" sourcefile=\"./04.cpp\" maxlines=\"20\" collapsed linenos","value":"$16"},{"type":"heading","depth":3,"children":[{"type":"text","value":"05 圆桌问题"}],"identifier":"heading-05-圆桌问题"},{"type":"paragraph","children":[{"type":"text","value":"题目链接： "},{"type":"linkReference","identifier":"problem-05","label":"problem-05","referenceType":"full","children":[{"type":"text","value":"Power OJ/1740"}]}]},{"type":"paragraph","children":[{"type":"text","value":"经典的二分图多重匹配问题："}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"将不同单位作为左侧点，不同圆桌作为右侧点，每个左侧点与每个右侧点连接一条容量为\n"},{"type":"inlineMath","value":"1"},{"type":"text","value":" 的边"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"建立源点 "},{"type":"inlineMath","value":"s"},{"type":"text","value":"，并从 "},{"type":"inlineMath","value":"s"},{"type":"text","value":" 向所有的左侧点引一条容量为 "},{"type":"inlineMath","value":"cap_i"},{"type":"text","value":"\n（第 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 个单位的人数）的边"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"建立汇点 "},{"type":"inlineMath","value":"t"},{"type":"text","value":"，并从所有的右侧点向 "},{"type":"inlineMath","value":"t"},{"type":"text","value":" 引一条容量为 "},{"type":"inlineMath","value":"cap_j"},{"type":"text","value":"\n（第 "},{"type":"inlineMath","value":"j"},{"type":"text","value":" 张圆桌的容量）的边跑最大流。"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"若满流，则有解，方案仅需考虑每个左侧点引出的满流边即可"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"若不能满流，则无解"}]}]}]},{"type":"code","lang":"cpp","meta":"title=\"05.cpp\" sourcefile=\"./05.cpp\" maxlines=\"20\" collapsed linenos","value":"$17"},{"type":"heading","depth":3,"children":[{"type":"text","value":"06 最长递增子序列问题"}],"identifier":"heading-06-最长递增子序列问题"},{"type":"paragraph","children":[{"type":"text","value":"题目链接： "},{"type":"linkReference","identifier":"problem-06","label":"problem-06","referenceType":"full","children":[{"type":"text","value":"Power OJ/1741"}]}]},{"type":"paragraph","children":[{"type":"text","value":"经典的最多最长不相交路径问题："}]},{"type":"paragraph","children":[{"type":"text","value":"不妨记第 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 个数大小为 "},{"type":"inlineMath","value":"A_i"},{"type":"text","value":"。为了保证每个点只使用一次，可以拆点：不妨假设原序列第 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 个数对应点 "},{"type":"inlineMath","value":"x_i"},{"type":"text","value":"，将其拆成 "},{"type":"inlineMath","value":"x_i"},{"type":"text","value":" 和 "},{"type":"inlineMath","value":"x'_i"},{"type":"text","value":"。"}]},{"type":"list","ordered":true,"orderType":"1","start":1,"marker":46,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"定义 "},{"type":"inlineMath","value":"dp_i"},{"type":"text","value":" 为以第 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 个数为结尾的最长上升子序列的长度，"},{"type":"inlineMath","value":"O(N^2)"},{"type":"text","value":" 的动态规划"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"记最长上升子序列长度为 "},{"type":"inlineMath","value":"ans=\\max\\big\\lbrace dp_i \\big| 1\\leqslant i\\leqslant N\\big\\rbrace"}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"对于任意 "},{"type":"inlineMath","value":"1\\leqslant i\\leqslant N"},{"type":"text","value":"，从 "},{"type":"inlineMath","value":"x_i"},{"type":"text","value":" 向 "},{"type":"inlineMath","value":"x'_i"},{"type":"text","value":" 引一条容量为 "},{"type":"inlineMath","value":"1"},{"type":"text","value":" 的边（以保证第 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 个数只使用一次）"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"若 "},{"type":"inlineMath","value":"A_i < A_j"},{"type":"text","value":" 且 "},{"type":"inlineMath","value":"dp[i]+1=dp[j]"},{"type":"text","value":"，则从 "},{"type":"inlineMath","value":"x_i'"},{"type":"text","value":" 向 "},{"type":"inlineMath","value":"x_j"},{"type":"text","value":" 引一条容量为 1 的边"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"建立源点 "},{"type":"inlineMath","value":"s"},{"type":"text","value":"，从 "},{"type":"inlineMath","value":"s"},{"type":"text","value":" 向 "},{"type":"inlineMath","value":"\\big\\lbrace x_i \\big| 1\\leqslant i\\leqslant N"},{"type":"text","value":" 且\n"},{"type":"inlineMath","value":"dp_i=1 \\big\\rbrace"},{"type":"text","value":" 引一条容量为 "},{"type":"inlineMath","value":"1"},{"type":"text","value":" 的边"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"建立汇点 "},{"type":"inlineMath","value":"t"},{"type":"text","value":"，从 "},{"type":"inlineMath","value":"\\big\\lbrace x'_i \\big| 1\\leqslant i\\leqslant N"},{"type":"text","value":" 且\n"},{"type":"inlineMath","value":"dp_i = ans \\big\\rbrace"},{"type":"text","value":" 向 "},{"type":"inlineMath","value":"t"},{"type":"text","value":" 引一条容量为 "},{"type":"inlineMath","value":"1"},{"type":"text","value":" 的边"}]}]}]},{"type":"paragraph","children":[{"type":"text","value":"然后跑最大流即可"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"在 2. 的基础上，仅需将从源点出发的边及到达汇点的边（不包括反向边）的容量全改为无穷即可"}]}]}]},{"type":"paragraph","children":[{"type":"text","value":"原题描述不严谨，如果第一问答案为 "},{"type":"inlineMath","value":"2"},{"type":"text","value":"，第三问中，方案 "},{"type":"inlineMath","value":"\\big\\lbrace x_1,x_N \\big\\rbrace"},{"type":"text","value":"\n只能记做一次。最后需要注意的是，当 "},{"type":"inlineMath","value":"N=1"},{"type":"text","value":" 时，第三问要特判。"}]},{"type":"code","lang":"cpp","meta":"title=\"06.cpp\" sourcefile=\"./06.cpp\" maxlines=\"20\" collapsed linenos","value":"$18"},{"type":"heading","depth":3,"children":[{"type":"text","value":"07 试题库"}],"identifier":"heading-07-试题库"},{"type":"paragraph","children":[{"type":"text","value":"题目链接： "},{"type":"linkReference","identifier":"problem-07","label":"problem-07","referenceType":"full","children":[{"type":"text","value":"COGS/732"}]}]},{"type":"paragraph","children":[{"type":"text","value":"类似 "},{"type":"linkReference","identifier":"solution-05","label":"solution-05","referenceType":"full","children":[{"type":"text","value":"05"}]},{"type":"text","value":"，经典的二分图多重匹配问题。"}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"将每道题与其所属类型连接一条容量为 "},{"type":"inlineMath","value":"1"},{"type":"text","value":" 的边"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"建立源点 "},{"type":"inlineMath","value":"s"},{"type":"text","value":"，从 "},{"type":"inlineMath","value":"s"},{"type":"text","value":" 向每道试题引一条容量为 "},{"type":"inlineMath","value":"1"},{"type":"text","value":" 的边"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"建立汇点 "},{"type":"inlineMath","value":"t"},{"type":"text","value":"，从每个类型向 "},{"type":"inlineMath","value":"t"},{"type":"text","value":" 引一条容量为该类型所需要的题数的边"}]}]}]},{"type":"paragraph","children":[{"type":"text","value":"跑最大流，仅当流量为所有类型所需要的题数总和时有解。"}]},{"type":"code","lang":"cpp","meta":"title=\"07.cpp\" sourcefile=\"./07.cpp\" maxlines=\"20\" collapsed linenos","value":"$19"},{"type":"heading","depth":3,"children":[{"type":"text","value":"08 机器人路径规划问题"}],"identifier":"heading-08-机器人路径规划问题"},{"type":"paragraph","children":[{"type":"text","value":"题目链接： "},{"type":"linkReference","identifier":"problem-08","label":"problem-08","referenceType":"full","children":[{"type":"text","value":"Power OJ/1743"}]}]},{"type":"paragraph","children":[{"type":"text","value":"暂缺。"}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"09 方格取数问题"}],"identifier":"heading-09-方格取数问题"},{"type":"paragraph","children":[{"type":"text","value":"题目链接： "},{"type":"linkReference","identifier":"problem-09","label":"problem-09","referenceType":"full","children":[{"type":"text","value":"Power OJ/1744"}]}]},{"type":"paragraph","children":[{"type":"text","value":"经典的二分图点权最大独立集。"}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"将方格二染色得到二分图"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"对于左侧的点，向其对应方格的前后左右方格对应的点连接一条容量为"},{"type":"inlineMath","value":"\\infty"},{"type":"text","value":"的边"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"建立源点 "},{"type":"inlineMath","value":"s"},{"type":"text","value":"，从 "},{"type":"inlineMath","value":"s"},{"type":"text","value":" 向左侧的点分别引一条"},{"type":"emphasis","children":[{"type":"text","value":"容量为该点所对应的方格中的数"}]},{"type":"text","value":"的边"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"建立汇点 "},{"type":"inlineMath","value":"t"},{"type":"text","value":"，从右侧的点分别引一条"},{"type":"emphasis","children":[{"type":"text","value":"容量为该店所对应的方格中的数"}]},{"type":"text","value":"的边"}]}]}]},{"type":"paragraph","children":[{"type":"text","value":"跑最大流，方格中的数的和 - 最大流量 即是答案。"}]},{"type":"code","lang":"cpp","meta":"title=\"09.cpp\" sourcefile=\"./09.cpp\" maxlines=\"20\" collapsed linenos","value":"#include \"./isap.hpp\"\n#include \"./read.hpp\"\n#include <bits/stdc++.h>\n\nconst int INF = 0x3f3f3f3f;\n\nint main() {\n  int row = read();\n  int col = read();\n  int tot = 0;\n  int idx = 0;\n\n  for (int r = 1; r <= row; ++r)\n    for (int c = 1; c <= col; ++c) {\n      ++idx;\n      int val = read();\n      tot += val;\n      if ((r + c) & 1)\n        ISAP::addedge(idx, row * col + 1, val);\n      else {\n        ISAP::addedge(0, idx, val);\n        if (c > 1) ISAP::addedge(idx, idx - 1, INF);\n        if (r > 1) ISAP::addedge(idx, idx - col, INF);\n        if (c < col) ISAP::addedge(idx, idx + 1, INF);\n        if (r < row) ISAP::addedge(idx, idx + col, INF);\n      }\n    }\n\n  ISAP::s = 0;\n  ISAP::t = row * col + 1;\n  ISAP::n = row * col + 2;\n\n  printf(\"%d\\n\", tot - ISAP::maxflow());\n  return 0;\n}\n"},{"type":"heading","depth":3,"children":[{"type":"text","value":"10 餐巾计划问题"}],"identifier":"heading-10-餐巾计划问题"},{"type":"paragraph","children":[{"type":"text","value":"题目链接： "},{"type":"linkReference","identifier":"problem-10","label":"problem-10","referenceType":"full","children":[{"type":"text","value":"Power OJ/1745"}]}]},{"type":"paragraph","children":[{"type":"text","value":"最小费用最大流。"}]},{"type":"paragraph","children":[{"type":"text","value":"设第 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 天有 "},{"type":"inlineMath","value":"A_i"},{"type":"text","value":" 条脏毛巾（可以是之前的脏毛巾累积下来的），需要 "},{"type":"inlineMath","value":"B_i"},{"type":"text","value":" 条干净的毛巾。将第 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 天拆成两个点 "},{"type":"inlineMath","value":"\\alpha_i"},{"type":"text","value":"，"},{"type":"inlineMath","value":"\\beta_i"},{"type":"text","value":"。"}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"建立源点 "},{"type":"inlineMath","value":"s"}]},{"type":"list","ordered":false,"marker":45,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"从 "},{"type":"inlineMath","value":"s"},{"type":"text","value":" 向 "},{"type":"inlineMath","value":"\\alpha_i"},{"type":"text","value":" 引一条容量为 "},{"type":"inlineMath","value":"B_i"},{"type":"text","value":"、"},{"type":"emphasis","children":[{"type":"text","value":"单位流量费用为零"}]},{"type":"text","value":"的边（表示每天会产生 "},{"type":"inlineMath","value":"B_i"},{"type":"text","value":" 条脏毛巾）"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"从 "},{"type":"inlineMath","value":"s"},{"type":"text","value":" 向 "},{"type":"inlineMath","value":"\\beta_i"},{"type":"text","value":" 引一条容量为 "},{"type":"inlineMath","value":"B_i"},{"type":"text","value":"（或者大于等于 "},{"type":"inlineMath","value":"B_i"},{"type":"text","value":" 皆可）、\n"},{"type":"emphasis","children":[{"type":"text","value":"单位流量费用为新毛巾的费用"}]},{"type":"text","value":"的边（表示每天可以购买的新毛巾数）"}]}]}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"建立汇点 "},{"type":"inlineMath","value":"t"}]},{"type":"list","ordered":false,"marker":45,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"从 "},{"type":"inlineMath","value":"\\beta_i"},{"type":"text","value":" 向 "},{"type":"inlineMath","value":"t"},{"type":"text","value":" 引一条容量为 "},{"type":"inlineMath","value":"B_i"},{"type":"text","value":"、"},{"type":"emphasis","children":[{"type":"text","value":"单位流量费用为零"}]},{"type":"text","value":" 的边（表示每天需要的干净的毛巾数）"}]}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"如果 "},{"type":"inlineMath","value":"i+m+1 \\leqslant j"},{"type":"text","value":"（此 OJ 本题数据有点不一样，应为 "},{"type":"inlineMath","value":"i+m \\leqslant j"},{"type":"text","value":"），那么从 "},{"type":"inlineMath","value":"A_i"},{"type":"text","value":" 向 "},{"type":"inlineMath","value":"B_j"},{"type":"text","value":" 引一条容量为 "},{"type":"inlineMath","value":"\\infty"},{"type":"text","value":"（大于 "},{"type":"inlineMath","value":"\\displaystyle \\sum_{k=1}^i B_k"},{"type":"text","value":"\n即可）、单位流量费用为 "},{"type":"inlineMath","value":"f"},{"type":"text","value":" 的边（表示第 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 天快洗可以提供给第 "},{"type":"inlineMath","value":"j"},{"type":"text","value":" 天；这里有这样一个事实：如果第 "},{"type":"inlineMath","value":"j+k"},{"type":"text","value":" 天需要用到快洗的毛巾，那么大可以将脏毛巾攒到第 "},{"type":"inlineMath","value":"i+k"},{"type":"text","value":"\n天快洗）；慢洗的连边类似"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"最后，对于 "},{"type":"inlineMath","value":"i < N"},{"type":"text","value":"，从 "},{"type":"inlineMath","value":"A_i"},{"type":"text","value":" 向 "},{"type":"inlineMath","value":"A_{i+1}"},{"type":"text","value":" 引一条容量为 "},{"type":"inlineMath","value":"\\infty"},{"type":"text","value":"、\n"},{"type":"emphasis","children":[{"type":"text","value":"单位流量费用为零"}]},{"type":"text","value":" 的边（表示每天留下来的脏毛巾可以免费留到第二天洗）"}]}]}]},{"type":"paragraph","children":[{"type":"text","value":"跑最小费用最大流即可，由于每天新毛巾可以直接供应 "},{"type":"inlineMath","value":"B_i"},{"type":"text","value":" 条，因此必然可以满流。最小费用即为答案。"}]},{"type":"code","lang":"cpp","meta":"title=\"10.cpp\" sourcefile=\"./10.cpp\" maxlines=\"20\" collapsed linenos","value":"#include \"./mcmf.hpp\"\n#include \"./read.hpp\"\n#include <bits/stdc++.h>\n\nconst int INF = 0x3f3f3f3f;\n\nint main() {\n  int N = read();\n  int p = read();\n  int m = read();\n  int f = read();\n  int n = read();\n  int s = read();\n\n  MCMF::init(0, 1);\n  for (int i = 1; i <= N; ++i) {\n    int val = read();\n    MCMF::addedge(0, i << 1, val, 0);\n    MCMF::addedge(0, i << 1 | 1, val, p);\n    MCMF::addedge(i << 1 | 1, 1, val, 0);\n    if (i + 1 <= N) MCMF::addedge(i << 1, (i + 1) << 1, INF, 0);\n    if (i + m <= N) MCMF::addedge(i << 1, (i + m) << 1 | 1, INF, f);\n    if (i + n <= N) MCMF::addedge(i << 1, (i + n) << 1 | 1, INF, s);\n  }\n\n  std::pair<int, int> ans = MCMF::mincostmaxflow();\n\n  printf(\"%d\\n\", ans.second);\n  return 0;\n}\n"},{"type":"heading","depth":3,"children":[{"type":"text","value":"11 航空路线问题"}],"identifier":"heading-11-航空路线问题"},{"type":"paragraph","children":[{"type":"text","value":"题目链接： "},{"type":"linkReference","identifier":"solution-11","label":"solution-11","referenceType":"full","children":[{"type":"text","value":"Power OJ/1746"}]}]},{"type":"paragraph","children":[{"type":"text","value":"最大费用最大流（其实是求两条最长的不相交路径）："}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"为了保证每个城市只访问一次，需要拆点；不妨将第 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 个城市拆成 "},{"type":"inlineMath","value":"\\alpha_i"},{"type":"text","value":" 和 "},{"type":"inlineMath","value":"\\beta_i"},{"type":"text","value":"，且从 "},{"type":"inlineMath","value":"\\alpha_i"},{"type":"text","value":" 向 "},{"type":"inlineMath","value":"\\beta_i"},{"type":"text","value":" 引一条容量为 1，费用为 1 的边"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"如果 "},{"type":"inlineMath","value":"i < j"},{"type":"text","value":" 且城市 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 和 城市 "},{"type":"inlineMath","value":"j"},{"type":"text","value":" 之间有直达航线，那么向 "},{"type":"inlineMath","value":"\\beta_i"},{"type":"text","value":" 和 "},{"type":"inlineMath","value":"\\alpha_j"},{"type":"text","value":" 连接一条容量为 1，费用为 0 的边"}]}]}]},{"type":"paragraph","children":[{"type":"text","value":"跑最大费用最大流（只增广两次），方案根据满流边判断即可。"}]},{"type":"code","lang":"cpp","meta":"title=\"11.cpp\" sourcefile=\"./11.cpp\" maxlines=\"20\" collapsed linenos","value":"$1a"},{"type":"heading","depth":3,"children":[{"type":"text","value":"12 软件补丁问题"}],"identifier":"heading-12-软件补丁问题"},{"type":"paragraph","children":[{"type":"text","value":"题目链接： "},{"type":"linkReference","identifier":"solution-12","label":"solution-12","referenceType":"full","children":[{"type":"text","value":"Power OJ/1747"}]}]},{"type":"paragraph","children":[{"type":"text","value":"更像一个状压 "},{"type":"inlineMath","value":"dp"},{"type":"text","value":"。抽象出图的结构，跑最短路即可。"}]},{"type":"paragraph","children":[{"type":"text","value":"定义 "},{"type":"inlineMath","value":"s"},{"type":"text","value":" 为当前软件的错误状态，如果 "},{"type":"inlineMath","value":"s"},{"type":"text","value":" 中包含 "},{"type":"inlineMath","value":"B1[i]"},{"type":"text","value":" 的所有错误，且不包含\n"},{"type":"inlineMath","value":"B2[i]"},{"type":"text","value":" 中的所有错误，那么存在一条从 "},{"type":"inlineMath","value":"s"},{"type":"text","value":" 到 "},{"type":"inlineMath","value":"s-F1[i]+F2[i]"},{"type":"text","value":"（这里的 "},{"type":"inlineCode","value":"-"},{"type":"text","value":" 指集合运算），且花费为 "},{"type":"inlineMath","value":"cost[i]"},{"type":"text","value":" 的边。"}]},{"type":"code","lang":"cpp","meta":"title=\"12.cpp\" sourcefile=\"./12.cpp\" maxlines=\"20\" collapsed linenos","value":"$1b"},{"type":"heading","depth":2,"children":[{"type":"text","value":"Summary"}],"identifier":"heading-summary"},{"type":"table","columns":[{"align":"center"},{"align":"center"},{"align":"center"},{"align":"center"}],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"#"}]},{"type":"tableCell","children":[{"type":"text","value":"Problem"}]},{"type":"tableCell","children":[{"type":"text","value":"Category"}]},{"type":"tableCell","children":[{"type":"text","value":"Solution / Code"}]}]},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"01"}]},{"type":"tableCell","children":[{"type":"linkReference","identifier":"problem-01","label":"problem-01","referenceType":"full","children":[{"type":"text","value":"飞行员配对方案问题"}]}]},{"type":"tableCell","children":[{"type":"text","value":"二分图最大匹配"}]},{"type":"tableCell","children":[{"type":"linkReference","identifier":"solution-01","label":"solution-01","referenceType":"full","children":[{"type":"text","value":"01"}]}]}]},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"02"}]},{"type":"tableCell","children":[{"type":"linkReference","identifier":"problem-02","label":"problem-02","referenceType":"full","children":[{"type":"text","value":"太空飞行计划问题"}]}]},{"type":"tableCell","children":[{"type":"text","value":"最大权闭合图"}]},{"type":"tableCell","children":[{"type":"linkReference","identifier":"solution-02","label":"solution-02","referenceType":"full","children":[{"type":"text","value":"02"}]}]}]},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"03"}]},{"type":"tableCell","children":[{"type":"linkReference","identifier":"problem-03","label":"problem-03","referenceType":"full","children":[{"type":"text","value":"最小路径覆盖问题"}]}]},{"type":"tableCell","children":[{"type":"text","value":"最小路径覆盖"}]},{"type":"tableCell","children":[{"type":"linkReference","identifier":"solution-03","label":"solution-03","referenceType":"full","children":[{"type":"text","value":"03"}]}]}]},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"04"}]},{"type":"tableCell","children":[{"type":"linkReference","identifier":"problem-04","label":"problem-04","referenceType":"full","children":[{"type":"text","value":"Power OJ/1739"}]}]},{"type":"tableCell","children":[{"type":"text","value":"最小路径覆盖"}]},{"type":"tableCell","children":[{"type":"linkReference","identifier":"solution-04","label":"solution-04","referenceType":"full","children":[{"type":"text","value":"04"}]}]}]},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"05"}]},{"type":"tableCell","children":[{"type":"linkReference","identifier":"problem-05","label":"problem-05","referenceType":"full","children":[{"type":"text","value":"Power OJ/1740"}]}]},{"type":"tableCell","children":[{"type":"text","value":"二分图多重匹配"}]},{"type":"tableCell","children":[{"type":"linkReference","identifier":"solution-05","label":"solution-05","referenceType":"full","children":[{"type":"text","value":"05"}]}]}]},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"06"}]},{"type":"tableCell","children":[{"type":"linkReference","identifier":"problem-06","label":"problem-06","referenceType":"full","children":[{"type":"text","value":"Power OJ/1741"}]}]},{"type":"tableCell","children":[{"type":"text","value":"最多最长不相交路径"}]},{"type":"tableCell","children":[{"type":"linkReference","identifier":"solution-06","label":"solution-06","referenceType":"full","children":[{"type":"text","value":"06"}]}]}]},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"07"}]},{"type":"tableCell","children":[{"type":"linkReference","identifier":"problem-07","label":"problem-07","referenceType":"full","children":[{"type":"text","value":"COGS/732"}]}]},{"type":"tableCell","children":[{"type":"text","value":"二分图多重匹配"}]},{"type":"tableCell","children":[{"type":"linkReference","identifier":"solution-07","label":"solution-07","referenceType":"full","children":[{"type":"text","value":"07"}]}]}]},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"08"}]},{"type":"tableCell","children":[{"type":"linkReference","identifier":"problem-08","label":"problem-08","referenceType":"full","children":[{"type":"text","value":"Power OJ/1743"}]}]},{"type":"tableCell","children":[{"type":"strong","children":[{"type":"text","value":"暂缺"}]}]},{"type":"tableCell","children":[{"type":"linkReference","identifier":"solution-08","label":"solution-08","referenceType":"full","children":[{"type":"text","value":"08"}]}]}]},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"09"}]},{"type":"tableCell","children":[{"type":"linkReference","identifier":"problem-09","label":"problem-09","referenceType":"full","children":[{"type":"text","value":"Power OJ/1744"}]}]},{"type":"tableCell","children":[{"type":"text","value":"二分图点权最大独立集"}]},{"type":"tableCell","children":[{"type":"linkReference","identifier":"solution-09","label":"solution-09","referenceType":"full","children":[{"type":"text","value":"09"}]}]}]},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"10"}]},{"type":"tableCell","children":[{"type":"linkReference","identifier":"problem-10","label":"problem-10","referenceType":"full","children":[{"type":"text","value":"Power OJ/1745"}]}]},{"type":"tableCell","children":[{"type":"text","value":"最小费用最大流（难在建图）"}]},{"type":"tableCell","children":[{"type":"linkReference","identifier":"solution-10","label":"solution-10","referenceType":"full","children":[{"type":"text","value":"10"}]}]}]},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"11"}]},{"type":"tableCell","children":[{"type":"linkReference","identifier":"problem-11","label":"problem-11","referenceType":"full","children":[{"type":"text","value":"Power OJ/1746"}]}]},{"type":"tableCell","children":[{"type":"text","value":"最大费用最大流"}]},{"type":"tableCell","children":[{"type":"linkReference","identifier":"solution-11","label":"solution-11","referenceType":"full","children":[{"type":"text","value":"11"}]}]}]},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"12"}]},{"type":"tableCell","children":[{"type":"linkReference","identifier":"problem-12","label":"problem-12","referenceType":"full","children":[{"type":"text","value":"Power OJ/1747"}]}]},{"type":"tableCell","children":[{"type":"text","value":"最短路"}]},{"type":"tableCell","children":[{"type":"linkReference","identifier":"solution-12","label":"solution-12","referenceType":"full","children":[{"type":"text","value":"12"}]}]}]}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"Related"}],"identifier":"heading-related"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"linkReference","identifier":"ghc-网络流基础之最大权闭合图","label":"ghc-网络流基础之最大权闭合图","referenceType":"full","children":[{"type":"text","value":"网络流基础之最大权闭合图"}]}]}]}]},"toc":{"children":[{"depth":2,"identifier":"heading-prepare","contents":[{"type":"text","value":"Prepare"}],"children":[]},{"depth":2,"identifier":"heading-problems","contents":[{"type":"text","value":"Problems"}],"children":[{"depth":3,"identifier":"heading-01-飞行员配对方案问题","contents":[{"type":"text","value":"01 飞行员配对方案问题"}],"children":[]},{"depth":3,"identifier":"heading-02-太空飞行计划问题","contents":[{"type":"text","value":"02 太空飞行计划问题"}],"children":[]},{"depth":3,"identifier":"heading-03-最小路径覆盖问题","contents":[{"type":"text","value":"03 最小路径覆盖问题"}],"children":[]},{"depth":3,"identifier":"heading-04-魔术球问题","contents":[{"type":"text","value":"04 魔术球问题"}],"children":[]},{"depth":3,"identifier":"heading-05-圆桌问题","contents":[{"type":"text","value":"05 圆桌问题"}],"children":[]},{"depth":3,"identifier":"heading-06-最长递增子序列问题","contents":[{"type":"text","value":"06 最长递增子序列问题"}],"children":[]},{"depth":3,"identifier":"heading-07-试题库","contents":[{"type":"text","value":"07 试题库"}],"children":[]},{"depth":3,"identifier":"heading-08-机器人路径规划问题","contents":[{"type":"text","value":"08 机器人路径规划问题"}],"children":[]},{"depth":3,"identifier":"heading-09-方格取数问题","contents":[{"type":"text","value":"09 方格取数问题"}],"children":[]},{"depth":3,"identifier":"heading-10-餐巾计划问题","contents":[{"type":"text","value":"10 餐巾计划问题"}],"children":[]},{"depth":3,"identifier":"heading-11-航空路线问题","contents":[{"type":"text","value":"11 航空路线问题"}],"children":[]},{"depth":3,"identifier":"heading-12-软件补丁问题","contents":[{"type":"text","value":"12 软件补丁问题"}],"children":[]}]},{"depth":2,"identifier":"heading-summary","contents":[{"type":"text","value":"Summary"}],"children":[]},{"depth":2,"identifier":"heading-related","contents":[{"type":"text","value":"Related"}],"children":[]}]},"ecmaImports":[],"definitionMap":{"problem-01":{"type":"definition","identifier":"problem-01","label":"problem-01","url":"https://www.oj.swust.edu.cn/problem/show/1736"},"problem-02":{"type":"definition","identifier":"problem-02","label":"problem-02","url":"https://www.oj.swust.edu.cn/problem/show/1737"},"problem-03":{"type":"definition","identifier":"problem-03","label":"problem-03","url":"https://www.oj.swust.edu.cn/problem/show/1738"},"problem-04":{"type":"definition","identifier":"problem-04","label":"problem-04","url":"https://www.oj.swust.edu.cn/problem/show/1739"},"problem-05":{"type":"definition","identifier":"problem-05","label":"problem-05","url":"https://www.oj.swust.edu.cn/problem/show/1740"},"problem-06":{"type":"definition","identifier":"problem-06","label":"problem-06","url":"https://www.oj.swust.edu.cn/problem/show/1741"},"problem-07":{"type":"definition","identifier":"problem-07","label":"problem-07","url":"https://www.luogu.com.cn/problem/P2770"},"problem-08":{"type":"definition","identifier":"problem-08","label":"problem-08","url":"https://www.oj.swust.edu.cn/problem/show/1743"},"problem-09":{"type":"definition","identifier":"problem-09","label":"problem-09","url":"https://www.oj.swust.edu.cn/problem/show/1744"},"problem-10":{"type":"definition","identifier":"problem-10","label":"problem-10","url":"https://www.oj.swust.edu.cn/problem/show/1745"},"problem-11":{"type":"definition","identifier":"problem-11","label":"problem-11","url":"https://www.oj.swust.edu.cn/problem/show/1746"},"problem-12":{"type":"definition","identifier":"problem-12","label":"problem-12","url":"https://www.oj.swust.edu.cn/problem/show/1747"},"solution-01":{"type":"definition","identifier":"solution-01","label":"solution-01","url":"#heading-01-%E9%A3%9E%E8%A1%8C%E5%91%98%E9%85%8D%E5%AF%B9%E6%96%B9%E6%A1%88%E9%97%AE%E9%A2%98"},"solution-02":{"type":"definition","identifier":"solution-02","label":"solution-02","url":"#heading-02-%E5%A4%AA%E7%A9%BA%E9%A3%9E%E8%A1%8C%E8%AE%A1%E5%88%92%E9%97%AE%E9%A2%98"},"solution-03":{"type":"definition","identifier":"solution-03","label":"solution-03","url":"#heading-03-%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E8%A6%86%E7%9B%96%E9%97%AE%E9%A2%98"},"solution-04":{"type":"definition","identifier":"solution-04","label":"solution-04","url":"#heading-04-%E9%AD%94%E6%9C%AF%E7%90%83%E9%97%AE%E9%A2%98"},"solution-05":{"type":"definition","identifier":"solution-05","label":"solution-05","url":"#heading-05-%E5%9C%86%E6%A1%8C%E9%97%AE%E9%A2%98"},"solution-06":{"type":"definition","identifier":"solution-06","label":"solution-06","url":"#heading-06-%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98"},"solution-07":{"type":"definition","identifier":"solution-07","label":"solution-07","url":"#heading-07-%E8%AF%95%E9%A2%98%E5%BA%93"},"solution-08":{"type":"definition","identifier":"solution-08","label":"solution-08","url":"#heading-08-%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98"},"solution-09":{"type":"definition","identifier":"solution-09","label":"solution-09","url":"#heading-09-%E6%96%B9%E6%A0%BC%E5%8F%96%E6%95%B0%E9%97%AE%E9%A2%98"},"solution-10":{"type":"definition","identifier":"solution-10","label":"solution-10","url":"#heading-10-%E9%A4%90%E5%B7%BE%E8%AE%A1%E5%88%92%E9%97%AE%E9%A2%98"},"solution-11":{"type":"definition","identifier":"solution-11","label":"solution-11","url":"#heading-11-%E8%88%AA%E7%A9%BA%E8%B7%AF%E7%BA%BF%E9%97%AE%E9%A2%98"},"solution-12":{"type":"definition","identifier":"solution-12","label":"solution-12","url":"#heading-12-%E8%BD%AF%E4%BB%B6%E8%A1%A5%E4%B8%81%E9%97%AE%E9%A2%98"},"ghc-网络流基础之最大权闭合图":{"type":"definition","identifier":"ghc-网络流基础之最大权闭合图","label":"ghc-网络流基础之最大权闭合图","url":"/post/algorithm/graph/network-flow/最大权闭合图"}},"footnoteDefinitionMap":{},"images":[],"paginationUrl":"/posts/4","prev":{"title":"网络流基础之最大权闭合图","slug":"/post/algorithm/graph/network-flow/最大权闭合图"},"next":{"title":"组合游戏基础之 SG 函数和 SG 定理","slug":"/post/math/combinatorial/SG"},"aplayerOptions":null}}]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"网络流 24 题 | guanghechen"}],["$","meta","3",{"name":"description","content":"网络流 24 题"}],["$","meta","4",{"name":"application-name","content":"guanghechen"}],["$","link","5",{"rel":"author","href":"https://github.com/guanghechen"}],["$","meta","6",{"name":"author","content":"光和尘"}],["$","link","7",{"rel":"icon","href":"/favicon.png"}],["$","meta","8",{"name":"next-size-adjust"}]]
1:null
