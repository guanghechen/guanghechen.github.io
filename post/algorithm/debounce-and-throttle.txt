3:I[5613,[],""]
5:I[31778,[],""]
7:I[79286,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","800","static/chunks/800-4848173b49d8d689.js","185","static/chunks/app/layout-9a3d56385d443f6c.js"],"SiteProvider"]
8:I[54110,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","800","static/chunks/800-4848173b49d8d689.js","185","static/chunks/app/layout-9a3d56385d443f6c.js"],""]
9:I[74117,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","800","static/chunks/800-4848173b49d8d689.js","185","static/chunks/app/layout-9a3d56385d443f6c.js"],"MaterialThemeProvider"]
a:I[55153,["74","static/chunks/74-31f764c22632bceb.js","800","static/chunks/800-4848173b49d8d689.js","160","static/chunks/app/not-found-6eb20bdd44b37364.js"],"NotFoundView"]
4:["slug","algorithm/debounce-and-throttle","c"]
0:["nRl4JIbFo48b8lWE_uaRs",[[["",{"children":["(post)",{"children":["post",{"children":[["slug","algorithm/debounce-and-throttle","c"],{"children":["__PAGE__?{\"slug\":[\"algorithm\",\"debounce-and-throttle\"]}",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["(post)",{"children":["post",{"children":[["slug","algorithm/debounce-and-throttle","c"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(post)","children","post","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(post)","children","post","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,"$L6",null]]},[null,["$","html",null,{"lang":"en","className":"__className_324942","children":[["$","head",null,{"children":[["$","meta",null,{"charSet":"utf8"}],["$","meta","viewport",{"name":"viewport","content":"initial-scale=1.0, width=device-width"}],["$","meta",null,{"name":"application-name","content":"guanghechen"}],["$","meta",null,{"name":"apple-mobile-web-app-title","content":"光和尘"}],["$","meta",null,{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta",null,{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta",null,{"name":"description","content":"Guanghechen's personal site"}],["$","meta",null,{"name":"format-detection","content":"telephone=no"}],["$","meta",null,{"name":"mobile-web-app-capable","content":"yes"}],["$","meta",null,{"name":"msapplication-config","content":"/icons/browserconfig.xml"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#2B5797"}],["$","meta",null,{"name":"msapplication-tap-highlight","content":"no"}],["$","meta",null,{"name":"theme-color","content":"#a2466c"}],["$","meta",null,{"property":"og:type","content":"website"}],["$","meta",null,{"property":"og:title","content":"光和尘"}],["$","meta",null,{"property":"og:description","content":"光和尘的个人站点"}],["$","meta",null,{"property":"og:site_name","content":"guanghechen"}],["$","meta",null,{"property":"og:url","content":"https://preview.me.guanghechen.com"}],["$","link",null,{"rel":"manifest","href":"/manifest.json"}],["$","link",null,{"rel":"shortcut icon","href":"/favicon.png"}]]}],["$","body",null,{"children":["$","$L7",null,{"children":["$","$L8",null,{"children":["$","$L9",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","$La",null,{}],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/2159a4b672631e08.css","precedence":"next","crossOrigin":""}]]}]}]}]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f2ccec9f31141b1c.css","precedence":"next","crossOrigin":""}]],"$Lb"]]]]
c:I[56057,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","4","static/chunks/4-1f47c029a7fba46f.js","810","static/chunks/810-8ebda3a4770496e8.js","659","static/chunks/659-7f246e0fb997ad2e.js","714","static/chunks/714-13c64a7806ea4ae0.js","800","static/chunks/800-4848173b49d8d689.js","448","static/chunks/448-62c186fb5283557d.js","422","static/chunks/app/(post)/layout-dfa2e09a2a72ad66.js"],"YozoraThemeProvider"]
d:I[20593,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","4","static/chunks/4-1f47c029a7fba46f.js","810","static/chunks/810-8ebda3a4770496e8.js","659","static/chunks/659-7f246e0fb997ad2e.js","714","static/chunks/714-13c64a7806ea4ae0.js","800","static/chunks/800-4848173b49d8d689.js","448","static/chunks/448-62c186fb5283557d.js","422","static/chunks/app/(post)/layout-dfa2e09a2a72ad66.js"],"PostLayoutView"]
e:I[59627,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","4","static/chunks/4-1f47c029a7fba46f.js","810","static/chunks/810-8ebda3a4770496e8.js","659","static/chunks/659-7f246e0fb997ad2e.js","714","static/chunks/714-13c64a7806ea4ae0.js","595","static/chunks/595-60215c9a9c19277d.js","551","static/chunks/551-68df0022cc950ef8.js","800","static/chunks/800-4848173b49d8d689.js","448","static/chunks/448-62c186fb5283557d.js","918","static/chunks/app/(post)/post/%5B...slug%5D/page-80cd6d5787edd594.js"],"PostDetailPageView"]
6:["$","$Lc",null,{"children":["$","$Ld",null,{"data":{"postItems":[{"title":"Javascript 踩坑记——继承和原型链","slug":"/post/web/javascript/inherit","tags":["studynote","javascript","ecmascript"],"createdAt":"Sep 05, 2021"},{"title":"防抖和节流","slug":"/post/algorithm/debounce-and-throttle","tags":["coding","debounce","throttle"],"createdAt":"Sep 03, 2021"},{"title":"XSS 与 CSRF 的攻防","slug":"/post/web/security/xss-csrf","tags":["web","web security","csrf"],"createdAt":"Aug 19, 2021"},{"title":"自然对数底数 e","slug":"/post/math/calculus/自然对数底数e","tags":["math","函数","极限","自然对数"],"createdAt":"Aug 07, 2021"},{"title":"当你想来一把数独","slug":"/post/game/sudoku","tags":["game","sudoku"],"createdAt":"Aug 01, 2021"},{"title":"精确覆盖问题和 DLX 算法","slug":"/post/algorithm/dlx","tags":["算法","精确覆盖","DLX 算法"],"createdAt":"Jul 24, 2021"},{"title":"洗牌问题和 knuth-shuffle 算法","slug":"/post/algorithm/shuffle","tags":["shuffle","knuth-shuffle","约瑟夫环"],"createdAt":"Jul 22, 2021"},{"title":"统计区间内的线段","slug":"/post/quiz/scanning-line/segments","tags":["quiz","扫描线","前缀和","树状数组","线段树"],"createdAt":"Jul 21, 2021"},{"title":"约瑟夫环问题","slug":"/post/quiz/classical/Josephus-ring","tags":["quiz","经典问题","约瑟夫环"],"createdAt":"Jul 16, 2021"},{"title":"剑指offer 解题报告","slug":"/post/acm/oj/nowcoder/jz-offer","tags":["专题训练","解题报告"],"createdAt":"Jul 15, 2021"},{"title":"不修改数组找出重复的数字","slug":"/post/quiz/partition/find-duplicate-number","tags":["quiz","分治","追击"],"createdAt":"Jun 29, 2021"},{"title":"背包九讲","slug":"/post/algorithm/knapsack","tags":["acm","算法","动态规划","背包问题"],"createdAt":"Jun 27, 2021"},{"title":"React Reconciliation","slug":"/post/web/react/reconciliation","tags":["react","react reconciliation"],"createdAt":"Jun 26, 2021"},{"title":"扔鸡蛋问题","slug":"/post/quiz/dp/egg-drop","tags":["quiz","动态规划"],"createdAt":"Jun 20, 2021"},{"title":"端口管理","slug":"/post/network/端口管理","tags":["network","port","ssh","netstat"],"createdAt":"Jun 20, 2021"},{"title":"最长公共子序列（LCS）","slug":"/post/algorithm/lcs","tags":["最长公共子序列","LCS"],"createdAt":"Jun 02, 2021"},{"title":"最长上升子序列（LIS）","slug":"/post/algorithm/lis","tags":["最长上升子序列","LIS"],"createdAt":"Jun 02, 2021"},{"title":"Dijkstra 算法","slug":"/post/algorithm/graph/shortest-path/dijkstra","tags":["算法","最短路","单源最短路","dijkstra"],"createdAt":"May 29, 2021"},{"title":"函数的极限","slug":"/post/math/calculus/函数的极限","tags":["math","函数","极限"],"createdAt":"May 09, 2021"},{"title":"ECMA 2020 新特性","slug":"/post/web/javascript/2020","tags":["javascript","ecmascript"],"createdAt":"Apr 05, 2021"},{"title":"ECMA 2021 新特性","slug":"/post/web/javascript/2021","tags":["javascript","ecmascript"],"createdAt":"Apr 05, 2021"},{"title":"在 excel 中启用正则表达式","slug":"/post/tool/excel/regex","tags":["excel","tools"],"createdAt":"Mar 29, 2021"},{"title":"CSS 选择器","slug":"/post/web/css/selector","tags":["web","frontend","css"],"createdAt":"Nov 02, 2020"},{"title":"Custom React Hooks","slug":"/post/web/react/hooks/custom","tags":["react","react hooks"],"createdAt":"Oct 29, 2020"},{"title":"组合游戏基础之 SG 函数和 SG 定理","slug":"/post/math/combinatorial/SG","tags":["组合数学","组合游戏","SG 定理"],"createdAt":"Sep 04, 2016"},{"title":"网络流 24 题","slug":"/post/algorithm/graph/network-flow/24-problems","tags":["acm","算法","图论","网络流","二分图","解题报告","专题训练"],"createdAt":"Jul 30, 2016"},{"title":"网络流基础之最大权闭合图","slug":"/post/algorithm/graph/network-flow/最大权闭合图","tags":["算法","图论","网络流","最大权闭合图"],"createdAt":"Jul 24, 2016"},{"title":"2016 多校第 2 场","slug":"/post/acm/contest/multi-university-training/2016/2","tags":["acm","训练赛","数据结构","解题报告"],"createdAt":"Jul 22, 2016"},{"title":"二分图","slug":"/post/algorithm/graph/bipartite-graph","tags":["算法","图论","二分图","学习笔记"],"createdAt":"Jul 17, 2016"},{"title":"伸展树专题","slug":"/post/data-structure/bbst/splay","tags":["acm","Splay","解题报告","专题训练"],"createdAt":"Jul 03, 2016"},{"title":"CCF 2015-09 最佳文章 解题报告","slug":"/post/acm/oj/ccf/2015/09/E","tags":["acm","Aho-Corasick 自动机","矩阵快速幂","动态规划","解题报告"],"createdAt":"Jun 26, 2016"},{"title":"编译原理-语法制导翻译实现计算器","slug":"/post/fundamentals-of-compiling/exercise","tags":["编译原理","语法制导翻译","计算机"],"createdAt":"Jun 23, 2016"},{"title":"编译原理-语法分析","slug":"/post/fundamentals-of-compiling/grammar","tags":["编译原理","语法分析","计算机"],"createdAt":"Jun 18, 2016"},{"title":"百度之星 2016 解题报告","slug":"/post/acm/contest/baiduzhixing/2016","tags":["acm","递推","状态压缩","动态规划","字典树","解题报告"],"createdAt":"Jun 03, 2016"},{"title":"数论基础之原根","slug":"/post/math/number-theory/原根","tags":["math","数论","原根"],"createdAt":"May 16, 2016"},{"title":"数论基础之欧拉函数","slug":"/post/math/number-theory/欧拉函数","tags":["math","数论","既约剩余系","欧拉函数"],"createdAt":"May 10, 2016"},{"title":"数论基础之筛法","slug":"/post/math/number-theory/sieve","tags":["math","数论","素数","欧拉函数","线性筛"],"createdAt":"May 06, 2016"},{"title":"数论基础之模方程初步","slug":"/post/math/number-theory/模方程/basic","tags":["math","数论","扩展欧几里得算法","中国剩余定理","Baby Step Gaint Step"],"createdAt":"May 04, 2016"},{"title":"HDU-5576 Expection of String 解题报告（原 2015-上海区域赛-E)","slug":"/post/acm/oj/hdu/5576","tags":["acm","动态规划","解题报告"],"createdAt":"Apr 24, 2016"},{"title":"树链剖分","slug":"/post/algorithm/tree/tcs","tags":["acm","算法","树链剖分"],"createdAt":"Apr 23, 2016"},{"title":"51nod-1462 数据结构 -- 解题报告","slug":"/post/acm/oj/51nod/1462","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"createdAt":"Apr 23, 2016"},{"title":"小球放盒模型","slug":"/post/math/combinatorial/小球放盒模型","tags":["math","组合数学"],"createdAt":"Apr 22, 2016"},{"title":"最长回文子串 Manacher 算法","slug":"/post/algorithm/string/manacher","tags":["算法","字符串","回文串","manacher"],"createdAt":"Apr 18, 2016"},{"title":"POJ-1324 Holedox Moving 解题报告","slug":"/post/acm/oj/poj/1324","tags":["acm","bfs","图论","状态压缩","解题报告"],"createdAt":"Apr 13, 2016"},{"title":"HDU-5574 Colorful Tree 解题报告（原 2015-上海区域赛-C）","slug":"/post/acm/oj/hdu/5574","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"createdAt":"Apr 12, 2016"},{"title":"快速傅里叶变换和雷德算法","slug":"/post/math/number-theory/fft","tags":["acm","大数乘法","fft","快速傅里叶变换"],"createdAt":"Apr 10, 2016"},{"title":"HDU-5306 Gorgeous Sequence 解题报告","slug":"/post/acm/oj/hdu/5306","tags":["acm","数据结构","线段树","解题报告"],"createdAt":"Apr 09, 2016"}]},"storageKey":"@kyokuya/react-layout-post/#page","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(post)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}]}]
f:["coding","debounce","throttle"]
2:["$","$Le",null,{"data":{"title":"防抖和节流","titleAst":{"type":"paragraph","children":[{"type":"text","value":"防抖和节流"}]},"slug":"/post/algorithm/debounce-and-throttle","createdAt":"Sep 03, 2021","updatedAt":"Nov 03, 2021","timeToRead":"08min 01s","tags":"$f","categories":[],"ast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"前言"}],"identifier":"heading-前言"},{"type":"paragraph","children":[{"type":"text","value":"防抖（debounce）和节流（throttle）在前端开发中十分常见，它们都是针对一个事件被连续触发时限制执行次数的算法，不同的是 debounce 只处理最后一次事件触发，而 throttle\n则以一个固定的频率处理事件触发。你可以在"},{"type":"linkReference","identifier":"animation-debounce_throttle","label":"animation-debounce_throttle","referenceType":"full","children":[{"type":"text","value":"这里"}]},{"type":"text","value":"直观地观察到它们之间的区别。"}]},{"type":"paragraph","children":[{"type":"text","value":"在开始正文之前，先看一下 Typescript 的两个工具类型 "},{"type":"inlineCode","value":"Parameters"},{"type":"text","value":" 和 "},{"type":"inlineCode","value":"ReturnType"},{"type":"text","value":"，引入它们的目的是因为 "},{"type":"inlineCode","value":"debounce"},{"type":"text","value":" 和 "},{"type":"inlineCode","value":"throttle"},{"type":"text","value":" 的实现都以高阶函数的方式展现，本着"},{"type":"delete","children":[{"type":"text","value":"作死无极限"}]},{"type":"text","value":"精益求精的态度，在实现时自然要考虑返回的函数和原函数应具有相同的参数类型的调用体验啦。"}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"Parameters"},{"type":"text","value":": "},{"type":"emphasis","children":[{"type":"text","value":"Typescript@3.1"}]},{"type":"text","value":" 引入的工具类型，用于获取一个函数的参数类型"},{"type":"footnoteReference","identifier":"1","label":"1"},{"type":"text","value":"："}]},{"type":"code","lang":"typescript","meta":"title=\"Parameters.d.ts\"","value":"type Parameters<T extends (...args: any[]) => any> = \n  T extends (...args: infer P) => any ? P : never\n\ntype A = Parameters<(x: number, y: number) => void>\n// A 的类型为 [x: number, y: number]\n"}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"ReturnType"},{"type":"text","value":": "},{"type":"emphasis","children":[{"type":"text","value":"Typescript@2.8"}]},{"type":"text","value":" 引入的工具类型，用于获取一个函数的返回类型："}]},{"type":"code","lang":"typescript","meta":"title=\"ReturnType.d.ts\"","value":"type ReturnType<T extends (...args: any) => any> =\n  T extends (...args: any) => infer R ? R : any\n\ntype A = ReturnType<(x: number, y: number) => string>\n// A 的类型为 string\n"}]}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"防抖 (debounce)"}],"identifier":"heading-防抖-debounce"},{"type":"paragraph","children":[{"type":"text","value":"防抖是指事件连续触发时，只在最后一次事件触发后再执行响应动作。比如，事件被触发的\n"},{"type":"inlineMath","value":"t"},{"type":"text","value":" 秒后才执行回调，若 "},{"type":"inlineMath","value":"t"},{"type":"text","value":" 秒内此事件被再次触发，则重新计时。"}]},{"type":"paragraph","children":[{"type":"text","value":"适用场景："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"提交表单时，快速点击多次，但只执行一次提交。"}]},{"type":"listItem","children":[{"type":"text","value":"搜索框中输入内容实时展示关联条目，只在输入停顿时才发起查询请求（和 "},{"type":"inlineCode","value":"throttle"},{"type":"text","value":"\n中列出的场景有所不同）。"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"简化版"}],"identifier":"heading-简化版"},{"type":"paragraph","children":[{"type":"text","value":"在了解了 debounce 要解决的问题后，不难想到可以利用 "},{"type":"inlineCode","value":"setTimeout"},{"type":"text","value":" 来倒计时，当函数被顺利执行时，则重置定时器，表示当前处于空闲状态；否则，有一个新的事件在倒计时未结束时触发，则同样将计时器重置，但只开始计时，不执行任务。由此不难实现一个简单的版本："}]},{"type":"code","lang":"typescript","meta":"{12-13} title=\"debounce-1.ts\" sourcefile=\"./debounce-1.ts\" linenos","value":"export function debounce<T extends (...args: any[]) => any>(\n  fn: T,\n  wait?: number,\n): (...args: Parameters<T>) => void {\n  // 浏览器中 setTimeout 返回的是 number\n  // 而 NodeJs 中返回的是 NodeJs.Timeout\n  let timeout: ReturnType<typeof setTimeout>\n  return debounced\n\n  function debounced(this: unknown, ...args: Parameters<T>): void {\n    if (timeout) clearTimeout(timeout)\n    const self = this\n    timeout = setTimeout(() => fn.apply(self, args), wait)\n  }\n}\n"},{"type":"paragraph","children":[{"type":"text","value":"注意上面代码的高亮部分，将 "},{"type":"inlineCode","value":"debounced"},{"type":"text","value":" 的 "},{"type":"inlineCode","value":"this"},{"type":"text","value":" 指针绑定到 "},{"type":"inlineCode","value":"fn"},{"type":"text","value":" 中再执行，这是\nJavascript 老生常谈的问题了：当 "},{"type":"inlineCode","value":"fn"},{"type":"text","value":" 中通过 "},{"type":"inlineCode","value":"this"},{"type":"text","value":" 引用变量时，"},{"type":"inlineCode","value":"this"},{"type":"text","value":" 指针将默认指向 "},{"type":"inlineCode","value":"Window"},{"type":"text","value":" "},{"type":"footnoteReference","label":"2","identifier":"footnote-2"},{"type":"text","value":"，而在有些情况下，执行 "},{"type":"inlineCode","value":"fn"},{"type":"text","value":" 时会显式地绑定一个 "},{"type":"inlineCode","value":"this"},{"type":"text","value":" 指针，如 DOM 事件的回调函数中，会把触发事件的元素作为 "},{"type":"inlineCode","value":"this"},{"type":"text","value":" 绑定到 "},{"type":"inlineCode","value":"fn"},{"type":"text","value":" 中，于是我们可以通过 "},{"type":"inlineCode","value":"this"},{"type":"text","value":" 指针去访问当前触发事件的元素："}]},{"type":"code","lang":"typescript","meta":"linenos","value":"document.body.addEventListener('click', debounce(function () {\n  console.log(this.innerText)\n}))\n"},{"type":"heading","depth":3,"children":[{"type":"text","value":"带返回值"}],"identifier":"heading-带返回值"},{"type":"paragraph","children":[{"type":"text","value":"上面的实现版本中，"},{"type":"inlineCode","value":"debounced"},{"type":"text","value":" 返回的是 "},{"type":"inlineCode","value":"void"},{"type":"text","value":"，对于大多数场景已经够用了，但如果要返回值的话，应该如何考虑呢？"},{"type":"inlineCode","value":"debounced"},{"type":"text","value":" 在事件连续多次触发时只会执行一次，我们可以记录下最后一次执行时的结果，然后在每次非实际执行时，返回上一次的结果："}]},{"type":"code","lang":"typescript","meta":"{6,14} title=\"debounce-2.ts\" sourcefile=\"./debounce-2.ts\" linenos","value":"export function debounce<T extends (...args: any[]) => any>(\n  fn: T,\n  wait?: number,\n): (...args: Parameters<T>) => ReturnType<T> | void {\n  let timeout: ReturnType<typeof setTimeout>\n  let lastResult: ReturnType<T> | undefined\n  return debounced\n\n  function debounced(...args: Parameters<T>): ReturnType<T> | void {\n    if (timeout) clearTimeout(timeout)\n\n    const self = this\n    timeout = setTimeout(function () {\n      lastResult = fn.apply(self, args)\n    }, wait)\n    return lastResult\n  }\n}\n"},{"type":"heading","depth":2,"children":[{"type":"text","value":"节流 (throttle)"}],"identifier":"heading-节流-throttle"},{"type":"paragraph","children":[{"type":"text","value":"节流是指事件连续触发时，在一个固定的时间间隔内只执行一次响应动作。比如事件被触发的 "},{"type":"inlineMath","value":"t"},{"type":"text","value":" 秒后再次执行回调，若 "},{"type":"inlineMath","value":"t"},{"type":"text","value":" 秒内此事件被再次触发，直接无视，并不重新计时；而对于 "},{"type":"inlineMath","value":"t"},{"type":"text","value":" 秒后第一次触发的事件会执行响应，并重新计时。"}]},{"type":"paragraph","children":[{"type":"text","value":"适用场景："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"UI 的拖拽事件、鼠标点击事件、滚动事件等，无需为每一次事件触发进行响应，但需要在一个时间范围内至少作出一次响应，否则会影响用户体验（掉帧）。"}]},{"type":"listItem","children":[{"type":"text","value":"搜索框中输入内容实时展示关联条目，每隔一个固定的时间间隔（如 "},{"type":"inlineMath","value":"1"},{"type":"text","value":" 秒）发起一次查询请求（和 "},{"type":"inlineCode","value":"debounce"},{"type":"text","value":" 中列出的场景有所不同）。"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"简化版"}],"identifier":"heading-简化版-2"},{"type":"paragraph","children":[{"type":"text","value":"既然节流只需保证一个固定周期内只执行一次函数，则可以在空闲状态时接收事件触发，并在事件触发时启动一个倒计时的定时器，在倒计时未结束前，忽略所有的其它事件触发，等到上一次处理操作完成后，再将计时器重置，表明重新进入空闲状态。由此可以实现一个简化版的节流函数："}]},{"type":"code","lang":"typescript","meta":"{9,14} title=\"throttle-1.ts\" sourcefile=\"./throttle-1.ts\" linenos","value":"export function throttle<T extends (...args: any[]) => any>(\n  fn: T,\n  wait?: number,\n): (...args: Parameters<T>) => void {\n  let timeout: ReturnType<typeof setTimeout> | null\n  return throttled\n\n  function throttled(...args: Parameters<T>): void {\n    if (timeout) return\n\n    const self = this\n    timeout = setTimeout(function () {\n      fn.apply(self, args)\n      timeout = null\n    }, wait)\n  }\n}\n"},{"type":"paragraph","children":[{"type":"text","value":"上面的代码中仍然考虑了 "},{"type":"inlineCode","value":"this"},{"type":"text","value":" 指针的指向问题，此处不再赘述。"}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"带返回值"}],"identifier":"heading-带返回值-2"},{"type":"paragraph","children":[{"type":"text","value":"同样地，我们可以记录下上一次 "},{"type":"inlineCode","value":"throttled"},{"type":"text","value":" 返回值，在未实际执行的事件触发中，简单地返回一次记录的返回值。"}]},{"type":"code","lang":"typescript","meta":"{6,14} title=\"throttle-2.ts\" sourcefile=\"./throttle-2.ts\" linenos","value":"export function throttle<T extends (...args: any[]) => any>(\n  fn: T,\n  wait?: number,\n): (...args: Parameters<T>) => ReturnType<T> | void {\n  let timeout: ReturnType<typeof setTimeout> | null\n  let lastResult: ReturnType<T> | undefined\n  return throttled\n\n  function throttled(...args: Parameters<T>): ReturnType<T> | void {\n    if (timeout) return lastResult\n\n    const self = this\n    timeout = setTimeout(function () {\n      lastResult = fn.apply(self, args)\n      timeout = null\n    }, wait)\n  }\n}\n"},{"type":"heading","depth":2,"children":[{"type":"text","value":"Related"}],"identifier":"heading-related"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"link","url":"https://stackoverflow.com/questions/25991367/difference-between-throttling-and-debouncing-a-function","children":[{"type":"text","value":"Difference Between throttling and debouncing a function | Stack Overflow"}]}]}]}]},"toc":{"children":[{"depth":2,"identifier":"heading-前言","contents":[{"type":"text","value":"前言"}],"children":[]},{"depth":2,"identifier":"heading-防抖-debounce","contents":[{"type":"text","value":"防抖 (debounce)"}],"children":[{"depth":3,"identifier":"heading-简化版","contents":[{"type":"text","value":"简化版"}],"children":[]},{"depth":3,"identifier":"heading-带返回值","contents":[{"type":"text","value":"带返回值"}],"children":[]}]},{"depth":2,"identifier":"heading-节流-throttle","contents":[{"type":"text","value":"节流 (throttle)"}],"children":[{"depth":3,"identifier":"heading-简化版-2","contents":[{"type":"text","value":"简化版"}],"children":[]},{"depth":3,"identifier":"heading-带返回值-2","contents":[{"type":"text","value":"带返回值"}],"children":[]}]},{"depth":2,"identifier":"heading-related","contents":[{"type":"text","value":"Related"}],"children":[]}]},"ecmaImports":[],"definitionMap":{"animation-debounce_throttle":{"type":"definition","identifier":"animation-debounce_throttle","label":"animation-debounce_throttle","url":"http://demo.nimius.net/debounce_throttle/"}},"footnoteDefinitionMap":{"1":{"type":"footnoteDefinition","identifier":"1","label":"1","children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"infer"},{"type":"text","value":" 关键字是在 "},{"type":"emphasis","children":[{"type":"text","value":"Typescript@2.9"}]},{"type":"text","value":" 引入的，它用于在条件类型下的类型推断，比如我们在想要获得一个 "},{"type":"inlineCode","value":"Promise"},{"type":"text","value":" 对象的返回值类型："}]},{"type":"code","lang":"typescript","meta":null,"value":"type DataType<T> = T extends Promise<infer R> ? R : T\n\ntype A = DataType<number[]>          // => number[]\ntype B = DataType<Promise<string>>   // => string\n"}]},"footnote-2":{"type":"footnoteDefinition","identifier":"footnote-2","label":"2","children":[{"type":"paragraph","children":[{"type":"text","value":"若开启了 "},{"type":"inlineCode","value":"use strict;"},{"type":"text","value":" 选项，则 "},{"type":"inlineCode","value":"this"},{"type":"text","value":" 指针默认指向 "},{"type":"inlineCode","value":"undefined"}]}]}},"images":[],"paginationUrl":"/posts/1","prev":{"title":"XSS 与 CSRF 的攻防","slug":"/post/web/security/xss-csrf"},"next":{"title":"Javascript 踩坑记——继承和原型链","slug":"/post/web/javascript/inherit"},"aplayerOptions":null}}]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"防抖和节流 | guanghechen"}],["$","meta","3",{"name":"description","content":"防抖和节流"}],["$","meta","4",{"name":"application-name","content":"guanghechen"}],["$","link","5",{"rel":"author","href":"https://github.com/guanghechen"}],["$","meta","6",{"name":"author","content":"光和尘"}],["$","link","7",{"rel":"icon","href":"/favicon.png"}],["$","meta","8",{"name":"next-size-adjust"}]]
1:null
