3:I[5613,[],""]
5:I[31778,[],""]
7:I[79286,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","800","static/chunks/800-4848173b49d8d689.js","185","static/chunks/app/layout-9a3d56385d443f6c.js"],"SiteProvider"]
8:I[54110,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","800","static/chunks/800-4848173b49d8d689.js","185","static/chunks/app/layout-9a3d56385d443f6c.js"],""]
9:I[74117,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","800","static/chunks/800-4848173b49d8d689.js","185","static/chunks/app/layout-9a3d56385d443f6c.js"],"MaterialThemeProvider"]
a:I[55153,["74","static/chunks/74-31f764c22632bceb.js","800","static/chunks/800-4848173b49d8d689.js","160","static/chunks/app/not-found-6eb20bdd44b37364.js"],"NotFoundView"]
4:["slug","quiz/classical/Josephus-ring","c"]
0:["nRl4JIbFo48b8lWE_uaRs",[[["",{"children":["(post)",{"children":["post",{"children":[["slug","quiz/classical/Josephus-ring","c"],{"children":["__PAGE__?{\"slug\":[\"quiz\",\"classical\",\"Josephus-ring\"]}",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["(post)",{"children":["post",{"children":[["slug","quiz/classical/Josephus-ring","c"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(post)","children","post","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(post)","children","post","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,"$L6",null]]},[null,["$","html",null,{"lang":"en","className":"__className_324942","children":[["$","head",null,{"children":[["$","meta",null,{"charSet":"utf8"}],["$","meta","viewport",{"name":"viewport","content":"initial-scale=1.0, width=device-width"}],["$","meta",null,{"name":"application-name","content":"guanghechen"}],["$","meta",null,{"name":"apple-mobile-web-app-title","content":"光和尘"}],["$","meta",null,{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta",null,{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta",null,{"name":"description","content":"Guanghechen's personal site"}],["$","meta",null,{"name":"format-detection","content":"telephone=no"}],["$","meta",null,{"name":"mobile-web-app-capable","content":"yes"}],["$","meta",null,{"name":"msapplication-config","content":"/icons/browserconfig.xml"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#2B5797"}],["$","meta",null,{"name":"msapplication-tap-highlight","content":"no"}],["$","meta",null,{"name":"theme-color","content":"#a2466c"}],["$","meta",null,{"property":"og:type","content":"website"}],["$","meta",null,{"property":"og:title","content":"光和尘"}],["$","meta",null,{"property":"og:description","content":"光和尘的个人站点"}],["$","meta",null,{"property":"og:site_name","content":"guanghechen"}],["$","meta",null,{"property":"og:url","content":"https://preview.me.guanghechen.com"}],["$","link",null,{"rel":"manifest","href":"/manifest.json"}],["$","link",null,{"rel":"shortcut icon","href":"/favicon.png"}]]}],["$","body",null,{"children":["$","$L7",null,{"children":["$","$L8",null,{"children":["$","$L9",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","$La",null,{}],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/2159a4b672631e08.css","precedence":"next","crossOrigin":""}]]}]}]}]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f2ccec9f31141b1c.css","precedence":"next","crossOrigin":""}]],"$Lb"]]]]
c:I[56057,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","4","static/chunks/4-1f47c029a7fba46f.js","810","static/chunks/810-8ebda3a4770496e8.js","659","static/chunks/659-7f246e0fb997ad2e.js","714","static/chunks/714-13c64a7806ea4ae0.js","800","static/chunks/800-4848173b49d8d689.js","448","static/chunks/448-62c186fb5283557d.js","422","static/chunks/app/(post)/layout-dfa2e09a2a72ad66.js"],"YozoraThemeProvider"]
d:I[20593,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","4","static/chunks/4-1f47c029a7fba46f.js","810","static/chunks/810-8ebda3a4770496e8.js","659","static/chunks/659-7f246e0fb997ad2e.js","714","static/chunks/714-13c64a7806ea4ae0.js","800","static/chunks/800-4848173b49d8d689.js","448","static/chunks/448-62c186fb5283557d.js","422","static/chunks/app/(post)/layout-dfa2e09a2a72ad66.js"],"PostLayoutView"]
e:I[59627,["74","static/chunks/74-31f764c22632bceb.js","32","static/chunks/32-c49bb5d7213019d7.js","4","static/chunks/4-1f47c029a7fba46f.js","810","static/chunks/810-8ebda3a4770496e8.js","659","static/chunks/659-7f246e0fb997ad2e.js","714","static/chunks/714-13c64a7806ea4ae0.js","595","static/chunks/595-60215c9a9c19277d.js","551","static/chunks/551-68df0022cc950ef8.js","800","static/chunks/800-4848173b49d8d689.js","448","static/chunks/448-62c186fb5283557d.js","918","static/chunks/app/(post)/post/%5B...slug%5D/page-80cd6d5787edd594.js"],"PostDetailPageView"]
6:["$","$Lc",null,{"children":["$","$Ld",null,{"data":{"postItems":[{"title":"Javascript 踩坑记——继承和原型链","slug":"/post/web/javascript/inherit","tags":["studynote","javascript","ecmascript"],"createdAt":"Sep 05, 2021"},{"title":"防抖和节流","slug":"/post/algorithm/debounce-and-throttle","tags":["coding","debounce","throttle"],"createdAt":"Sep 03, 2021"},{"title":"XSS 与 CSRF 的攻防","slug":"/post/web/security/xss-csrf","tags":["web","web security","csrf"],"createdAt":"Aug 19, 2021"},{"title":"自然对数底数 e","slug":"/post/math/calculus/自然对数底数e","tags":["math","函数","极限","自然对数"],"createdAt":"Aug 07, 2021"},{"title":"当你想来一把数独","slug":"/post/game/sudoku","tags":["game","sudoku"],"createdAt":"Aug 01, 2021"},{"title":"精确覆盖问题和 DLX 算法","slug":"/post/algorithm/dlx","tags":["算法","精确覆盖","DLX 算法"],"createdAt":"Jul 24, 2021"},{"title":"洗牌问题和 knuth-shuffle 算法","slug":"/post/algorithm/shuffle","tags":["shuffle","knuth-shuffle","约瑟夫环"],"createdAt":"Jul 22, 2021"},{"title":"统计区间内的线段","slug":"/post/quiz/scanning-line/segments","tags":["quiz","扫描线","前缀和","树状数组","线段树"],"createdAt":"Jul 21, 2021"},{"title":"约瑟夫环问题","slug":"/post/quiz/classical/Josephus-ring","tags":["quiz","经典问题","约瑟夫环"],"createdAt":"Jul 16, 2021"},{"title":"剑指offer 解题报告","slug":"/post/acm/oj/nowcoder/jz-offer","tags":["专题训练","解题报告"],"createdAt":"Jul 15, 2021"},{"title":"不修改数组找出重复的数字","slug":"/post/quiz/partition/find-duplicate-number","tags":["quiz","分治","追击"],"createdAt":"Jun 29, 2021"},{"title":"背包九讲","slug":"/post/algorithm/knapsack","tags":["acm","算法","动态规划","背包问题"],"createdAt":"Jun 27, 2021"},{"title":"React Reconciliation","slug":"/post/web/react/reconciliation","tags":["react","react reconciliation"],"createdAt":"Jun 26, 2021"},{"title":"扔鸡蛋问题","slug":"/post/quiz/dp/egg-drop","tags":["quiz","动态规划"],"createdAt":"Jun 20, 2021"},{"title":"端口管理","slug":"/post/network/端口管理","tags":["network","port","ssh","netstat"],"createdAt":"Jun 20, 2021"},{"title":"最长公共子序列（LCS）","slug":"/post/algorithm/lcs","tags":["最长公共子序列","LCS"],"createdAt":"Jun 02, 2021"},{"title":"最长上升子序列（LIS）","slug":"/post/algorithm/lis","tags":["最长上升子序列","LIS"],"createdAt":"Jun 02, 2021"},{"title":"Dijkstra 算法","slug":"/post/algorithm/graph/shortest-path/dijkstra","tags":["算法","最短路","单源最短路","dijkstra"],"createdAt":"May 29, 2021"},{"title":"函数的极限","slug":"/post/math/calculus/函数的极限","tags":["math","函数","极限"],"createdAt":"May 09, 2021"},{"title":"ECMA 2020 新特性","slug":"/post/web/javascript/2020","tags":["javascript","ecmascript"],"createdAt":"Apr 05, 2021"},{"title":"ECMA 2021 新特性","slug":"/post/web/javascript/2021","tags":["javascript","ecmascript"],"createdAt":"Apr 05, 2021"},{"title":"在 excel 中启用正则表达式","slug":"/post/tool/excel/regex","tags":["excel","tools"],"createdAt":"Mar 29, 2021"},{"title":"CSS 选择器","slug":"/post/web/css/selector","tags":["web","frontend","css"],"createdAt":"Nov 02, 2020"},{"title":"Custom React Hooks","slug":"/post/web/react/hooks/custom","tags":["react","react hooks"],"createdAt":"Oct 29, 2020"},{"title":"组合游戏基础之 SG 函数和 SG 定理","slug":"/post/math/combinatorial/SG","tags":["组合数学","组合游戏","SG 定理"],"createdAt":"Sep 04, 2016"},{"title":"网络流 24 题","slug":"/post/algorithm/graph/network-flow/24-problems","tags":["acm","算法","图论","网络流","二分图","解题报告","专题训练"],"createdAt":"Jul 30, 2016"},{"title":"网络流基础之最大权闭合图","slug":"/post/algorithm/graph/network-flow/最大权闭合图","tags":["算法","图论","网络流","最大权闭合图"],"createdAt":"Jul 24, 2016"},{"title":"2016 多校第 2 场","slug":"/post/acm/contest/multi-university-training/2016/2","tags":["acm","训练赛","数据结构","解题报告"],"createdAt":"Jul 22, 2016"},{"title":"二分图","slug":"/post/algorithm/graph/bipartite-graph","tags":["算法","图论","二分图","学习笔记"],"createdAt":"Jul 17, 2016"},{"title":"伸展树专题","slug":"/post/data-structure/bbst/splay","tags":["acm","Splay","解题报告","专题训练"],"createdAt":"Jul 03, 2016"},{"title":"CCF 2015-09 最佳文章 解题报告","slug":"/post/acm/oj/ccf/2015/09/E","tags":["acm","Aho-Corasick 自动机","矩阵快速幂","动态规划","解题报告"],"createdAt":"Jun 26, 2016"},{"title":"编译原理-语法制导翻译实现计算器","slug":"/post/fundamentals-of-compiling/exercise","tags":["编译原理","语法制导翻译","计算机"],"createdAt":"Jun 23, 2016"},{"title":"编译原理-语法分析","slug":"/post/fundamentals-of-compiling/grammar","tags":["编译原理","语法分析","计算机"],"createdAt":"Jun 18, 2016"},{"title":"百度之星 2016 解题报告","slug":"/post/acm/contest/baiduzhixing/2016","tags":["acm","递推","状态压缩","动态规划","字典树","解题报告"],"createdAt":"Jun 03, 2016"},{"title":"数论基础之原根","slug":"/post/math/number-theory/原根","tags":["math","数论","原根"],"createdAt":"May 16, 2016"},{"title":"数论基础之欧拉函数","slug":"/post/math/number-theory/欧拉函数","tags":["math","数论","既约剩余系","欧拉函数"],"createdAt":"May 10, 2016"},{"title":"数论基础之筛法","slug":"/post/math/number-theory/sieve","tags":["math","数论","素数","欧拉函数","线性筛"],"createdAt":"May 06, 2016"},{"title":"数论基础之模方程初步","slug":"/post/math/number-theory/模方程/basic","tags":["math","数论","扩展欧几里得算法","中国剩余定理","Baby Step Gaint Step"],"createdAt":"May 04, 2016"},{"title":"HDU-5576 Expection of String 解题报告（原 2015-上海区域赛-E)","slug":"/post/acm/oj/hdu/5576","tags":["acm","动态规划","解题报告"],"createdAt":"Apr 24, 2016"},{"title":"树链剖分","slug":"/post/algorithm/tree/tcs","tags":["acm","算法","树链剖分"],"createdAt":"Apr 23, 2016"},{"title":"51nod-1462 数据结构 -- 解题报告","slug":"/post/acm/oj/51nod/1462","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"createdAt":"Apr 23, 2016"},{"title":"小球放盒模型","slug":"/post/math/combinatorial/小球放盒模型","tags":["math","组合数学"],"createdAt":"Apr 22, 2016"},{"title":"最长回文子串 Manacher 算法","slug":"/post/algorithm/string/manacher","tags":["算法","字符串","回文串","manacher"],"createdAt":"Apr 18, 2016"},{"title":"POJ-1324 Holedox Moving 解题报告","slug":"/post/acm/oj/poj/1324","tags":["acm","bfs","图论","状态压缩","解题报告"],"createdAt":"Apr 13, 2016"},{"title":"HDU-5574 Colorful Tree 解题报告（原 2015-上海区域赛-C）","slug":"/post/acm/oj/hdu/5574","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"createdAt":"Apr 12, 2016"},{"title":"快速傅里叶变换和雷德算法","slug":"/post/math/number-theory/fft","tags":["acm","大数乘法","fft","快速傅里叶变换"],"createdAt":"Apr 10, 2016"},{"title":"HDU-5306 Gorgeous Sequence 解题报告","slug":"/post/acm/oj/hdu/5306","tags":["acm","数据结构","线段树","解题报告"],"createdAt":"Apr 09, 2016"}]},"storageKey":"@kyokuya/react-layout-post/#page","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(post)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}]}]
f:["quiz","经典问题","约瑟夫环"]
2:["$","$Le",null,{"data":{"title":"约瑟夫环问题","titleAst":{"type":"paragraph","children":[{"type":"text","value":"约瑟夫环问题"}]},"slug":"/post/quiz/classical/Josephus-ring","createdAt":"Jul 16, 2021","updatedAt":"Nov 03, 2021","timeToRead":"08min 21s","tags":"$f","categories":[],"ast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"经典约瑟夫环问题"}],"identifier":"heading-经典约瑟夫环问题"},{"type":"paragraph","children":[{"type":"text","value":"有 "},{"type":"inlineMath","value":"N"},{"type":"text","value":" 个人围坐成一圈，任选某个人将其编号为 "},{"type":"inlineMath","value":"0"},{"type":"text","value":"，其右手边的人编号为 "},{"type":"inlineMath","value":"1"},{"type":"text","value":"，以此类推，将全部 "},{"type":"inlineMath","value":"N"},{"type":"text","value":" 个人进行唯一编号。由编号为 "},{"type":"inlineMath","value":"0"},{"type":"text","value":" 的人从 "},{"type":"inlineMath","value":"1"},{"type":"text","value":" 开始报数，其右手边的人报下一个数，以此类推。报到 "},{"type":"inlineMath","value":"M"},{"type":"text","value":" 的人起身离开，TA 右手边的人又从 "},{"type":"inlineMath","value":"1"},{"type":"text","value":" 开始报数，直到所有人起身离开，求最后一个起身离开的人的编号。"}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"暴力法"}],"identifier":"heading-暴力法"},{"type":"paragraph","children":[{"type":"text","value":"使用链表进行模拟，起身离开的复杂度为 "},{"type":"inlineMath","value":"O(1)"},{"type":"text","value":"，报数的复杂度为 "},{"type":"inlineMath","value":"O(M)"},{"type":"text","value":"，故总复杂度为："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"时间复杂度： "},{"type":"inlineMath","value":"O(M \\cdot N)"}]},{"type":"listItem","children":[{"type":"text","value":"额外空间复杂度： "},{"type":"inlineMath","value":"O(N)"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"树状数组"}],"identifier":"heading-树状数组"},{"type":"paragraph","children":[{"type":"text","value":"用一个数组 "},{"type":"inlineMath","value":"A"},{"type":"text","value":" 表示这 "},{"type":"inlineMath","value":"N"},{"type":"text","value":" 个人当前的游戏状态："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"inlineMath","value":"A[i] = 1"},{"type":"text","value":": 编号为 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 的人还坐在那里"}]},{"type":"listItem","children":[{"type":"inlineMath","value":"A[i] = 0"},{"type":"text","value":": 编号为 "},{"type":"inlineMath","value":"0"},{"type":"text","value":" 的人已经起身离开"}]}]},{"type":"paragraph","children":[{"type":"text","value":"则可以使用树状数组维护前缀和"},{"type":"footnoteReference","label":"1","identifier":"footnote-1"},{"type":"text","value":"，报数相当于快速找到某个指定位置开始的区间 "},{"type":"inlineMath","value":"[l,r]"},{"type":"text","value":"，使得\n"},{"type":"inlineMath","value":"\\displaystyle \\sum_{i=l}^r A[i] = M"},{"type":"text","value":"."}]},{"type":"paragraph","children":[{"type":"text","value":"在前期 "},{"type":"inlineMath","value":"A"},{"type":"text","value":" 数组中 "},{"type":"inlineMath","value":"1"},{"type":"text","value":" 的密度浓的时候，单次报数的复杂度接近于 "},{"type":"inlineMath","value":"O(\\log N)"},{"type":"text","value":" （即少数几次树状数组的查询）；但在游戏后期，"},{"type":"inlineMath","value":"A"},{"type":"text","value":" 数组中密度低的时候，单次报数的复杂度可能退化为 "},{"type":"inlineMath","value":"O(M \\log N)"},{"type":"text","value":" ，故总复杂度为："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"时间复杂度（宽松上界）： "},{"type":"inlineMath","value":"O(M \\cdot \\min\\{N, M\\} \\cdot \\log N)"}]},{"type":"listItem","children":[{"type":"text","value":"额外空间复杂度： "},{"type":"inlineMath","value":"O(N)"}]}]},{"type":"code","lang":"typescript","meta":"{15} title=\"01.ts\" sourcefile=\"./01.ts\" collapsed linenos","value":"import { type BinarySearchTree, createBinarySearchTree } from './bit'\n\nexport function lastRemaining(N: number, M: number): number {\n  if (N <= 0) return -1\n  if (N === 1) return 1\n\n  const bit: BinarySearchTree = createBinarySearchTree(N)\n  for (let i = 1; i <= N; ++i) bit.add(i, 1)\n\n  let p = 0\n  for (let n = N; n > 0; --n) {\n    let total = M % n\n    for (total = total === 0 ? M : total; total > 0; ) {\n      const _end = Math.min(N, p + total)\n      total -= bit.sum(_end) - bit.sum(p)\n      p = _end === N ? 0 : _end\n    }\n    bit.add(p === 0 ? N : p, -1)\n  }\n  return (p + N - 1) % N\n}\n"},{"type":"heading","depth":3,"children":[{"type":"text","value":"树状数组 + 二分"}],"identifier":"heading-树状数组-+-二分"},{"type":"paragraph","children":[{"type":"text","value":"为了快速跳过中间的 "},{"type":"inlineMath","value":"0"},{"type":"text","value":"，我们可以通过二分的方式快速确定下一次树状数组需要查询的位置，则单次报数的复杂度为 "},{"type":"inlineMath","value":"O(\\log^2 N)"},{"type":"text","value":"，总复杂度为："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"时间复杂度： "},{"type":"inlineMath","value":"O(N \\cdot \\log^2 N)"}]},{"type":"listItem","children":[{"type":"text","value":"额外空间复杂度： "},{"type":"inlineMath","value":"O(N)"}]}]},{"type":"paragraph","children":[{"type":"text","value":"下面的代码中假定当三分之一的人起身离开后，"},{"type":"inlineMath","value":"A"},{"type":"text","value":" 数组中 "},{"type":"inlineMath","value":"1"},{"type":"text","value":" 密度足够多，即阈值为\n"},{"type":"inlineMath","value":"\\frac{2N}{3}"},{"type":"text","value":"，（可以自己调试阈值）。当人数少于阈值后，开始使用二分确定下一步查询的位置。实践证明优化后的代码比优化前快了一倍多。"}]},{"type":"code","lang":"typescript","meta":"{11,17-28} title=\"02.ts\" sourcefile=\"./02.ts\" collapsed linenos","value":"import { type BinarySearchTree, createBinarySearchTree } from './bit'\n\nexport function lastRemaining(N: number, M: number): number {\n  if (N <= 0) return -1\n  if (N === 1) return 1\n\n  const bit: BinarySearchTree = createBinarySearchTree(N)\n  for (let i = 1; i <= N; ++i) bit.add(i, 1)\n\n  let p = 0\n  for (let n = N, threshold = Math.round((N * 2) / 3); n > 0; --n) {\n    let total = M % n\n    for (total = total === 0 ? M : total; total > 0; ) {\n      let _end = p + total\n      const target = total + bit.sum(p)\n\n      if (n < threshold) {\n        if (_end < N) {\n          let lft = _end\n          let rht = N + 1\n          while (lft < rht) {\n            const mid = (lft + rht) >> 1\n            if (bit.sum(mid) < target) lft = mid + 1\n            rht = mid\n          }\n          _end = lft < N ? lft : N\n        }\n      }\n\n      if (_end > N) _end = N\n      total = target - bit.sum(_end)\n      p = _end === N ? 0 : _end\n    }\n    bit.add(p === 0 ? N : p, -1)\n  }\n  return (p + N - 1) % N\n}\n"},{"type":"heading","depth":3,"children":[{"type":"text","value":"递推"}],"identifier":"heading-递推"},{"type":"paragraph","children":[{"type":"text","value":"考虑这样一种操作：每次有人起身离开时，将TA右手边的人重新编号为 "},{"type":"inlineMath","value":"0"},{"type":"text","value":"，右手边的右手边的人重新编号为 "},{"type":"inlineMath","value":"1"},{"type":"text","value":"，……，以此类推。"}]},{"type":"paragraph","children":[{"type":"text","value":"为方便表述，不妨记圈中剩余 "},{"type":"inlineMath","value":"n"},{"type":"text","value":" 个人时，即将起身离开的人在此轮中的编号为 "},{"type":"inlineMath","value":"h(n)"},{"type":"text","value":"，在上一轮的编号为 "},{"type":"inlineMath","value":"h'(n)"},{"type":"text","value":"。根据游戏规则，不难有：当某轮游戏中只剩下 "},{"type":"inlineMath","value":"n"},{"type":"text","value":" 个人时，即将起身离开的人在这一轮中的编号为 "},{"type":"inlineMath","value":"h(n) = M - 1 \\mod n"},{"type":"text","value":"；下一轮进行重新编号时，将此时编号为 "},{"type":"inlineMath","value":"h(n) + k \\mod n"},{"type":"text","value":" （其中 "},{"type":"inlineMath","value":"1 \\leqslant k < n"},{"type":"text","value":"）的人重新编号为 "},{"type":"inlineMath","value":"k-1"},{"type":"text","value":"。特别地，当 "},{"type":"inlineMath","value":"k=M"},{"type":"text","value":" 时，根据映射关系有："}]},{"type":"math","value":"h(n) + M \\mod n \\equiv (M - 1) \\mod (n - 1) \\quad\\rightarrow\\quad h(n-1)\n"},{"type":"paragraph","children":[{"type":"text","value":"即 "},{"type":"inlineMath","value":"h'(n-1) \\equiv h(n) + M \\mod n"},{"type":"text","value":"，也就是：游戏进行到剩余 "},{"type":"inlineMath","value":"n-1"},{"type":"text","value":" 个人时，即将离开的人其在上一轮的编号为当前编号 "},{"type":"inlineMath","value":"+M"},{"type":"text","value":" 再对 "},{"type":"inlineMath","value":"n"},{"type":"text","value":" 取模。而当游戏仅剩下一个人时，此时离开的人即为原问题中最后一个离开的人，也就是我们只要求出 "},{"type":"inlineMath","value":"h(1)"},{"type":"text","value":" 在游戏初始时的编号就可以了。"}]},{"type":"paragraph","children":[{"type":"text","value":"不妨设 "},{"type":"inlineMath","value":"f(n)"},{"type":"text","value":" 表示原问题中最后一个起身离开的人在剩下 "},{"type":"inlineMath","value":"n"},{"type":"text","value":" 个人时那一轮游戏中的编号，则所求答案为 "},{"type":"inlineMath","value":"f(N)"},{"type":"text","value":"。根据上述分析不难得到递推方程："}]},{"type":"math","value":"  f(n) = \\left\\lbrace \\begin{aligned}\n    &0, &n = 1\\\\ \n    &f(n - 1) + M \\mod n, &n > 1\\\\\n  \\end{aligned}\\right.\n"},{"type":"paragraph","children":[{"type":"text","value":"由 "},{"type":"inlineMath","value":"f"},{"type":"text","value":" 的定义可以看出来，递推法求解约瑟夫环问题可以在 "},{"type":"inlineMath","value":"O(N)"},{"type":"text","value":" 的复杂度下求出最后一个离开的人的编号，但不能求出整个游戏中的离场顺序。若要求出倒数第二个人离场的人的编号，只要改一下递推方程的初始条件就好了："}]},{"type":"math","value":"  f(n) = \\left\\lbrace \\begin{aligned}\n    &M + 1 \\mod n, &n = 2\\\\ \n    &f(n - 1) + M \\mod n, &n > 1\\\\\n  \\end{aligned}\\right.\n"},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"递推写法"}]},{"type":"list","ordered":false,"marker":45,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"时间复杂度： "},{"type":"inlineMath","value":"O(N)"}]},{"type":"listItem","children":[{"type":"text","value":"额外空间复杂度： "},{"type":"inlineMath","value":"O(1)"}]}]},{"type":"code","lang":"typescript","meta":"{3,4} title=\"03.ts\" sourcefile=\"./03.ts\" collapsed linenos","value":"export function lastRemaining(N: number, M: number): number {\n  if (N <= 0) return -1\n  let ans = 0\n  for (let n = 2; n <= N; ++n) ans = (ans + M) % n\n  return ans\n}\n"}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"递归写法"}]},{"type":"list","ordered":false,"marker":45,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"时间复杂度： "},{"type":"inlineMath","value":"O(N)"}]},{"type":"listItem","children":[{"type":"text","value":"额外空间复杂度： "},{"type":"inlineMath","value":"O(N)"}]}]},{"type":"code","lang":"typescript","meta":"{6,8} title=\"04.ts\" sourcefile=\"./04.ts\" collapsed linenos","value":"export function lastRemaining(N: number, M: number): number {\n  if (N <= 0) return -1\n  return round(N)\n\n  function round(n: number): number {\n    if (n === 1) return 0\n    const y = round(n - 1)\n    return (y + M) % n\n  }\n}\n"}]}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"不定步长的约瑟夫问题"}],"identifier":"heading-不定步长的约瑟夫问题"},{"type":"paragraph","children":[{"type":"text","value":"在经典约瑟夫问题的基础上，每次起身离开的人报的的数不同。其中第 "},{"type":"inlineMath","value":"i"},{"type":"text","value":" 个起身的人需要报到的数为 "},{"type":"inlineMath","value":"M_i"},{"type":"text","value":"。"}]},{"type":"paragraph","children":[{"type":"text","value":"不难发现，前面提到的 "},{"type":"linkReference","identifier":"经典-暴力法","label":"经典-暴力法","referenceType":"full","children":[{"type":"text","value":"暴力法"}]},{"type":"text","value":"、"},{"type":"linkReference","identifier":"经典-树状数组","label":"经典-树状数组","referenceType":"full","children":[{"type":"text","value":"前缀和-树状数组"}]},{"type":"text","value":" 算法仍然适用。这里仅就 "},{"type":"linkReference","identifier":"经典-递推","label":"经典-递推","referenceType":"full","children":[{"type":"text","value":"递推法"}]},{"type":"text","value":" 进行讨论。"}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"递推"}],"identifier":"heading-递推-2"},{"type":"paragraph","children":[{"type":"text","value":"对比游戏规则，不难想到上文中提到的映射关系"}]},{"type":"math","value":"h(n) + M \\mod n \\equiv (M - 1) \\mod (n - 1) \\quad\\rightarrow\\quad h(n-1)\n"},{"type":"paragraph","children":[{"type":"text","value":"需要更新为"}]},{"type":"math","value":"h(n) + M_{N-n} \\mod n \\equiv (M_{N-n} - 1) \\mod (n - 1) \\quad\\rightarrow\\quad h(n-1)\n"},{"type":"paragraph","children":[{"type":"text","value":"则不难得到新的递推方程："}]},{"type":"math","value":"  f(n) = \\left\\lbrace \\begin{aligned}\n    &0, &n = 1\\\\ \n    &f(n - 1) + M_{N-n} \\mod n, &n > 1\\\\\n  \\end{aligned}\\right.\n"},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"递推写法"}]},{"type":"list","ordered":false,"marker":45,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"时间复杂度： "},{"type":"inlineMath","value":"O(N)"}]},{"type":"listItem","children":[{"type":"text","value":"额外空间复杂度： "},{"type":"inlineMath","value":"O(1)"}]}]},{"type":"code","lang":"typescript","meta":"{3,4} title=\"05.ts\" sourcefile=\"./05.ts\" collapsed linenos","value":"export function lastRemaining(N: number, M: number[]): number {\n  if (N <= 0) return -1\n  let ans = 0\n  for (let n = 2; n <= N; ++n) ans = (ans + M[N - n]) % n\n  return ans\n}\n"}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"递归写法"}]},{"type":"list","ordered":false,"marker":45,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"时间复杂度： "},{"type":"inlineMath","value":"O(N)"}]},{"type":"listItem","children":[{"type":"text","value":"额外空间复杂度： "},{"type":"inlineMath","value":"O(N)"}]}]},{"type":"code","lang":"typescript","meta":"{6,8} title=\"06.ts\" sourcefile=\"./06.ts\" collapsed linenos","value":"export function lastRemaining(N: number, M: number[]): number {\n  if (N <= 0) return -1\n  return round(N)\n\n  function round(n: number): number {\n    if (n === 1) return 0\n    const y = round(n - 1)\n    return (y + M[N - n]) % n\n  }\n}\n"}]}]}]},"toc":{"children":[{"depth":2,"identifier":"heading-经典约瑟夫环问题","contents":[{"type":"text","value":"经典约瑟夫环问题"}],"children":[{"depth":3,"identifier":"heading-暴力法","contents":[{"type":"text","value":"暴力法"}],"children":[]},{"depth":3,"identifier":"heading-树状数组","contents":[{"type":"text","value":"树状数组"}],"children":[]},{"depth":3,"identifier":"heading-树状数组-+-二分","contents":[{"type":"text","value":"树状数组 + 二分"}],"children":[]},{"depth":3,"identifier":"heading-递推","contents":[{"type":"text","value":"递推"}],"children":[]}]},{"depth":2,"identifier":"heading-不定步长的约瑟夫问题","contents":[{"type":"text","value":"不定步长的约瑟夫问题"}],"children":[{"depth":3,"identifier":"heading-递推-2","contents":[{"type":"text","value":"递推"}],"children":[]}]}]},"ecmaImports":[],"definitionMap":{"经典-暴力法":{"type":"definition","identifier":"经典-暴力法","label":"经典-暴力法","url":"#heading-%E6%9A%B4%E5%8A%9B%E6%B3%95"},"经典-树状数组":{"type":"definition","identifier":"经典-树状数组","label":"经典-树状数组","url":"#heading-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84"},"经典-递推":{"type":"definition","identifier":"经典-递推","label":"经典-递推","url":"#heading-%E9%80%92%E6%8E%A8"}},"footnoteDefinitionMap":{"footnote-1":{"type":"footnoteDefinition","identifier":"footnote-1","label":"1","children":[{"type":"paragraph","children":[{"type":"text","value":"为了方便树状数组操作，处理时将所有人的编号 "},{"type":"inlineMath","value":"+1"},{"type":"text","value":"，在计算答案时再 "},{"type":"inlineMath","value":"-1"}]}]}},"images":[],"paginationUrl":"/posts/2","prev":{"title":"剑指offer 解题报告","slug":"/post/acm/oj/nowcoder/jz-offer"},"next":{"title":"统计区间内的线段","slug":"/post/quiz/scanning-line/segments"},"aplayerOptions":null}}]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"约瑟夫环问题 | guanghechen"}],["$","meta","3",{"name":"description","content":"约瑟夫环问题"}],["$","meta","4",{"name":"application-name","content":"guanghechen"}],["$","link","5",{"rel":"author","href":"https://github.com/guanghechen"}],["$","meta","6",{"name":"author","content":"光和尘"}],["$","link","7",{"rel":"icon","href":"/favicon.png"}],["$","meta","8",{"name":"next-size-adjust"}]]
1:null
