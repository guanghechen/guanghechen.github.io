{"pageProps":{"title":"百度之星 2016 解题报告","titleAst":{"type":"paragraph","children":[{"type":"text","value":"百度之星 2016 解题报告"}]},"description":"百度之星 2016 解题报告","slug":"/post/acm/contest/baiduzhixing/2016","createdAt":"Jun 03, 2016","updatedAt":"Nov 03, 2021","timeToRead":"10min 57s","tags":["acm","递推","状态压缩","动态规划","字典树","解题报告"],"categories":[],"ast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"1002 K 个连通块"}],"identifier":"heading-1002-k-个连通块"},{"type":"paragraph","children":[{"type":"link","url":"http://acm.hdu.edu.cn/showproblem.php?pid=5713","children":[{"type":"text","value":"题目链接"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"题目简析"}],"identifier":"heading-题目简析"},{"type":"paragraph","children":[{"type":"text","value":"假入 "},{"type":"inlineMath","value":"N"},{"type":"text","value":" 个点依次为："},{"type":"inlineMath","value":"\\displaystyle V=\\left\\lbrace A_0,A_1,\\cdots,A_{N-1} \\right\\rbrace"},{"type":"text","value":".\n不难想到状态压缩。令 "},{"type":"inlineMath","value":"dp(k, s)"},{"type":"text","value":" 表示点集 "},{"type":"inlineMath","value":"\\displaystyle V_s= \\left\\lbrace A_i \\;\\Bigg|\\; \\left\\lfloor \\frac{s}{2^i} \\right\\rfloor \\equiv 1 \\mod 2 \\right\\rbrace"},{"type":"text","value":"\n恰好构成 "},{"type":"inlineMath","value":"k"},{"type":"text","value":" 个连通块的方案数。要注意的是，点对 "},{"type":"inlineMath","value":"\\displaystyle \\big\\lbrace (u,v) \\;\\big|\\; u \\in V, v\\in V_s \\big\\rbrace"},{"type":"text","value":"\n之间的连边都要抹去，因为 "},{"type":"inlineMath","value":"V_s"},{"type":"text","value":" 中的点首先要和不在 "},{"type":"inlineMath","value":"V_s"},{"type":"text","value":" 中的断开“联系”，才能得到独立的 "},{"type":"inlineMath","value":"k"},{"type":"text","value":" 连通块，这样才能正确递推。"}]},{"type":"thematicBreak"},{"type":"heading","depth":3,"children":[{"type":"text","value":"如何求 "},{"type":"inlineMath","value":"dp(1,s)"}],"identifier":"heading-如何求-dp-1-s"},{"type":"paragraph","children":[{"type":"text","value":"为方便叙述，记 "},{"type":"inlineMath","value":"f(s) = dp(1,s)"},{"type":"text","value":"， "},{"type":"inlineMath","value":"\\displaystyle s=2^{j_1}+2^{j_2}+\\cdots+2^{j_t}"},{"type":"text","value":"，故其所代表点集为 "},{"type":"inlineMath","value":"\\displaystyle V_s=\\big\\lbrace A_{j_1},A_{j_2},\\cdots,A_{j_t} \\big\\rbrace"},{"type":"text","value":",\n"},{"type":"inlineMath","value":"(0\\leqslant j_1 < j_2 < \\cdots < j_t \\leqslant N-1)"},{"type":"text","value":". 令 "},{"type":"inlineMath","value":"E(s)"},{"type":"text","value":" 表示 "},{"type":"inlineMath","value":"V_s"},{"type":"text","value":" 中的互不相同的两点之间的边的总数；则"}]},{"type":"math","value":"f(s) = 2^{E(s)} - \\sum_{A_{j_1} \\in V_{s'},~V_{s'} \\in \\lbrace V_s \\rbrace} f(s') \\times 2^{E(s-s')}\n"},{"type":"paragraph","children":[{"type":"text","value":"证明并不难，为使 "},{"type":"inlineMath","value":"V_s"},{"type":"text","value":" 为一个独立的连通块，则需要考虑两个部分："}]},{"type":"list","ordered":true,"orderType":"1","start":1,"marker":46,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"inlineMath","value":"V_s"},{"type":"text","value":" 中的点与不在 "},{"type":"inlineMath","value":"V_s"},{"type":"text","value":" 中的点之间不连通；因此，我们仅需考虑 "},{"type":"inlineMath","value":"V_s"},{"type":"text","value":" 中两两之间的边，去边的总方案为 "},{"type":"inlineMath","value":"2^{E(s)}"},{"type":"text","value":"."}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"inlineMath","value":"V_s"},{"type":"text","value":" 内部的点两两连通；可以反过来考虑，减去所有使得内部不连通的情况。将点集\n"},{"type":"inlineMath","value":"V_s"},{"type":"text","value":" 分成 "},{"type":"inlineMath","value":"V_{s'}"},{"type":"text","value":" 和 "},{"type":"inlineMath","value":"V_{s''}"},{"type":"text","value":" 两部分，其中 "},{"type":"inlineMath","value":"V_{s'}+V_{s''}=V_s"},{"type":"text","value":" 且\n"},{"type":"inlineMath","value":"A_{j_1} \\in V_{s'}"},{"type":"text","value":"，且 "},{"type":"inlineMath","value":"V_{s'}"},{"type":"text","value":" 构成一个独立的连通块。对于这一划分方案，共有 "},{"type":"inlineMath","value":"f(s') \\times 2^{E(s-s')}"},{"type":"text","value":" 种方案使得 "},{"type":"inlineMath","value":"V_{s'}"},{"type":"text","value":" 和 "},{"type":"inlineMath","value":"V_{s''}"},{"type":"text","value":" 之间不连通。因为 "},{"type":"inlineMath","value":"V_{s'}"},{"type":"text","value":" 是一个独立的连通块，所以 "},{"type":"inlineMath","value":"V_{s'}"},{"type":"text","value":" 和 "},{"type":"inlineMath","value":"V_{s''}"},{"type":"text","value":" 之间的边必须全断，则 "},{"type":"inlineMath","value":"V_{s''}"},{"type":"text","value":" 中的边可以自由选择了。"}]}]}]},{"type":"thematicBreak"},{"type":"heading","depth":3,"children":[{"type":"text","value":"如何递推"}],"identifier":"heading-如何递推"},{"type":"paragraph","children":[{"type":"text","value":"不难想到递推方程 "},{"type":"inlineMath","value":"\\displaystyle dp(k+1,s) = \\sum_{V_{s'} \\in V_s} dp(k,s') \\times dp(1, s-s')"},{"type":"text","value":".\n但是很遗憾，它是错的："}]},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"考虑 "},{"type":"inlineMath","value":"k=3"},{"type":"text","value":" 的情况，如果 "},{"type":"inlineMath","value":"V_s=\\big\\lbrace A_1, A_2,A_3 \\big\\rbrace"},{"type":"text","value":"，则 "},{"type":"inlineMath","value":"V_{s'}=\\big\\lbrace A_1,A_2 \\big\\rbrace"},{"type":"text","value":" 与 "},{"type":"inlineMath","value":"V_{s'}=\\big\\lbrace A_1, A_3 \\big\\rbrace"},{"type":"text","value":"\n所做的贡献是完全重复的。"}]}]},{"type":"paragraph","children":[{"type":"text","value":"去掉重复的贡献，我们得到新的递推式"}]},{"type":"math","value":"dp(k+1, s) = \\sum_{A_{j_1} \\notin V_{s'},~V_{s'} \\in V_s} dp(k, s') \\times dp(1, s-s')\n"},{"type":"thematicBreak"},{"type":"heading","depth":3,"children":[{"type":"text","value":"进一步分析"}],"identifier":"heading-进一步分析"},{"type":"paragraph","children":[{"type":"text","value":"上述分析足以通过此题，我跑了 858MS。但还有改进的余地。先改造一下递推式，记 。"}]},{"type":"math","value":"\\begin{align}\n  V'_s&=V-V_{s'}=\\big\\lbrace A_{p_1},A_{p_2},\\cdots,A_{p_q} \\big\\rbrace\\\\\\\\\n  dp(k+1, s) &= \\sum_{A_{j_1} \\in V_{s'},~V_{s'} \\in V_s,~A_{p_1} \\in V_{s-s'}} dp(k, s') \\times dp(1, s-s')\n\\end{align}\n"},{"type":"paragraph","children":[{"type":"text","value":"上述递推式用刷表法实现即可避免 "},{"type":"inlineMath","value":"A_{p_1} \\in V_{s-s'}"},{"type":"text","value":" 的判断。注意到我们要的终态是 "},{"type":"inlineMath","value":"dp(K, 2^N-1)"},{"type":"text","value":"，所以，我们可以只计算满足 "},{"type":"inlineMath","value":"A_1 \\in V_s"},{"type":"text","value":" 的状态 "},{"type":"inlineMath","value":"dp(K, s)"},{"type":"text","value":"，理由是 "},{"type":"inlineMath","value":"A_1 \\in V_{s'}"},{"type":"text","value":"，即这条递推到 "},{"type":"inlineMath","value":"dp(K, s)"},{"type":"text","value":" 的递推链都可以被计算到。当然，也可以采取记忆化搜索。跑了 124MS 左右。"}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"程序实现"}],"identifier":"heading-程序实现"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"空间复杂度 "},{"type":"inlineMath","value":"O(2^N)"}]},{"type":"listItem","children":[{"type":"text","value":"时间复杂度 "},{"type":"inlineMath","value":"O(N^2 \\cdot 2^N+K \\cdot 3^N)"}]}]},{"type":"code","lang":"cpp","meta":"title=\"1002.cpp\" sourcefile=\"./1002.cpp\" maxlines=\"20\" collapsed linenos","value":"#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\nusing namespace std;\n\ntypedef long long LL;\nconst int MAXN = 15;\nconst int MOD = 1000000000 + 9;\n\nint G[MAXN][MAXN];\nint p2[MAXN * MAXN];\nint l2[1 << MAXN];\nint dp[2][1 << MAXN];\nint f[1 << MAXN];\nint c[1 << MAXN];\n\ninline int lowbit(int& x) {\n  return x & -x;\n}\n\ninline void add(int& x, int y) {\n  x += y;\n  if (x >= MOD) x -= MOD;\n}\n\ninline void sub(int& x, int y) {\n  x -= y;\n  if (x < 0) x += MOD;\n}\n\nint calc(int N, int K) {\n  const int all = (1 << N) - 1;\n  int now = 0, last = 1;\n\n  for (int s = 0; s <= all; s += 2) dp[0][s] = 0;\n  for (int s = 1; s <= all; s += 2) dp[0][s] = f[s];\n  for (int k = 1; k < K; ++k) {\n    swap(now, last);\n    memset(dp[now], 0, sizeof dp[now]);\n    for (int s = 1; s <= all; ++s) {\n      if (!dp[last][s]) continue;\n      int r = all ^ s;\n      int x = lowbit(r);\n      r ^= x;\n\n      for (int t = r; t; t = (t - 1) & r)\n        add(dp[now][s | x | t], (LL)dp[last][s] * f[t | x] % MOD);\n      add(dp[now][s | x], (LL)dp[last][s] * f[x] % MOD);\n    }\n  }\n  return dp[now][all];\n}\n\nvoid solve(int N, int K, int e) {\n  const int all = (1 << N) - 1;\n  static int vi[20];\n  int siz, cnt;\n\n  for (int s = 1; s <= all; ++s) {\n    siz = cnt = 0;\n    for (int u = s, v; u; u ^= v) vi[siz++] = l2[v = lowbit(u)];\n    for (int u = 0; u < siz; ++u)\n      for (int v = u + 1; v < siz; ++v) cnt += G[vi[u]][vi[v]];\n    c[s] = p2[cnt];\n  }\n\n  memcpy(f, c, sizeof f);\n\n  for (int s = 1; s <= all; ++s) {\n    int ls = lowbit(s);\n    if (ls == s) continue;\n    int r = s ^ ls;\n    for (int t = (r - 1) & r; t; t = (t - 1) & r)\n      sub(f[s], (LL)f[t | ls] * c[r ^ t] % MOD);\n    sub(f[s], (LL)f[ls] * c[r] % MOD);\n  }\n\n  int ans = (LL)calc(N, K) * p2[e] % MOD;\n  printf(\"%d\\n\", ans);\n}\n\nvoid work() {\n  p2[0] = 1;\n  for (int i = 1; i < MAXN * MAXN; ++i) p2[i] = p2[i - 1] * 2 % MOD;\n  for (int i = 0; i < MAXN; ++i) l2[1 << i] = i;\n\n  int T_T, N, M, K, e, u, v;\n  scanf(\"%d\", &T_T);\n  for (int kase = 1; kase <= T_T; ++kase) {\n    printf(\"Case #%d:\\n\", kase);\n    memset(G, 0, sizeof G);\n    e = 0;\n\n    scanf(\"%d%d%d\", &N, &M, &K);\n    for (int i = 0; i < M; ++i) {\n      scanf(\"%d%d\", &u, &v);\n      if (u > v) swap(u, v);\n      if (u != v)\n        ++G[u - 1][v - 1];\n      else\n        ++e;\n    }\n\n    solve(N, K, e);\n  }\n}\n\nint main() {\n  work();\n  return 0;\n}\n"},{"type":"heading","depth":2,"children":[{"type":"text","value":"1004 XOR 游戏"}],"identifier":"heading-1004-xor-游戏"},{"type":"paragraph","children":[{"type":"link","url":"http://acm.hdu.edu.cn/showproblem.php?pid=5715","children":[{"type":"text","value":"题目链接"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"题目简析"}],"identifier":"heading-题目简析-2"},{"type":"paragraph","children":[{"type":"text","value":"设 "},{"type":"inlineMath","value":"dp(k, n)"},{"type":"text","value":" 表示将前 "},{"type":"inlineMath","value":"n"},{"type":"text","value":" 个数划分成 "},{"type":"inlineMath","value":"k"},{"type":"text","value":" 组的合法方案的"},{"type":"strong","children":[{"type":"text","value":"分组异或和最小值"}]},{"type":"text","value":"的最大值；并设 "},{"type":"inlineMath","value":"A_n"},{"type":"text","value":" 表示前 "},{"type":"inlineMath","value":"n"},{"type":"text","value":" 个数的异或和。不难得到递推方程："}]},{"type":"math","value":"  dp(k+1, n) = \\max \\Big\\lbrace \\min \\big\\lbrace dp(k, n-i),\n  A_n \\oplus A_{n-i} \\big\\rbrace \\Big\\rbrace, 1\\leqslant i\\leqslant L\n"},{"type":"paragraph","children":[{"type":"text","value":"很可惜，这个方程的时间复杂度是 "},{"type":"inlineMath","value":"O(M\\cdot N\\cdot L)"},{"type":"text","value":" 的，难以承受。如何在更短的时间内求出 "},{"type":"inlineMath","value":"dp(k+1, n)"},{"type":"text","value":" 呢？"}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"算法一"}],"identifier":"heading-算法一"},{"type":"paragraph","children":[{"type":"text","value":"先假设 "},{"type":"inlineMath","value":"\\big\\lbrace A_{n-L},A_{n-L+1},\\cdots,A_{n-1} \\big\\rbrace"},{"type":"text","value":" 两两不相等；并将其二进制表示插入字典树中。字典树中表示 "},{"type":"inlineMath","value":"A_i"},{"type":"text","value":" 的链，其叶子节点的权值为\n"},{"type":"inlineMath","value":"dp(k, i)"},{"type":"text","value":"，非叶子节点权值为所有子孙节点权值最大值。那么，计算 "},{"type":"inlineMath","value":"dp(k+1, n)"},{"type":"text","value":" 时，仅需在用字典树贪心求 "},{"type":"inlineMath","value":"A_n"},{"type":"text","value":" 最大异或和的基础上，将节点的权值作为选择贪心策略的依据。具体地："}]},{"type":"paragraph","children":[{"type":"text","value":"设当前在字典树中第 "},{"type":"inlineMath","value":"h"},{"type":"text","value":" 层(考虑到题目的数据范围，从 "},{"type":"inlineMath","value":"31"},{"type":"text","value":" 开始递减计数，所有叶子节点都在第 "},{"type":"inlineMath","value":"0"},{"type":"text","value":" 层)：记在前面 "},{"type":"inlineMath","value":"31-h"},{"type":"text","value":" 层中，选择的边边权依次为："},{"type":"inlineMath","value":"a_{30},a_{29},\\cdots,a_{h}"},{"type":"text","value":".\n并记："}]},{"type":"math","value":"  \\begin{align}\n    x&=A_n=b_{30}\\cdot 2^{30}+b_{29}\\cdot 2^{29}+\\cdots+b_0 2^{0}\\\\\n    y&=(a_{30} \\oplus b_{30})\\cdot 2^{30}+(a_{29} \\oplus b_{29})\\cdot 2^{29}+\\cdots+(a_{h} \\oplus b_{h})\\cdot 2^h\n  \\end{align}\n"},{"type":"paragraph","children":[{"type":"text","value":"接下来考虑下一层往哪走，即 "},{"type":"inlineMath","value":"a_{h-1}"},{"type":"text","value":" 的取值。"}]},{"type":"paragraph","children":[{"type":"text","value":"记与当前节点相连且边权为 "},{"type":"inlineMath","value":"a_{h-1} = b_{h-1} \\oplus 1"},{"type":"text","value":" 的子节点为 "},{"type":"inlineMath","value":"o_1"},{"type":"text","value":"；另一子节点为 "},{"type":"inlineMath","value":"o_2"},{"type":"text","value":"。其权值依次为 "},{"type":"inlineMath","value":"val(o_1), \\; val(o_2)"},{"type":"text","value":"."}]},{"type":"list","ordered":true,"orderType":"1","start":1,"marker":46,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"inlineMath","value":"\\displaystyle \\left\\lfloor \\frac{x}{2^h} \\right\\rfloor \\equiv 1\\hskip -1em \\mod 2"},{"type":"text","value":".\n也就是 "},{"type":"inlineMath","value":"b_h=1"},{"type":"text","value":"."}]},{"type":"list","ordered":false,"marker":45,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"如果 "},{"type":"inlineMath","value":"val(o_1) < y+2^{h-1}"},{"type":"text","value":"，说明如果下一步选择 "},{"type":"inlineMath","value":"o_1"},{"type":"text","value":"，则"}]},{"type":"math","value":"\\max \\Big\\lbrace \\min \\big\\lbrace dp[k][n-i], A[n] \\oplus A[n-i] \\big\\rbrace \\Big\\rbrace = val(o_1)\n"},{"type":"paragraph","children":[{"type":"text","value":"所以我们 "},{"type":"strong","children":[{"type":"text","value":"仅需选择 "},{"type":"inlineMath","value":"o_2"}]},{"type":"text","value":" 求出一个最优值 "},{"type":"inlineMath","value":"ans_2"},{"type":"text","value":"，最后的答案就是 "},{"type":"inlineMath","value":"\\max \\big\\lbrace val(o_1),ans_2 \\big\\rbrace"},{"type":"text","value":"."}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"如果 "},{"type":"inlineMath","value":"val(o_1) \\geqslant y+2^{h-1}"},{"type":"text","value":"，即选择 "},{"type":"inlineMath","value":"o_1"},{"type":"text","value":"，则最坏情况答案不小于\n"},{"type":"inlineMath","value":"y+2^{h-1}"},{"type":"text","value":". 同时，选择 "},{"type":"inlineMath","value":"o_2"},{"type":"text","value":"，最好的情况不会大于 "},{"type":"inlineMath","value":"y+2^{h-1}"},{"type":"text","value":"."}]},{"type":"paragraph","children":[{"type":"text","value":"所以我们 "},{"type":"strong","children":[{"type":"text","value":"仅需选择 "},{"type":"inlineMath","value":"o_1"}]},{"type":"text","value":" 求出一个最优值 "},{"type":"inlineMath","value":"ans_1"},{"type":"text","value":"，即是最后的答案。"}]}]}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"inlineMath","value":"\\displaystyle \\left\\lfloor \\frac{x}{2^h} \\right\\rfloor \\equiv 0\\hskip -1em \\mod 2"},{"type":"text","value":".\n也就是 "},{"type":"inlineMath","value":"b_h=0"},{"type":"text","value":"."}]},{"type":"paragraph","children":[{"type":"text","value":"只有走到 "},{"type":"inlineMath","value":"o_2"},{"type":"text","value":" 这一个选择。"}]}]}]},{"type":"paragraph","children":[{"type":"text","value":"根据上面的分析，不难发现，查询操作时间复杂度为 "},{"type":"inlineMath","value":"O(1)"},{"type":"text","value":"。如果存在一对 "},{"type":"inlineMath","value":"(i,j)"},{"type":"text","value":" 使得 "},{"type":"inlineMath","value":"A_i=A_j"},{"type":"text","value":" 呢？"}]},{"type":"paragraph","children":[{"type":"text","value":"事实上，只要保证字典树中的表示 "},{"type":"inlineMath","value":"A_i"},{"type":"text","value":" 的链的叶子节点权值为\n"},{"type":"inlineMath","value":"\\max \\big\\lbrace dp[k][n-i],dp[k][n-j] \\big\\rbrace"},{"type":"text","value":" 就好了。可以先将 "},{"type":"inlineMath","value":"A"},{"type":"text","value":" 离散化，开 "},{"type":"inlineMath","value":"N"},{"type":"text","value":" 棵 "},{"type":"inlineMath","value":"multiset"},{"type":"text","value":"。那么，在删除 "},{"type":"inlineMath","value":"dp(k, n-L-1)"},{"type":"text","value":" 时，只要将 "},{"type":"inlineMath","value":"A_{n-L-1}"},{"type":"text","value":" 对应的 "},{"type":"inlineMath","value":"multiset"},{"type":"text","value":" 中最大权值更新到字典树中即可。"}]},{"type":"heading","depth":4,"children":[{"type":"text","value":"程序实现"}],"identifier":"heading-程序实现-2"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"时间复杂度："},{"type":"inlineMath","value":"O(M\\cdot N\\cdot \\log L)"}]},{"type":"listItem","children":[{"type":"text","value":"空间复杂度："},{"type":"inlineMath","value":"O(N)"}]}]},{"type":"code","lang":"cpp","meta":"title=\"1004.cpp\" sourcefile=\"./1004.cpp\" maxlines=\"20\" collapsed linenos","value":"#include <algorithm>\n#include <cctype>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <set>\nusing namespace std;\n\nstatic const int MAXN = 10000 + 10;\n\nstruct node {\n  node* ch[2];\n  int val;\n  void Maintain() {\n    val = 0;\n    if (ch[0]) val = ch[0]->val;\n    if (ch[1]) val = std::max(val, ch[1]->val);\n  }\n};\n\nnode nodepool[MAXN << 5];\nnode* nodetop;\nnode* root;\n\ninline node* newnode() {\n  nodetop->ch[0] = nodetop->ch[1] = NULL;\n  nodetop->val = 0;\n  return nodetop++;\n}\n\nvoid Update(node*& o, int x, int v, int d = 30) {\n  if (o == NULL) o = newnode();\n  if (d == -1)\n    o->val = v;\n  else {\n    int c = (x >> d) & 1;\n    Update(o->ch[c], x, v, d - 1);\n    o->Maintain();\n  }\n}\n\nint Query(node*& o, int x, int ans = 0, int d = 30) {\n  if (o == NULL) return 0;\n  if (d == -1) return min(o->val, ans);\n  int c = (x >> d) & 1;\n  if (o->ch[c ^ 1]) {\n    if (o->ch[c ^ 1]->val < (ans ^ (1 << d)))\n      return max(o->ch[c ^ 1]->val, Query(o->ch[c], x, ans, d - 1));\n    return Query(o->ch[c ^ 1], x, ans ^ (1 << d), d - 1);\n  }\n  return Query(o->ch[c], x, ans, d - 1);\n}\n\ninline int read() {\n  int s = 0;\n  char c = getchar();\n  bool positive = true;\n  for (; !isdigit(c); c = getchar())\n    if (c == '-') positive = false;\n  for (; isdigit(c); c = getchar()) s = s * 10 + c - '0';\n  return positive ? s : -s;\n}\n\nmultiset<int> ms[MAXN];\nint A[MAXN];\nint B[MAXN], bsiz;\nint dp[2][MAXN];\n\ninline void add(int x, int v) {\n  int id = lower_bound(B, B + bsiz, x) - B;\n  if (ms[id].upper_bound(v) == ms[id].end()) Update(root, B[id], v);\n  ms[id].insert(v);\n}\n\ninline void sub(int x, int v) {\n  int id = lower_bound(B, B + bsiz, x) - B;\n  multiset<int>::iterator it;\n  it = ms[id].find(v);\n  ms[id].erase(it);\n  int vv = 0;\n  if (!ms[id].empty()) {\n    it = ms[id].end();\n    vv = *(--it);\n  }\n  if (vv < v) Update(root, B[id], vv);\n}\n\nvoid work() {\n  int N = read();\n  int K = read();\n  int L = read();\n  for (int i = 1; i <= N; ++i) A[i] = A[i - 1] ^ read();\n\n  memcpy(B, A + 1, sizeof(int) * N);\n  sort(B, B + N);\n  bsiz = std::unique(B, B + N) - B;\n\n  memset(dp[0], 0, sizeof dp[0]);\n  for (int i = 1; i <= L; ++i) dp[0][i] = A[i];\n\n  int now = 0, last = 1;\n  for (int k = 2; k <= K; ++k) {\n    nodetop = nodepool;\n    root = newnode();\n    for (int i = 0; i < bsiz; ++i) ms[i].clear();\n\n    swap(now, last);\n    for (int n = 1; n <= N; ++n) {\n      if (n > L + 1) sub(A[n - L - 1], dp[last][n - L - 1]);\n      dp[now][n] = Query(root, A[n]);\n      add(A[n], dp[last][n]);\n    }\n  }\n  printf(\"%d\\n\", dp[now][N]);\n}\n\nint main() {\n  int T_T = read();\n  for (int kase = 1; kase <= T_T; ++kase) {\n    printf(\"Case #%d:\\n\", kase);\n    work();\n  }\n  return 0;\n}\n"},{"type":"admonition","keyword":"tip","title":[{"type":"text","value":"HINT"}],"children":[{"type":"paragraph","children":[{"type":"text","value":"在离散化过程中使用排序，查询使用 "},{"type":"inlineMath","value":"lower_bound"},{"type":"text","value":"，复杂度退化为 "},{"type":"inlineMath","value":"O(M\\cdot N\\cdot(\\log L+\\log N))"},{"type":"text","value":".\n不过，仍然只跑了 "},{"type":"inlineMath","value":"202MS"},{"type":"text","value":"。"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"算法二"}],"identifier":"heading-算法二"},{"type":"paragraph","children":[{"type":"text","value":"重新定义 "},{"type":"inlineMath","value":"dp(k, n)"},{"type":"text","value":"。给定一个下界 "},{"type":"inlineMath","value":"val"},{"type":"text","value":"，定义 "},{"type":"inlineMath","value":"dp(k, n)"},{"type":"text","value":" 为能否将前 "},{"type":"inlineMath","value":"n"},{"type":"text","value":" 个数分成\n"},{"type":"inlineMath","value":"k"},{"type":"text","value":" 份，使得合法方案的"},{"type":"strong","children":[{"type":"text","value":"分组异或和最小值"}]},{"type":"text","value":"的最大值大于等于 "},{"type":"inlineMath","value":"val"},{"type":"text","value":".  那么，我们仅需将 "},{"type":"inlineMath","value":"1\\leqslant i\\leqslant L"},{"type":"text","value":" 中满足 "},{"type":"inlineMath","value":"dp(k, n-i)=true"},{"type":"text","value":" 的 "},{"type":"inlineMath","value":"A_{n-i}"},{"type":"text","value":" 丢进字典树中，则仅需判断字典树中的数与 "},{"type":"inlineMath","value":"A_n"},{"type":"text","value":" 最大异或值是否大于等于 "},{"type":"inlineMath","value":"val"},{"type":"text","value":" 即可。然后，仅需二分 "},{"type":"inlineMath","value":"val"},{"type":"text","value":" 即可。"}]},{"type":"heading","depth":4,"children":[{"type":"text","value":"程序实现"}],"identifier":"heading-程序实现-3"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"时间复杂度："},{"type":"inlineMath","value":"O(M\\cdot N\\cdot \\log N)"}]},{"type":"listItem","children":[{"type":"text","value":"空间复杂度："},{"type":"inlineMath","value":"O(N)"}]}]},{"type":"code","lang":"cpp","meta":"title=\"1004_2.cpp\" sourcefile=\"./1004_2.cpp\" maxlines=\"20\" collapsed linenos","value":"#include <algorithm>\n#include <cctype>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\nusing namespace std;\n\nconst int MAXN = 10000;\n\nstruct node {\n  node* ch[2];\n  int val;\n  node(int val = 0) : val(val) {\n    ch[0] = ch[1] = NULL;\n  }\n};\n\nnode* root;\nnode* nodetop;\nnode nodepool[MAXN << 5];\nbool dp[12][MAXN];\nint A[MAXN];\nint N, K, L;\n\ninline node* newnode() {\n  nodetop->ch[0] = nodetop->ch[1] = NULL;\n  nodetop->val = 0;\n  return nodetop++;\n}\n\ninline void Insert(int x, int d) {\n  node* u = root;\n  for (int i = 30; i >= 0; --i) {\n    int c = (x >> i) & 1;\n    if (!u->ch[c]) u->ch[c] = newnode();\n    u = u->ch[c];\n    u->val += d;\n  }\n}\n\ninline int Search(int x) {\n  node* u = root;\n  int ans = 0;\n  for (int i = 30; i >= 0; --i) {\n    int c = (x >> i) & 1;\n    if (u->ch[c ^ 1] && u->ch[c ^ 1]->val > 0) {\n      ans ^= 1 << i;\n      u = u->ch[c ^ 1];\n    } else if (u->ch[c])\n      u = u->ch[c];\n  }\n  return ans;\n}\n\ninline int read() {\n  int s = 0;\n  char c = getchar();\n  bool positive = true;\n  for (; !isdigit(c); c = getchar())\n    if (c == '-') positive = false;\n  for (; isdigit(c); c = getchar()) s = s * 10 + c - '0';\n  return positive ? s : -s;\n}\n\nbool check(int val) {\n  memset(dp[1], 0, sizeof dp[1]);\n  for (int n = 1; n <= L; ++n) dp[1][n] = A[n] >= val ? true : false;\n\n  for (int k = 2; k <= K; ++k) {\n    nodetop = nodepool;\n    root = newnode();\n    for (int n = 1; n <= N; ++n) {\n      if (n > L + 1 && dp[k - 1][n - L - 1]) Insert(A[n - L - 1], -1);\n\n      dp[k][n] = Search(A[n]) >= val ? true : false;\n\n      if (dp[k - 1][n]) Insert(A[n], 1);\n    }\n  }\n  return dp[K][N];\n}\n\nvoid work() {\n  N = read();\n  K = read();\n  L = read();\n  for (int i = 1; i <= N; ++i) A[i] = A[i - 1] ^ read();\n\n  int lft = 0, rht = (1 << 30) | 1;\n  while (lft < rht) {\n    int mid = (lft + rht) >> 1;\n    if (check(mid))\n      lft = mid + 1;\n    else\n      rht = mid;\n  }\n\n  printf(\"%d\\n\", lft - 1);\n}\n\nint main() {\n  int T_T = read();\n  for (int kase = 1; kase <= T_T; ++kase) {\n    printf(\"Case #%d:\\n\", kase);\n    work();\n  }\n  return 0;\n}\n"},{"type":"admonition","keyword":"tip","title":[{"type":"text","value":"HINT"}],"children":[{"type":"paragraph","children":[{"type":"text","value":"算法二思路简单，实现难度小，效率还不错，跑了 "},{"type":"inlineMath","value":"1092MS"},{"type":"text","value":"。"}]}]}]},"toc":{"children":[{"depth":2,"identifier":"heading-1002-k-个连通块","contents":[{"type":"text","value":"1002 K 个连通块"}],"children":[{"depth":3,"identifier":"heading-题目简析","contents":[{"type":"text","value":"题目简析"}],"children":[]},{"depth":3,"identifier":"heading-如何求-dp-1-s","contents":[{"type":"text","value":"如何求 "},{"type":"inlineMath","value":"dp(1,s)"}],"children":[]},{"depth":3,"identifier":"heading-如何递推","contents":[{"type":"text","value":"如何递推"}],"children":[]},{"depth":3,"identifier":"heading-进一步分析","contents":[{"type":"text","value":"进一步分析"}],"children":[]},{"depth":3,"identifier":"heading-程序实现","contents":[{"type":"text","value":"程序实现"}],"children":[]}]},{"depth":2,"identifier":"heading-1004-xor-游戏","contents":[{"type":"text","value":"1004 XOR 游戏"}],"children":[{"depth":3,"identifier":"heading-题目简析-2","contents":[{"type":"text","value":"题目简析"}],"children":[]},{"depth":3,"identifier":"heading-算法一","contents":[{"type":"text","value":"算法一"}],"children":[{"depth":4,"identifier":"heading-程序实现-2","contents":[{"type":"text","value":"程序实现"}],"children":[]}]},{"depth":3,"identifier":"heading-算法二","contents":[{"type":"text","value":"算法二"}],"children":[{"depth":4,"identifier":"heading-程序实现-3","contents":[{"type":"text","value":"程序实现"}],"children":[]}]}]}]},"ecmaImports":[],"definitionMap":{},"footnoteDefinitionMap":{},"images":[],"paginationUrl":"/posts/5","prev":{"title":"数论基础之原根","slug":"/post/math/number-theory/原根"},"next":{"title":"编译原理-语法分析","slug":"/post/fundamentals-of-compiling/grammar"},"aplayerOptions":null,"postItems":[{"title":"Javascript 踩坑记——继承和原型链","slug":"/post/web/javascript/inherit","tags":["studynote","javascript","ecmascript"],"createdAt":"Sep 05, 2021"},{"title":"防抖和节流","slug":"/post/algorithm/debounce-and-throttle","tags":["coding","debounce","throttle"],"createdAt":"Sep 03, 2021"},{"title":"XSS 与 CSRF 的攻防","slug":"/post/web/security/xss-csrf","tags":["web","web security","csrf"],"createdAt":"Aug 19, 2021"},{"title":"自然对数底数 e","slug":"/post/math/calculus/自然对数底数e","tags":["math","函数","极限","自然对数"],"createdAt":"Aug 07, 2021"},{"title":"当你想来一把数独","slug":"/post/game/sudoku","tags":["game","sudoku"],"createdAt":"Aug 01, 2021"},{"title":"精确覆盖问题和 DLX 算法","slug":"/post/algorithm/dlx","tags":["算法","精确覆盖","DLX 算法"],"createdAt":"Jul 24, 2021"},{"title":"洗牌问题和 knuth-shuffle 算法","slug":"/post/algorithm/shuffle","tags":["shuffle","knuth-shuffle","约瑟夫环"],"createdAt":"Jul 22, 2021"},{"title":"统计区间内的线段","slug":"/post/quiz/scanning-line/segments","tags":["quiz","扫描线","前缀和","树状数组","线段树"],"createdAt":"Jul 21, 2021"},{"title":"约瑟夫环问题","slug":"/post/quiz/classical/Josephus-ring","tags":["quiz","经典问题","约瑟夫环"],"createdAt":"Jul 16, 2021"},{"title":"剑指offer 解题报告","slug":"/post/acm/oj/nowcoder/jz-offer","tags":["专题训练","解题报告"],"createdAt":"Jul 15, 2021"},{"title":"不修改数组找出重复的数字","slug":"/post/quiz/partition/find-duplicate-number","tags":["quiz","分治","追击"],"createdAt":"Jun 29, 2021"},{"title":"背包九讲","slug":"/post/algorithm/knapsack","tags":["acm","算法","动态规划","背包问题"],"createdAt":"Jun 27, 2021"},{"title":"React Reconciliation","slug":"/post/web/react/reconciliation","tags":["react","react reconciliation"],"createdAt":"Jun 26, 2021"},{"title":"扔鸡蛋问题","slug":"/post/quiz/dp/egg-drop","tags":["quiz","动态规划"],"createdAt":"Jun 20, 2021"},{"title":"端口管理","slug":"/post/network/端口管理","tags":["network","port","ssh","netstat"],"createdAt":"Jun 20, 2021"},{"title":"最长公共子序列（LCS）","slug":"/post/algorithm/lcs","tags":["最长公共子序列","LCS"],"createdAt":"Jun 02, 2021"},{"title":"最长上升子序列（LIS）","slug":"/post/algorithm/lis","tags":["最长上升子序列","LIS"],"createdAt":"Jun 02, 2021"},{"title":"Dijkstra 算法","slug":"/post/algorithm/graph/shortest-path/dijkstra","tags":["算法","最短路","单源最短路","dijkstra"],"createdAt":"May 29, 2021"},{"title":"函数的极限","slug":"/post/math/calculus/函数的极限","tags":["math","函数","极限"],"createdAt":"May 09, 2021"},{"title":"ECMA 2020 新特性","slug":"/post/web/javascript/2020","tags":["javascript","ecmascript"],"createdAt":"Apr 05, 2021"},{"title":"ECMA 2021 新特性","slug":"/post/web/javascript/2021","tags":["javascript","ecmascript"],"createdAt":"Apr 05, 2021"},{"title":"在 excel 中启用正则表达式","slug":"/post/tool/excel/regex","tags":["excel","tools"],"createdAt":"Mar 29, 2021"},{"title":"CSS 选择器","slug":"/post/web/css/selector","tags":["web","frontend","css"],"createdAt":"Nov 02, 2020"},{"title":"Custom React Hooks","slug":"/post/web/react/hooks/custom","tags":["react","react hooks"],"createdAt":"Oct 29, 2020"},{"title":"组合游戏基础之 SG 函数和 SG 定理","slug":"/post/math/combinatorial/SG","tags":["组合数学","组合游戏","SG 定理"],"createdAt":"Sep 04, 2016"},{"title":"网络流 24 题","slug":"/post/algorithm/graph/network-flow/24-problems","tags":["acm","算法","图论","网络流","二分图","解题报告","专题训练"],"createdAt":"Jul 30, 2016"},{"title":"网络流基础之最大权闭合图","slug":"/post/algorithm/graph/network-flow/最大权闭合图","tags":["算法","图论","网络流","最大权闭合图"],"createdAt":"Jul 24, 2016"},{"title":"2016 多校第 2 场","slug":"/post/acm/contest/multi-university-training/2016/2","tags":["acm","训练赛","数据结构","解题报告"],"createdAt":"Jul 22, 2016"},{"title":"二分图","slug":"/post/algorithm/graph/bipartite-graph","tags":["算法","图论","二分图","学习笔记"],"createdAt":"Jul 17, 2016"},{"title":"伸展树专题","slug":"/post/data-structure/bbst/splay","tags":["acm","Splay","解题报告","专题训练"],"createdAt":"Jul 03, 2016"},{"title":"CCF 2015-09 最佳文章 解题报告","slug":"/post/acm/oj/ccf/2015/09/E","tags":["acm","Aho-Corasick 自动机","矩阵快速幂","动态规划","解题报告"],"createdAt":"Jun 26, 2016"},{"title":"编译原理-语法制导翻译实现计算器","slug":"/post/fundamentals-of-compiling/exercise","tags":["编译原理","语法制导翻译","计算机"],"createdAt":"Jun 23, 2016"},{"title":"编译原理-语法分析","slug":"/post/fundamentals-of-compiling/grammar","tags":["编译原理","语法分析","计算机"],"createdAt":"Jun 18, 2016"},{"title":"百度之星 2016 解题报告","slug":"/post/acm/contest/baiduzhixing/2016","tags":["acm","递推","状态压缩","动态规划","字典树","解题报告"],"createdAt":"Jun 03, 2016"},{"title":"数论基础之原根","slug":"/post/math/number-theory/原根","tags":["math","数论","原根"],"createdAt":"May 16, 2016"},{"title":"数论基础之欧拉函数","slug":"/post/math/number-theory/欧拉函数","tags":["math","数论","既约剩余系","欧拉函数"],"createdAt":"May 10, 2016"},{"title":"数论基础之筛法","slug":"/post/math/number-theory/sieve","tags":["math","数论","素数","欧拉函数","线性筛"],"createdAt":"May 06, 2016"},{"title":"数论基础之模方程初步","slug":"/post/math/number-theory/模方程/basic","tags":["math","数论","扩展欧几里得算法","中国剩余定理","Baby Step Gaint Step"],"createdAt":"May 04, 2016"},{"title":"HDU-5576 Expection of String 解题报告（原 2015-上海区域赛-E)","slug":"/post/acm/oj/hdu/5576","tags":["acm","动态规划","解题报告"],"createdAt":"Apr 24, 2016"},{"title":"树链剖分","slug":"/post/algorithm/tree/tcs","tags":["acm","算法","树链剖分"],"createdAt":"Apr 23, 2016"},{"title":"51nod-1462 数据结构 -- 解题报告","slug":"/post/acm/oj/51nod/1462","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"createdAt":"Apr 23, 2016"},{"title":"小球放盒模型","slug":"/post/math/combinatorial/小球放盒模型","tags":["math","组合数学"],"createdAt":"Apr 22, 2016"},{"title":"最长回文子串 Manacher 算法","slug":"/post/algorithm/string/manacher","tags":["算法","字符串","回文串","manacher"],"createdAt":"Apr 18, 2016"},{"title":"POJ-1324 Holedox Moving 解题报告","slug":"/post/acm/oj/poj/1324","tags":["acm","bfs","图论","状态压缩","解题报告"],"createdAt":"Apr 13, 2016"},{"title":"HDU-5574 Colorful Tree 解题报告（原 2015-上海区域赛-C）","slug":"/post/acm/oj/hdu/5574","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"createdAt":"Apr 12, 2016"},{"title":"快速傅里叶变换和雷德算法","slug":"/post/math/number-theory/fft","tags":["acm","大数乘法","fft","快速傅里叶变换"],"createdAt":"Apr 10, 2016"},{"title":"HDU-5306 Gorgeous Sequence 解题报告","slug":"/post/acm/oj/hdu/5306","tags":["acm","数据结构","线段树","解题报告"],"createdAt":"Apr 09, 2016"}]},"__N_SSG":true}