{"pageProps":{"posts":[{"title":"二分图","description":"二分图","slug":"/post/algorithm/graph/bipartite-graph","tags":["算法","图论","二分图","学习笔记"],"categories":[],"createdAt":"Jul 17, 2016","timeToRead":"09min 07s","excerpt":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Term"}],"identifier":"heading-term"},{"type":"heading","depth":3,"children":[{"type":"text","value":"点覆盖 (vertex covering)"}],"identifier":"heading-点覆盖-vertex-covering"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"点覆盖"}]},{"type":"text","value":"： 一个点集，满足所有边都至少有一个端点在集合中"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"极小点覆盖"}]},{"type":"text","value":"： 本身是一个点覆盖，但任意一个真子集都不是点覆盖"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"最小点覆盖"}]},{"type":"text","value":"： 点数最少的点覆盖"}]},{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"点覆盖数"}]},{"type":"text","value":"： 最小点覆盖的点数"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"边覆盖 (edge covering)"}],"identifier":"heading-边覆盖-edge-covering"},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"strong","children":[{"type":"text","value":"边覆盖"}]},{"type":"text","value":"： 一个边集，满足所有顶点都是集合中至少一条边的一个端点"}]}]}]},"ecmaImports":[],"definitionMap":{},"footnoteDefinitionMap":{},"images":[]},{"title":"伸展树专题","description":"伸展树专题","slug":"/post/data-structure/bbst/splay","tags":["acm","Splay","解题报告","专题训练"],"categories":[],"createdAt":"Jul 03, 2016","timeToRead":"06min 20s","excerpt":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"题目"}],"identifier":"heading-题目"},{"type":"heading","depth":3,"children":[{"type":"text","value":"hihoCoder/1329"}],"identifier":"heading-hihocoder-1329"},{"type":"paragraph","children":[{"type":"text","value":"题目链接： "},{"type":"linkReference","identifier":"problem-hiho-coder-1329","label":"problem-hiho-coder-1329","referenceType":"full","children":[{"type":"text","value":"hihoCoder/1329 平衡树 Splay"}]}]},{"type":"paragraph","children":[{"type":"text","value":"基础题。"}]},{"type":"code","lang":"cpp","meta":"title=\"hihocoder-1329.cpp\" sourcefile=\"./hihocoder-1329.cpp\" maxlines=\"20\" collapsed linenos","value":"#include <bits/stdc++.h>\n\ntypedef long long LL;\n\nstruct node {\n  int key;\n  int siz;\n  node* lson;\n  node* rson;\n\n  int cmp(int x) {\n    int cnt = lson->siz + 1;\n    if (x == cnt) return -1;\n    return x < cnt ? 0 : 1;\n  }\n  void maintain() {\n    siz = lson->siz + 1 + rson->siz;\n  }\n};\n\ntypedef node* root;\ntypedef std::pair<node*, node*> droot;\nconst int MAX_NODES = 200000 + 10;\n\nnode* null;\nnode* nodetop;\nnode nodepool[MAX_NODES];\n\ninline root newnode(int key = 0) {\n  nodetop->key = key;\n  nodetop->siz = 1;\n  nodetop->lson = null;\n  nodetop->rson = null;\n  return nodetop++;\n}\n\ninline void zag(root& o) {\n  root k = o->rson;\n  o->rson = k->lson;\n  k->lson = o;\n  o = k;\n}\ninline void zig(root& o) {\n  root k = o->lson;\n  o->lson = k->rson;\n  k->rson = o;\n  o = k;\n}\ninline void rotate(root& o, int d) {\n  d ? zig(o) : zag(o);\n  d ? o->rson->maintain() : o->lson->maintain();\n  o->maintain();\n}\n\ninline void splay(root& o, int k) {\n  int d = o->cmp(k);\n  if (d == 1) k -= o->lson->siz + 1;\n  if (d != -1) {\n    root& p = d ? o->rson : o->lson;\n    int d2 = p->cmp(k);\n    if (d2 == 1) k -= p->lson->siz + 1;\n    if (d2 != -1) {\n      splay((d2 ? p->rson : p->lson), k);\n      if (d == d2)\n        rotate(o, d ^ 1);\n      else\n        rotate(p, d);\n    }\n    rotate(o, d ^ 1);\n  }\n}\n\ninline void split(root o, int k, root& left, root& right) {\n  splay(o, k);\n  left = o;\n  right = o->rson;\n  o->rson = null;\n  o->maintain();\n}\n\ninline root merge(root left, root right) {\n  splay(left, left->siz);\n  left->rson = right;\n  left->maintain();\n  return left;\n}\n\ninline int rank(root o, int key) {\n  if (o == null) return 0;\n  if (key == o->key) return o->lson->siz;\n  if (key < o->key) return rank(o->lson, key);\n  return o->lson->siz + 1 + rank(o->rson, key);\n}\n\ninline void insert(root& o, int id) {\n  int k = rank(o, id);\n  root left, right;\n  root middle = newnode(id);\n  split(o, k, left, right);\n  o = merge(merge(left, middle), right);\n}\n\ninline void remove(root& o, int id1, int id2) {\n  int k1 = rank(o, id1);\n  int k2 = rank(o, id2 + 1);\n  if (k1 >= k2) return;\n\n  root left, middle, right;\n  split(o, k1, left, right);\n  split(right, k2 - k1, middle, right);\n  o = merge(left, right);\n}\n\ninline int query(root& o, int key) {\n  if (o == null) return 0;\n  if (key < o->key) return query(o->lson, key);\n  return std::max(o->key, query(o->rson, key));\n}\n\nroot rt;\nvoid Init() {\n  null = new node();\n  null->key = 0;\n  null->siz = 0;\n  null->lson = NULL;\n  null->rson = NULL;\n\n  nodetop = nodepool;\n  rt = newnode(0);\n  rt->rson = newnode(1000000001);\n}\n\nint N, arg1, arg2, arg3;\nchar cmd[20];\ninline int read() {\n  bool positive = true;\n  char c = getchar();\n  int s = 0;\n  for (; c < '0' || c > '9'; c = getchar())\n    if (c == '-') positive = false;\n  for (; c >= '0' && c <= '9'; c = getchar()) s = s * 10 + c - '0';\n  return positive ? s : -s;\n}\n\nint main() {\n  Init();\n  N = read();\n  for (int i = 1; i <= N; ++i) {\n    scanf(\"%s\", cmd);\n    arg1 = std::min(std::max(read(), 1), 1000000000);\n    if (cmd[0] == 'D') arg2 = std::min(std::max(read(), 1), 1000000000);\n\n    switch (cmd[0]) {\n    case 'I':\n      insert(rt, arg1);\n      break;\n    case 'Q':\n      printf(\"%lld\\n\", query(rt, arg1));\n      break;\n    case 'D':\n      remove(rt, arg1, arg2);\n      break;\n    }\n  }\n  return 0;\n}\n"}]},"ecmaImports":[],"definitionMap":{"problem-hiho-coder-1329":{"type":"definition","identifier":"problem-hiho-coder-1329","label":"problem-hiho-coder-1329","url":"http://hihocoder.com/problemset/problem/1329"},"problem-hiho-coder-1333":{"type":"definition","identifier":"problem-hiho-coder-1333","label":"problem-hiho-coder-1333","url":"http://hihocoder.com/problemset/problem/1333"},"problem-hysbz-1269":{"type":"definition","identifier":"problem-hysbz-1269","label":"problem-hysbz-1269","url":"http://www.lydsy.com/JudgeOnline/problem.php?id=1269"},"problem-hysbz-1500":{"type":"definition","identifier":"problem-hysbz-1500","label":"problem-hysbz-1500","url":"http://www.lydsy.com/JudgeOnline/problem.php?id=1500"},"problem-hysbz-1503":{"type":"definition","identifier":"problem-hysbz-1503","label":"problem-hysbz-1503","url":"http://www.lydsy.com/JudgeOnline/problem.php?id=1503"},"problem-la-3961":{"type":"definition","identifier":"problem-la-3961","label":"problem-la-3961","url":"https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=1962"},"problem-poj-2828":{"type":"definition","identifier":"problem-poj-2828","label":"problem-poj-2828","url":"http://poj.org/problem?id=2828"},"problem-uva-11922":{"type":"definition","identifier":"problem-uva-11922","label":"problem-uva-11922","url":"https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=3073"},"problem-uva-11996":{"type":"definition","identifier":"problem-uva-11996","label":"problem-uva-11996","url":"https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=3147"},"solution-hiho-coder-1329":{"type":"definition","identifier":"solution-hiho-coder-1329","label":"solution-hiho-coder-1329","url":"#heading-hihocoder-1329"},"solution-hiho-coder-1333":{"type":"definition","identifier":"solution-hiho-coder-1333","label":"solution-hiho-coder-1333","url":"#heading-hihocoder-1333"},"solution-hysbz-1269":{"type":"definition","identifier":"solution-hysbz-1269","label":"solution-hysbz-1269","url":"#heading-hysbz-1269"},"solution-hysbz-1500":{"type":"definition","identifier":"solution-hysbz-1500","label":"solution-hysbz-1500","url":"#heading-hysbz-1500"},"solution-hysbz-1503":{"type":"definition","identifier":"solution-hysbz-1503","label":"solution-hysbz-1503","url":"#heading-hysbz-1503"},"solution-la-3961":{"type":"definition","identifier":"solution-la-3961","label":"solution-la-3961","url":"#heading-la-3961"},"solution-poj-2828":{"type":"definition","identifier":"solution-poj-2828","label":"solution-poj-2828","url":"#heading-poj-2828"},"solution-uva-11922":{"type":"definition","identifier":"solution-uva-11922","label":"solution-uva-11922","url":"#heading-uva-11922"},"solution-uva-11996":{"type":"definition","identifier":"solution-uva-11996","label":"solution-uva-11996","url":"#heading-uva-11996"},"code-hiho-coder-1329":{"type":"definition","identifier":"code-hiho-coder-1329","label":"code-hiho-coder-1329","url":"/asset/file/post/26c4c9c9-866f-5802-9a9e-26d09481517a.cpp"},"code-hiho-coder-1333":{"type":"definition","identifier":"code-hiho-coder-1333","label":"code-hiho-coder-1333","url":"/asset/file/post/43e5b684-8364-5bc5-aa82-b56ee5a2a841.cpp"},"code-hysbz-1269":{"type":"definition","identifier":"code-hysbz-1269","label":"code-hysbz-1269","url":"/asset/file/post/bbf7f35f-7c23-5d24-a8a1-8a832180ef20.cpp"},"code-hysbz-1500":{"type":"definition","identifier":"code-hysbz-1500","label":"code-hysbz-1500","url":"/asset/file/post/4f92b8de-aa5d-590a-9a7b-3800b3ac5c00.cpp"},"code-hysbz-1503":{"type":"definition","identifier":"code-hysbz-1503","label":"code-hysbz-1503","url":"/asset/file/post/72e35033-a858-5f44-8b48-7fa6eb68d5f8.cpp"},"code-la-3961":{"type":"definition","identifier":"code-la-3961","label":"code-la-3961","url":"/asset/file/post/1d172d74-0a96-5ee1-90b7-4326065a6e39.cpp"},"code-la-3961_2":{"type":"definition","identifier":"code-la-3961_2","label":"code-la-3961_2","url":"/asset/file/post/88714e41-852b-5a0f-a54c-7b055795af8e.cpp"},"code-poj-2828":{"type":"definition","identifier":"code-poj-2828","label":"code-poj-2828","url":"/asset/file/post/72732dd4-db63-5e22-8aff-1e511cb9892c.cpp"},"code-poj-2828_2":{"type":"definition","identifier":"code-poj-2828_2","label":"code-poj-2828_2","url":"/asset/file/post/e3311b49-5c08-5b1d-bf55-8ca11e8887dd.cpp"},"code-uva-11922":{"type":"definition","identifier":"code-uva-11922","label":"code-uva-11922","url":"/asset/file/post/3a489798-29e0-5c2c-940e-d2a009d9b6a0.cpp"},"code-uva-11996":{"type":"definition","identifier":"code-uva-11996","label":"code-uva-11996","url":"/asset/file/post/1a097f43-693e-5d21-a4e1-a1b22df685f0.cpp"}},"footnoteDefinitionMap":{},"images":[]},{"title":"CCF 2015-09 最佳文章 解题报告","description":"CCF 2015-09 最佳文章 解题报告","slug":"/post/acm/oj/ccf/2015/09/E","tags":["acm","Aho-Corasick 自动机","矩阵快速幂","动态规划","解题报告"],"categories":[],"createdAt":"Jun 26, 2016","timeToRead":"04min 10s","excerpt":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"问题简述"}],"identifier":"heading-问题简述"},{"type":"paragraph","children":[{"type":"text","value":"有 "},{"type":"inlineMath","value":"N"},{"type":"text","value":" 个由小写字母构成的单词。一个串的权值为这个串中每个单词出现的次数的总和（单词可部分重叠）。求一个长度为 "},{"type":"inlineMath","value":"L"},{"type":"text","value":" 串的最大权值。"}]},{"type":"paragraph","children":[{"type":"text","value":"数据范围："},{"type":"inlineMath","value":"N"},{"type":"text","value":" 个单词长度总和不超过 100，"},{"type":"inlineMath","value":"1\\leqslant L\\leqslant 10^{15}"},{"type":"text","value":"."}]},{"type":"paragraph","children":[{"type":"text","value":"样例输入："}]},{"type":"code","lang":null,"meta":null,"value":"3 15\nagva\nagvagva\ngvagva\n"}]},"ecmaImports":[],"definitionMap":{"aho-corasick1.png":{"type":"definition","identifier":"aho-corasick1.png","label":"Aho-Corasick1.png","url":"/asset/img/post/b56a6d7f-376b-57b9-92a1-4d8ec0fad2ee.png?width=988&height=234"}},"footnoteDefinitionMap":{"footnote-1":{"type":"footnoteDefinition","identifier":"footnote-1","label":"1","children":[{"type":"paragraph","children":[{"type":"text","value":"上图的自动机中一共只有 "},{"type":"inlineMath","value":"14"},{"type":"text","value":" 个节点"}]}]}},"images":[{"alt":"Aho-Corasick1.png","src":"/asset/img/post/b56a6d7f-376b-57b9-92a1-4d8ec0fad2ee.png?width=988&height=234"}]},{"title":"编译原理-语法制导翻译实现计算器","description":"编译原理-语法制导翻译实现计算器","slug":"/post/fundamentals-of-compiling/exercise","tags":["编译原理","语法制导翻译","计算机"],"categories":[],"createdAt":"Jun 23, 2016","timeToRead":"03min 31s","excerpt":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"前言"}],"identifier":"heading-前言"},{"type":"paragraph","children":[{"type":"text","value":"设计一个文法，匹配合法的计算式，并返回正确计算式的结果。"}]},{"type":"paragraph","children":[{"type":"text","value":"一些定义："}]},{"type":"list","ordered":false,"marker":42,"spread":false,"children":[{"type":"listItem","children":[{"type":"text","value":"语法制导定义（Syntax-directed definitions, "},{"type":"strong","children":[{"type":"text","value":"SDD"}]},{"type":"text","value":"）"}]},{"type":"listItem","children":[{"type":"text","value":"语法制导翻译方案（Syntax-directed Translation Schema, "},{"type":"strong","children":[{"type":"text","value":"SDT"}]},{"type":"text","value":"）"}]}]},{"type":"paragraph","children":[{"type":"text","value":"其它一些编译原理相关的前置知识可以参考： "}]}]},"ecmaImports":[],"definitionMap":{"@algorithm.ts/calculate":{"type":"definition","identifier":"@algorithm.ts/calculate","label":"@algorithm.ts/calculate","url":"https://github.com/guanghechen/algorithm.ts/tree/main/packages/calculate#readme"},"compiling-grammar":{"type":"definition","identifier":"compiling-grammar","label":"compiling-grammar","url":"/post/fundamentals-of-compiling/grammar/"}},"footnoteDefinitionMap":{},"images":[]},{"title":"编译原理-语法分析","description":"编译原理-语法分析","slug":"/post/fundamentals-of-compiling/grammar","tags":["编译原理","语法分析","计算机"],"categories":[],"createdAt":"Jun 18, 2016","timeToRead":"16min 35s","excerpt":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"FIRST"}],"identifier":"heading-first"},{"type":"paragraph","children":[{"type":"inlineMath","value":"\\mathsf{FIRST}(X)"}]},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"如果 "},{"type":"inlineMath","value":"X"},{"type":"text","value":" 是一个终结符号，那么 "},{"type":"inlineMath","value":"\\mathsf{FIRST}(X) = X"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"如果 "},{"type":"inlineMath","value":"X \\rightarrow \\varepsilon"},{"type":"text","value":" 是一个产生式，那么 "},{"type":"inlineMath","value":"\\varepsilon \\in \\mathsf{FIRST}(X)"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"如果 "},{"type":"inlineMath","value":"X"},{"type":"text","value":" 是一个非终结符号，且 "}]}]}]}]},"ecmaImports":[],"definitionMap":{},"footnoteDefinitionMap":{},"images":[]},{"title":"百度之星 2016 解题报告","description":"百度之星 2016 解题报告","slug":"/post/acm/contest/baiduzhixing/2016","tags":["acm","递推","状态压缩","动态规划","字典树","解题报告"],"categories":[],"createdAt":"Jun 03, 2016","timeToRead":"10min 57s","excerpt":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"1002 K 个连通块"}],"identifier":"heading-1002-k-个连通块"},{"type":"paragraph","children":[{"type":"link","url":"http://acm.hdu.edu.cn/showproblem.php?pid=5713","children":[{"type":"text","value":"题目链接"}]}]},{"type":"heading","depth":3,"children":[{"type":"text","value":"题目简析"}],"identifier":"heading-题目简析"},{"type":"paragraph","children":[{"type":"text","value":"假入 "},{"type":"inlineMath","value":"N"},{"type":"text","value":" 个点依次为："},{"type":"inlineMath","value":"\\displaystyle V=\\left\\lbrace A_0,A_1,\\cdots,A_{N-1} \\right\\rbrace"},{"type":"text","value":".\n不难想到状态压缩。令 "},{"type":"inlineMath","value":"dp(k, s)"},{"type":"text","value":" 表示点集 "},{"type":"inlineMath","value":"\\displaystyle V_s= \\left\\lbrace A_i \\;\\Bigg|\\; \\left\\lfloor \\frac{s}{2^i} \\right\\rfloor \\equiv 1 \\mod 2 \\right\\rbrace"}]}]},"ecmaImports":[],"definitionMap":{},"footnoteDefinitionMap":{},"images":[]},{"title":"数论基础之原根","description":"数论基础之原根","slug":"/post/math/number-theory/原根","tags":["math","数论","原根"],"categories":[],"createdAt":"May 16, 2016","timeToRead":"03min 39s","excerpt":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"什么是原根"}],"identifier":"heading-什么是原根"},{"type":"list","ordered":false,"marker":42,"spread":true,"children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","value":"原根的定义"}]},{"type":"paragraph","children":[{"type":"text","value":"对于正整数 "},{"type":"inlineMath","value":"N"},{"type":"text","value":"，如果正整数 "},{"type":"inlineMath","value":"g"},{"type":"text","value":" 满足 "},{"type":"inlineMath","value":"\\gcd(g,N)=1"},{"type":"text","value":" 且 "},{"type":"inlineMath","value":"\\big\\lbrace g^0,g^1, \\cdots,g^{\\varphi(N)-1}\\big\\rbrace"},{"type":"text","value":" 两两模 "},{"type":"inlineMath","value":"N"},{"type":"text","value":" 不同余，则称 "},{"type":"inlineMath","value":"g"},{"type":"text","value":" 为 "},{"type":"inlineMath","value":"N"},{"type":"text","value":" 的一个原根。"}]},{"type":"paragraph","children":[{"type":"text","value":"由于 "},{"type":"inlineMath","value":"\\displaystyle \\gcd(A,B)=1 ~\\Leftrightarrow~ \\gcd(A \\mod B,B)=1"}]}]}]}]},"ecmaImports":[],"definitionMap":{},"footnoteDefinitionMap":{},"images":[]}],"postItems":[{"title":"Javascript 踩坑记——继承和原型链","slug":"/post/web/javascript/inherit","tags":["studynote","javascript","ecmascript"],"createdAt":"Sep 05, 2021"},{"title":"防抖和节流","slug":"/post/algorithm/debounce-and-throttle","tags":["coding","debounce","throttle"],"createdAt":"Sep 03, 2021"},{"title":"XSS 与 CSRF 的攻防","slug":"/post/web/security/xss-csrf","tags":["web","web security","csrf"],"createdAt":"Aug 19, 2021"},{"title":"自然对数底数e","slug":"/post/math/calculus/自然对数底数e","tags":["math","函数","极限","自然对数"],"createdAt":"Aug 07, 2021"},{"title":"当你想来一把数独","slug":"/post/game/sudoku","tags":["game","sudoku"],"createdAt":"Aug 01, 2021"},{"title":"精确覆盖问题和 DLX 算法","slug":"/post/algorithm/dlx","tags":["算法","精确覆盖","DLX 算法"],"createdAt":"Jul 24, 2021"},{"title":"洗牌问题和 knuth-shuffle 算法","slug":"/post/algorithm/shuffle","tags":["shuffle","knuth-shuffle","约瑟夫环"],"createdAt":"Jul 22, 2021"},{"title":"统计区间内的线段","slug":"/post/quiz/scanning-line/segments","tags":["quiz","扫描线","前缀和","树状数组","线段树"],"createdAt":"Jul 21, 2021"},{"title":"约瑟夫环问题","slug":"/post/quiz/classical/Josephus-ring","tags":["quiz","经典问题","约瑟夫环"],"createdAt":"Jul 16, 2021"},{"title":"剑指offer 解题报告","slug":"/post/acm/oj/nowcoder/jz-offer","tags":["专题训练","解题报告"],"createdAt":"Jul 15, 2021"},{"title":"不修改数组找出重复的数字","slug":"/post/quiz/partition/find-duplicate-number","tags":["quiz","分治","追击"],"createdAt":"Jun 29, 2021"},{"title":"背包九讲","slug":"/post/algorithm/knapsack","tags":["acm","算法","动态规划","背包问题"],"createdAt":"Jun 27, 2021"},{"title":"React Reconciliation","slug":"/post/web/react/reconciliation","tags":["react","react reconciliation"],"createdAt":"Jun 26, 2021"},{"title":"扔鸡蛋问题","slug":"/post/quiz/dp/egg-drop","tags":["quiz","动态规划"],"createdAt":"Jun 20, 2021"},{"title":"端口管理","slug":"/post/network/端口管理","tags":["network","port","ssh","netstat"],"createdAt":"Jun 20, 2021"},{"title":"最长公共子序列（LCS）","slug":"/post/algorithm/lcs","tags":["最长公共子序列","LCS"],"createdAt":"Jun 02, 2021"},{"title":"最长上升子序列（LIS）","slug":"/post/algorithm/lis","tags":["最长上升子序列","LIS"],"createdAt":"Jun 02, 2021"},{"title":"Dijkstra 算法","slug":"/post/algorithm/graph/shortest-path/dijkstra","tags":["算法","最短路","单源最短路","dijkstra"],"createdAt":"May 29, 2021"},{"title":"函数的极限","slug":"/post/math/calculus/函数的极限","tags":["math","函数","极限"],"createdAt":"May 09, 2021"},{"title":"ECMA 2020 新特性","slug":"/post/web/javascript/2020","tags":["javascript","ecmascript"],"createdAt":"Apr 05, 2021"},{"title":"ECMA 2021 新特性","slug":"/post/web/javascript/2021","tags":["javascript","ecmascript"],"createdAt":"Apr 05, 2021"},{"title":"在 excel 中启用正则表达式","slug":"/post/tool/excel/regex","tags":["excel","tools"],"createdAt":"Mar 29, 2021"},{"title":"CSS 选择器","slug":"/post/web/css/selector","tags":["web","frontend","css"],"createdAt":"Nov 02, 2020"},{"title":"Custom React Hooks","slug":"/post/web/react/hooks/custom","tags":["react","react hooks"],"createdAt":"Oct 29, 2020"},{"title":"组合游戏基础之 SG 函数和 SG 定理","slug":"/post/math/combinatorial/SG","tags":["组合数学","组合游戏","SG 定理"],"createdAt":"Sep 04, 2016"},{"title":"网络流 24 题","slug":"/post/algorithm/graph/network-flow/24-problems","tags":["acm","算法","图论","网络流","二分图","解题报告","专题训练"],"createdAt":"Jul 30, 2016"},{"title":"网络流基础之最大权闭合图","slug":"/post/algorithm/graph/network-flow/最大权闭合图","tags":["算法","图论","网络流","最大权闭合图"],"createdAt":"Jul 24, 2016"},{"title":"2016 多校第 2 场","slug":"/post/acm/contest/multi-university-training/2016/2","tags":["acm","训练赛","数据结构","解题报告"],"createdAt":"Jul 22, 2016"},{"title":"二分图","slug":"/post/algorithm/graph/bipartite-graph","tags":["算法","图论","二分图","学习笔记"],"createdAt":"Jul 17, 2016"},{"title":"伸展树专题","slug":"/post/data-structure/bbst/splay","tags":["acm","Splay","解题报告","专题训练"],"createdAt":"Jul 03, 2016"},{"title":"CCF 2015-09 最佳文章 解题报告","slug":"/post/acm/oj/ccf/2015/09/E","tags":["acm","Aho-Corasick 自动机","矩阵快速幂","动态规划","解题报告"],"createdAt":"Jun 26, 2016"},{"title":"编译原理-语法制导翻译实现计算器","slug":"/post/fundamentals-of-compiling/exercise","tags":["编译原理","语法制导翻译","计算机"],"createdAt":"Jun 23, 2016"},{"title":"编译原理-语法分析","slug":"/post/fundamentals-of-compiling/grammar","tags":["编译原理","语法分析","计算机"],"createdAt":"Jun 18, 2016"},{"title":"百度之星 2016 解题报告","slug":"/post/acm/contest/baiduzhixing/2016","tags":["acm","递推","状态压缩","动态规划","字典树","解题报告"],"createdAt":"Jun 03, 2016"},{"title":"数论基础之原根","slug":"/post/math/number-theory/原根","tags":["math","数论","原根"],"createdAt":"May 16, 2016"},{"title":"数论基础之欧拉函数","slug":"/post/math/number-theory/欧拉函数","tags":["math","数论","既约剩余系","欧拉函数"],"createdAt":"May 10, 2016"},{"title":"数论基础之筛法","slug":"/post/math/number-theory/sieve","tags":["math","数论","素数","欧拉函数","线性筛"],"createdAt":"May 06, 2016"},{"title":"数论基础之模方程初步","slug":"/post/math/number-theory/模方程/basic","tags":["math","数论","扩展欧几里得算法","中国剩余定理","Baby Step Gaint Step"],"createdAt":"May 04, 2016"},{"title":"HDU-5576 Expection of String 解题报告（原 2015-上海区域赛-E)","slug":"/post/acm/oj/hdu/5576","tags":["acm","动态规划","解题报告"],"createdAt":"Apr 24, 2016"},{"title":"树链剖分","slug":"/post/algorithm/tree/tcs","tags":["acm","算法","树链剖分"],"createdAt":"Apr 23, 2016"},{"title":"51nod-1462 数据结构 -- 解题报告","slug":"/post/acm/oj/51nod/1462","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"createdAt":"Apr 23, 2016"},{"title":"小球放盒模型","slug":"/post/math/combinatorial/小球放盒模型","tags":["math","组合数学"],"createdAt":"Apr 22, 2016"},{"title":"最长回文子串 Manacher 算法","slug":"/post/algorithm/string/manacher","tags":["算法","字符串","回文串","manacher"],"createdAt":"Apr 18, 2016"},{"title":"POJ-1324 Holedox Moving 解题报告","slug":"/post/acm/oj/poj/1324","tags":["acm","bfs","图论","状态压缩","解题报告"],"createdAt":"Apr 13, 2016"},{"title":"HDU-5574 Colorful Tree 解题报告（原 2015-上海区域赛-C）","slug":"/post/acm/oj/hdu/5574","tags":["acm","数据结构","树链剖分","线段树","解题报告"],"createdAt":"Apr 12, 2016"},{"title":"快速傅里叶变换和雷德算法","slug":"/post/math/number-theory/fft","tags":["acm","大数乘法","fft","快速傅里叶变换"],"createdAt":"Apr 10, 2016"},{"title":"HDU-5306 Gorgeous Sequence 解题报告","slug":"/post/acm/oj/hdu/5306","tags":["acm","数据结构","线段树","解题报告"],"createdAt":"Apr 09, 2016"}],"pagination":{"size":7,"current":5,"totalPage":7},"urlPrefix":"/posts/"},"__N_SSG":true}