"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[194],{45194:function(t,e,r){r.r(e),r.d(e,{SudokuCreator:function(){return o.wY},SudokuSolver:function(){return o.M},createSudokuBoardData:function(){return o.s0}});var o=r(43118)},66420:function(t,e,r){function randomInt(t){let e=Math.random()*t>>0;return e===t?t-1:e}function knuthShuffle(t,e=0,r=t.length){if(e<0&&(e=0),r>t.length&&(r=t.length),e+1>=r)return;let o=r-e;for(let l=o-1,i=r-1;l>0;--l,--i){let r=randomInt(l)+e,o=t[r];t[r]=t[i],t[i]=o}}r.d(e,{Er:function(){return knuthShuffle},Iy:function(){return randomInt},ZP:function(){return knuthShuffle}})},43118:function(t,e,r){r.d(e,{wY:function(){return SudokuCreator},$X:function(){return SudokuSize},M:function(){return SudokuSolver},_g:function(){return copySudokuBoardData},iN:function(){return createMatrixCoordinateMap},s0:function(){return createSudokuBoardData},OA:function(){return toMatrixStyleBoardData}});var o=r(66420);let DancingLinkX=class DancingLinkX{_count;_row;_col;_L;_R;_U;_D;_sz;constructor(t){let{MAX_N:e}=t;this._count=Array(e),this._row=Array(e),this._col=Array(e),this._L=Array(e),this._R=Array(e),this._U=Array(e),this._D=Array(e),this._sz=0}destroy(){this._sz=0,this._count.length=0,this._row.length=0,this._col.length=0,this._L.length=0,this._R.length=0,this._U.length=0,this._D.length=0}init(t){let{_L:e,_R:r,_U:o,_D:l,_count:i}=this,n=t+1;for(let t=0;t<n;++t)e[t]=t-1,r[t]=t+1,o[t]=t,l[t]=t;r[t]=0,e[0]=t,i.fill(0,0,n),this._sz=n}addRow(t,e){let{_count:r,_row:o,_col:l,_L:i,_R:n,_U:a,_D:u}=this,{_sz:s}=this,h=s;for(let h=0;h<e.length;++h,++s){let f=e[h];o[s]=t,l[s]=f,r[f]+=1,i[s]=s-1,n[s]=s+1,u[s]=f,u[a[f]]=s,a[s]=a[f],a[f]=s}n[s-1]=h,i[h]=s-1,this._sz=s}solve(){if(0===this._sz)return null;let t=[];return this._algorithmX(0,t)?t:null}_algorithmX(t,e){let{_count:r,_row:o,_col:l,_L:i,_R:n,_D:a}=this;if(0===n[0])return e.length=t,!0;let u=n[0];for(let t=n[0];0!==t;t=n[t])r[t]<r[u]&&(u=t);this._removeColumn(u);for(let r=a[u];r!==u;r=a[r]){e[t]=o[r];for(let t=n[r];t!==r;t=n[t])this._removeColumn(l[t]);if(this._algorithmX(t+1,e))return!0;for(let t=i[r];t!==r;t=i[t])this._restoreColumn(l[t])}return this._restoreColumn(u),!1}_removeColumn(t){let{_count:e,_col:r,_L:o,_R:l,_U:i,_D:n}=this;o[l[t]]=o[t],l[o[t]]=l[t];for(let o=n[t];o!==t;o=n[o])for(let t=l[o];t!==o;t=l[t])i[n[t]]=i[t],n[i[t]]=n[t],e[r[t]]-=1}_restoreColumn(t){let{_count:e,_col:r,_L:o,_R:l,_U:i,_D:n}=this;for(let l=i[t];l!==t;l=i[l])for(let t=o[l];t!==l;t=o[t])e[r[t]]+=1,i[n[t]]=t,n[i[t]]=t;o[l[t]]=t,l[o[t]]=t}};let SudokuSize=class SudokuSize{BASE_1;BASE_2;BASE_3;BASE_4;MATRIX_RANK;MATRIX;BOARD;constructor(t){let e=t*t,r=e*t;this.MATRIX_RANK=this.BASE_1=t,this.MATRIX=this.BASE_2=e,this.BASE_3=r,this.BOARD=this.BASE_4=r*t}};let createSudokuBoardData=t=>Array(t.BOARD),fillSudokuBoardData=(t,e,r)=>{t.fill(e,0,r.BOARD)},copySudokuBoardData=(t,e,r)=>{let{BOARD:o}=r;for(let r=0;r<o;++r)e[r]=t[r]},toMatrixStyleBoardData=(t,e)=>{let r=[],{MATRIX:o}=e;for(let e=0,l=0;e<o;++e){let i=[];r[e]=i;for(let e=0;e<o;++e,++l)i[e]=t[l]}return r};function createMatrixCoordinateMap(t){let{BASE_1:e,BASE_3:r,MATRIX:o,BOARD:l}=t,i=Array(l);for(let t=0,n=0;t<l;t+=r)for(let l=t,a=t+r;l<a;l+=o)for(let r=0;r<o;r+=e){let o=n+e;i.fill(t+r,n,o),n=o}return i}let SudokuSolver=class SudokuSolver{size;DL_TOTAL_COLUMNS;dlx;matCodeMap;constraints=[,,,,];constructor(t){let{childMatrixWidth:e}=t,r=new SudokuSize(e),o=4*r.BOARD,l=r.BOARD*r.MATRIX,i=o*l+r.MATRIX+1,n=new DancingLinkX({MAX_N:i});this.size=r,this.DL_TOTAL_COLUMNS=o,this.dlx=n,this.matCodeMap=function(t){let{BASE_1:e,BASE_3:r,MATRIX:o,BOARD:l}=t,i=Array(l);for(let t=0,n=0;t<l;t+=r,n+=e)for(let l=t,a=t+r;l<a;l+=o)for(let t=l,r=l+o,a=n;t<r;t+=e)i.fill(a++,t,t+e);return i}(r)}solve(t,e){let{size:r,DL_TOTAL_COLUMNS:o,constraints:l,matCodeMap:i,dlx:n}=this,{MATRIX:a,BOARD:u}=r,encode=(t,e)=>t*u+e+1;n.init(o);for(let e=0,r=0;e<a;++e)for(let o=0;o<a;++o,++r){let u=t[r],s=i[r],h=-1===u?0:u,f=-1===u?a:u+1;for(let t=h;t<f;++t){l[0]=encode(0,r),l[1]=encode(1,e*a+t),l[2]=encode(2,o*a+t),l[3]=encode(3,s*a+t);let i=r*a+t+1;n.addRow(i,l)}}let s=n.solve();if(null===s)return!1;if(null!==e)for(let t of s){let r=t-1,o=r%a,l=r/a>>0;e[l]=o}return!0}};let SudokuCreator=class SudokuCreator{size;solver;matCoordinateMap;gridCodes;candidates;availableNums;tmpBoard;difficulty;constructor(t){let{childMatrixWidth:e,difficulty:r=.2}=t,o=new SudokuSize(e),l=new SudokuSolver({childMatrixWidth:e}),i=Array(o.BOARD);for(let t=0;t<o.BOARD;++t)i[t]=t;this.size=o,this.solver=l,this.matCoordinateMap=createMatrixCoordinateMap(o),this.gridCodes=i,this.difficulty=this._resolveDifficulty(r),this.candidates=Array(o.MATRIX),this.availableNums=Array(o.MATRIX),this.tmpBoard=createSudokuBoardData(o)}createSudoku(t){null!=t&&(this.difficulty=this._resolveDifficulty(t));let e=this._createSolution(),r=this._createPuzzle(e);return{puzzle:r,solution:e}}_createSolution(){let{size:t,candidates:e,gridCodes:r,solver:l,tmpBoard:i}=this;fillSudokuBoardData(i,-1,t),(0,o.Er)(r);let n=Math.round((.3*Math.random()+.2)*t.BOARD),a=Math.max(t.BASE_3,Math.min(t.BOARD,n));for(let t=0;t<a;++t){let l=r[t],n=this._collectCandidates(i,l);if(n<1)continue;let a=(0,o.Iy)(n),u=e[a];i[l]=u}let u=createSudokuBoardData(t);for(let t=0;t<a;++t){let e=r[t];if(-1!==e){if(l.solve(i,u))return u;i[e]=-1}}throw Error("[createSolution] This is impossible!")}_createPuzzle(t){let{size:e,candidates:r,gridCodes:l,solver:i,difficulty:n}=this,a=createSudokuBoardData(e);copySudokuBoardData(t,a,e),(0,o.Er)(l);let u=Math.floor(e.BOARD*n);for(let e=0;e<u;++e){let o=l[e],n=this._collectCandidates(a,o),u=0;for(;u<n&&(a[o]=r[u],!i.solve(a,null));++u);a[o]=u<n?t[o]:-1}return a}_collectCandidates(t,e){let{size:r,matCoordinateMap:o,candidates:l,availableNums:i}=this,{MATRIX_RANK:n,MATRIX:a,BOARD:u}=r,s=e%a,h=e-s,f=o[e];i.fill(!0);for(let e=h,r=h+a;e<r;++e){let r=t[e];-1!==r&&(i[r]=!1)}for(let e=s;e<u;e+=a){let r=t[e];-1!==r&&(i[r]=!1)}for(let e=f,r=0;r<n;++r,e+=a)for(let r=e,o=e+n;r<o;++r){let e=t[r];-1!==e&&(i[e]=!1)}let d=0;for(let t=0;t<a;++t)i[t]&&(l[d++]=t);return d}_resolveDifficulty(t){return .8*Math.max(0,Math.min(1,t))+.2}}}}]);